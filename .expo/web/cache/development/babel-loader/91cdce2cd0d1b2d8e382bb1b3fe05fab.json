{"ast":null,"code":"import getBoundingClientRect from \"../../modules/getBoundingClientRect\";\nimport ResponderTouchHistoryStore from \"./ResponderTouchHistoryStore\";\n\nvar emptyFunction = function emptyFunction() {};\n\nvar emptyObject = {};\nvar emptyArray = [];\n\nfunction normalizeIdentifier(identifier) {\n  return identifier > 20 ? identifier % 20 : identifier;\n}\n\nexport default function createResponderEvent(domEvent) {\n  var rect;\n  var propagationWasStopped = false;\n  var changedTouches;\n  var touches;\n  var domEventChangedTouches = domEvent.changedTouches;\n  var domEventType = domEvent.type;\n  var metaKey = domEvent.metaKey === true;\n  var shiftKey = domEvent.shiftKey === true;\n  var force = domEventChangedTouches && domEventChangedTouches[0].force || 0;\n  var identifier = normalizeIdentifier(domEventChangedTouches && domEventChangedTouches[0].identifier || 0);\n  var clientX = domEventChangedTouches && domEventChangedTouches[0].clientX || domEvent.clientX;\n  var clientY = domEventChangedTouches && domEventChangedTouches[0].clientY || domEvent.clientY;\n  var pageX = domEventChangedTouches && domEventChangedTouches[0].pageX || domEvent.pageX;\n  var pageY = domEventChangedTouches && domEventChangedTouches[0].pageY || domEvent.pageY;\n  var preventDefault = typeof domEvent.preventDefault === 'function' ? domEvent.preventDefault.bind(domEvent) : emptyFunction;\n  var timestamp = domEvent.timeStamp;\n\n  function normalizeTouches(touches) {\n    return Array.prototype.slice.call(touches).map(function (touch) {\n      return {\n        force: touch.force,\n        identifier: normalizeIdentifier(touch.identifier),\n\n        get locationX() {\n          return locationX(touch.clientX);\n        },\n\n        get locationY() {\n          return locationY(touch.clientY);\n        },\n\n        pageX: touch.pageX,\n        pageY: touch.pageY,\n        target: touch.target,\n        timestamp: timestamp\n      };\n    });\n  }\n\n  if (domEventChangedTouches != null) {\n    changedTouches = normalizeTouches(domEventChangedTouches);\n    touches = normalizeTouches(domEvent.touches);\n  } else {\n    var emulatedTouches = [{\n      force: force,\n      identifier: identifier,\n\n      get locationX() {\n        return locationX(clientX);\n      },\n\n      get locationY() {\n        return locationY(clientY);\n      },\n\n      pageX: pageX,\n      pageY: pageY,\n      target: domEvent.target,\n      timestamp: timestamp\n    }];\n    changedTouches = emulatedTouches;\n    touches = domEventType === 'mouseup' || domEventType === 'dragstart' ? emptyArray : emulatedTouches;\n  }\n\n  var responderEvent = {\n    bubbles: true,\n    cancelable: true,\n    currentTarget: null,\n    defaultPrevented: domEvent.defaultPrevented,\n    dispatchConfig: emptyObject,\n    eventPhase: domEvent.eventPhase,\n    isDefaultPrevented: function isDefaultPrevented() {\n      return domEvent.defaultPrevented;\n    },\n    isPropagationStopped: function isPropagationStopped() {\n      return propagationWasStopped;\n    },\n    isTrusted: domEvent.isTrusted,\n    nativeEvent: {\n      altKey: false,\n      ctrlKey: false,\n      metaKey: metaKey,\n      shiftKey: shiftKey,\n      changedTouches: changedTouches,\n      force: force,\n      identifier: identifier,\n\n      get locationX() {\n        return locationX(clientX);\n      },\n\n      get locationY() {\n        return locationY(clientY);\n      },\n\n      pageX: pageX,\n      pageY: pageY,\n      target: domEvent.target,\n      timestamp: timestamp,\n      touches: touches,\n      type: domEventType\n    },\n    persist: emptyFunction,\n    preventDefault: preventDefault,\n    stopPropagation: function stopPropagation() {\n      propagationWasStopped = true;\n    },\n    target: domEvent.target,\n    timeStamp: timestamp,\n    touchHistory: ResponderTouchHistoryStore.touchHistory\n  };\n\n  function locationX(x) {\n    rect = rect || getBoundingClientRect(responderEvent.currentTarget);\n\n    if (rect) {\n      return x - rect.left;\n    }\n  }\n\n  function locationY(y) {\n    rect = rect || getBoundingClientRect(responderEvent.currentTarget);\n\n    if (rect) {\n      return y - rect.top;\n    }\n  }\n\n  return responderEvent;\n}\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/Users/garethcozens/Documents/repo/cloudratha/react-native-web-nx-demo/node_modules/react-native-web/dist/modules/useResponderEvents/createResponderEvent.js"],"names":["emptyFunction","emptyObject","emptyArray","identifier","propagationWasStopped","domEventChangedTouches","domEvent","domEventType","metaKey","shiftKey","force","normalizeIdentifier","clientX","clientY","pageX","pageY","preventDefault","timestamp","Array","touch","locationX","locationY","target","changedTouches","normalizeTouches","touches","emulatedTouches","responderEvent","bubbles","cancelable","currentTarget","defaultPrevented","dispatchConfig","eventPhase","isDefaultPrevented","isPropagationStopped","isTrusted","nativeEvent","altKey","ctrlKey","type","persist","stopPropagation","timeStamp","touchHistory","ResponderTouchHistoryStore","rect","getBoundingClientRect","x","y"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport getBoundingClientRect from '../../modules/getBoundingClientRect';\nimport ResponderTouchHistoryStore from './ResponderTouchHistoryStore';\n\nvar emptyFunction = function emptyFunction() {};\n\nvar emptyObject = {};\nvar emptyArray = [];\n/**\n * Safari produces very large identifiers that would cause the `touchBank` array\n * length to be so large as to crash the browser, if not normalized like this.\n * In the future the `touchBank` should use an object/map instead.\n */\n\nfunction normalizeIdentifier(identifier) {\n  return identifier > 20 ? identifier % 20 : identifier;\n}\n/**\n * Converts a native DOM event to a ResponderEvent.\n * Mouse events are transformed into fake touch events.\n */\n\n\nexport default function createResponderEvent(domEvent) {\n  var rect;\n  var propagationWasStopped = false;\n  var changedTouches;\n  var touches;\n  var domEventChangedTouches = domEvent.changedTouches;\n  var domEventType = domEvent.type;\n  var metaKey = domEvent.metaKey === true;\n  var shiftKey = domEvent.shiftKey === true;\n  var force = domEventChangedTouches && domEventChangedTouches[0].force || 0;\n  var identifier = normalizeIdentifier(domEventChangedTouches && domEventChangedTouches[0].identifier || 0);\n  var clientX = domEventChangedTouches && domEventChangedTouches[0].clientX || domEvent.clientX;\n  var clientY = domEventChangedTouches && domEventChangedTouches[0].clientY || domEvent.clientY;\n  var pageX = domEventChangedTouches && domEventChangedTouches[0].pageX || domEvent.pageX;\n  var pageY = domEventChangedTouches && domEventChangedTouches[0].pageY || domEvent.pageY;\n  var preventDefault = typeof domEvent.preventDefault === 'function' ? domEvent.preventDefault.bind(domEvent) : emptyFunction;\n  var timestamp = domEvent.timeStamp;\n\n  function normalizeTouches(touches) {\n    return Array.prototype.slice.call(touches).map(function (touch) {\n      return {\n        force: touch.force,\n        identifier: normalizeIdentifier(touch.identifier),\n\n        get locationX() {\n          return locationX(touch.clientX);\n        },\n\n        get locationY() {\n          return locationY(touch.clientY);\n        },\n\n        pageX: touch.pageX,\n        pageY: touch.pageY,\n        target: touch.target,\n        timestamp: timestamp\n      };\n    });\n  }\n\n  if (domEventChangedTouches != null) {\n    changedTouches = normalizeTouches(domEventChangedTouches);\n    touches = normalizeTouches(domEvent.touches);\n  } else {\n    var emulatedTouches = [{\n      force: force,\n      identifier: identifier,\n\n      get locationX() {\n        return locationX(clientX);\n      },\n\n      get locationY() {\n        return locationY(clientY);\n      },\n\n      pageX: pageX,\n      pageY: pageY,\n      target: domEvent.target,\n      timestamp: timestamp\n    }];\n    changedTouches = emulatedTouches;\n    touches = domEventType === 'mouseup' || domEventType === 'dragstart' ? emptyArray : emulatedTouches;\n  }\n\n  var responderEvent = {\n    bubbles: true,\n    cancelable: true,\n    // `currentTarget` is set before dispatch\n    currentTarget: null,\n    defaultPrevented: domEvent.defaultPrevented,\n    dispatchConfig: emptyObject,\n    eventPhase: domEvent.eventPhase,\n    isDefaultPrevented: function isDefaultPrevented() {\n      return domEvent.defaultPrevented;\n    },\n    isPropagationStopped: function isPropagationStopped() {\n      return propagationWasStopped;\n    },\n    isTrusted: domEvent.isTrusted,\n    nativeEvent: {\n      altKey: false,\n      ctrlKey: false,\n      metaKey: metaKey,\n      shiftKey: shiftKey,\n      changedTouches: changedTouches,\n      force: force,\n      identifier: identifier,\n\n      get locationX() {\n        return locationX(clientX);\n      },\n\n      get locationY() {\n        return locationY(clientY);\n      },\n\n      pageX: pageX,\n      pageY: pageY,\n      target: domEvent.target,\n      timestamp: timestamp,\n      touches: touches,\n      type: domEventType\n    },\n    persist: emptyFunction,\n    preventDefault: preventDefault,\n    stopPropagation: function stopPropagation() {\n      propagationWasStopped = true;\n    },\n    target: domEvent.target,\n    timeStamp: timestamp,\n    touchHistory: ResponderTouchHistoryStore.touchHistory\n  }; // Using getters and functions serves two purposes:\n  // 1) The value of `currentTarget` is not initially available.\n  // 2) Measuring the clientRect may cause layout jank and should only be done on-demand.\n\n  function locationX(x) {\n    rect = rect || getBoundingClientRect(responderEvent.currentTarget);\n\n    if (rect) {\n      return x - rect.left;\n    }\n  }\n\n  function locationY(y) {\n    rect = rect || getBoundingClientRect(responderEvent.currentTarget);\n\n    if (rect) {\n      return y - rect.top;\n    }\n  }\n\n  return responderEvent;\n}"]},"metadata":{},"sourceType":"module"}