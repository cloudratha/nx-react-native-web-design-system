{"ast":null,"code":"var _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport createElement from \"../createElement\";\nimport css from \"../StyleSheet/css\";\nimport * as forwardedProps from \"../../modules/forwardedProps\";\nimport pick from \"../../modules/pick\";\nimport useElementLayout from \"../../modules/useElementLayout\";\nimport useLayoutEffect from \"../../modules/useLayoutEffect\";\nimport useMergeRefs from \"../../modules/useMergeRefs\";\nimport usePlatformMethods from \"../../modules/usePlatformMethods\";\nimport useResponderEvents from \"../../modules/useResponderEvents\";\nimport StyleSheet from \"../StyleSheet\";\nimport TextInputState from \"../../modules/TextInputState\";\n\nvar isSelectionStale = function isSelectionStale(node, selection) {\n  var selectionEnd = node.selectionEnd,\n      selectionStart = node.selectionStart;\n  var start = selection.start,\n      end = selection.end;\n  return start !== selectionStart || end !== selectionEnd;\n};\n\nvar setSelection = function setSelection(node, selection) {\n  if (isSelectionStale(node, selection)) {\n    var start = selection.start,\n        end = selection.end;\n\n    try {\n      node.setSelectionRange(start, end || start);\n    } catch (e) {}\n  }\n};\n\nvar forwardPropsList = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, forwardedProps.defaultProps), forwardedProps.accessibilityProps), forwardedProps.clickProps), forwardedProps.focusProps), forwardedProps.keyboardProps), forwardedProps.mouseProps), forwardedProps.touchProps), forwardedProps.styleProps), {}, {\n  autoCapitalize: true,\n  autoComplete: true,\n  autoCorrect: true,\n  autoFocus: true,\n  defaultValue: true,\n  disabled: true,\n  lang: true,\n  maxLength: true,\n  onChange: true,\n  onScroll: true,\n  placeholder: true,\n  pointerEvents: true,\n  readOnly: true,\n  rows: true,\n  spellCheck: true,\n  value: true,\n  type: true\n});\n\nvar pickProps = function pickProps(props) {\n  return pick(props, forwardPropsList);\n};\n\nfunction isEventComposing(nativeEvent) {\n  return nativeEvent.isComposing || nativeEvent.keyCode === 229;\n}\n\nvar TextInput = React.forwardRef(_c = _s(function (props, forwardedRef) {\n  _s();\n\n  var _props$autoCapitalize = props.autoCapitalize,\n      autoCapitalize = _props$autoCapitalize === void 0 ? 'sentences' : _props$autoCapitalize,\n      autoComplete = props.autoComplete,\n      autoCompleteType = props.autoCompleteType,\n      _props$autoCorrect = props.autoCorrect,\n      autoCorrect = _props$autoCorrect === void 0 ? true : _props$autoCorrect,\n      blurOnSubmit = props.blurOnSubmit,\n      clearTextOnFocus = props.clearTextOnFocus,\n      dir = props.dir,\n      _props$editable = props.editable,\n      editable = _props$editable === void 0 ? true : _props$editable,\n      _props$keyboardType = props.keyboardType,\n      keyboardType = _props$keyboardType === void 0 ? 'default' : _props$keyboardType,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      _props$numberOfLines = props.numberOfLines,\n      numberOfLines = _props$numberOfLines === void 0 ? 1 : _props$numberOfLines,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onChangeText = props.onChangeText,\n      onContentSizeChange = props.onContentSizeChange,\n      onFocus = props.onFocus,\n      onKeyPress = props.onKeyPress,\n      onLayout = props.onLayout,\n      onMoveShouldSetResponder = props.onMoveShouldSetResponder,\n      onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,\n      onResponderEnd = props.onResponderEnd,\n      onResponderGrant = props.onResponderGrant,\n      onResponderMove = props.onResponderMove,\n      onResponderReject = props.onResponderReject,\n      onResponderRelease = props.onResponderRelease,\n      onResponderStart = props.onResponderStart,\n      onResponderTerminate = props.onResponderTerminate,\n      onResponderTerminationRequest = props.onResponderTerminationRequest,\n      onScrollShouldSetResponder = props.onScrollShouldSetResponder,\n      onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,\n      onSelectionChange = props.onSelectionChange,\n      onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder,\n      onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture,\n      onStartShouldSetResponder = props.onStartShouldSetResponder,\n      onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,\n      onSubmitEditing = props.onSubmitEditing,\n      placeholderTextColor = props.placeholderTextColor,\n      returnKeyType = props.returnKeyType,\n      _props$secureTextEntr = props.secureTextEntry,\n      secureTextEntry = _props$secureTextEntr === void 0 ? false : _props$secureTextEntr,\n      selection = props.selection,\n      selectTextOnFocus = props.selectTextOnFocus,\n      spellCheck = props.spellCheck;\n  var type;\n  var inputMode;\n\n  switch (keyboardType) {\n    case 'email-address':\n      type = 'email';\n      break;\n\n    case 'number-pad':\n    case 'numeric':\n      inputMode = 'numeric';\n      break;\n\n    case 'decimal-pad':\n      inputMode = 'decimal';\n      break;\n\n    case 'phone-pad':\n      type = 'tel';\n      break;\n\n    case 'search':\n    case 'web-search':\n      type = 'search';\n      break;\n\n    case 'url':\n      type = 'url';\n      break;\n\n    default:\n      type = 'text';\n  }\n\n  if (secureTextEntry) {\n    type = 'password';\n  }\n\n  var dimensions = React.useRef({\n    height: null,\n    width: null\n  });\n  var hostRef = React.useRef(null);\n  var handleContentSizeChange = React.useCallback(function (hostNode) {\n    if (multiline && onContentSizeChange && hostNode != null) {\n      var newHeight = hostNode.scrollHeight;\n      var newWidth = hostNode.scrollWidth;\n\n      if (newHeight !== dimensions.current.height || newWidth !== dimensions.current.width) {\n        dimensions.current.height = newHeight;\n        dimensions.current.width = newWidth;\n        onContentSizeChange({\n          nativeEvent: {\n            contentSize: {\n              height: dimensions.current.height,\n              width: dimensions.current.width\n            }\n          }\n        });\n      }\n    }\n  }, [multiline, onContentSizeChange]);\n  var imperativeRef = React.useMemo(function () {\n    return function (hostNode) {\n      if (hostNode != null) {\n        hostNode.clear = function () {\n          if (hostNode != null) {\n            hostNode.value = '';\n          }\n        };\n\n        hostNode.isFocused = function () {\n          return hostNode != null && TextInputState.currentlyFocusedField() === hostNode;\n        };\n\n        handleContentSizeChange(hostNode);\n      }\n    };\n  }, [handleContentSizeChange]);\n\n  function handleBlur(e) {\n    TextInputState._currentlyFocusedNode = null;\n\n    if (onBlur) {\n      e.nativeEvent.text = e.target.value;\n      onBlur(e);\n    }\n  }\n\n  function handleChange(e) {\n    var hostNode = e.target;\n    var text = hostNode.value;\n    e.nativeEvent.text = text;\n    handleContentSizeChange(hostNode);\n\n    if (onChange) {\n      onChange(e);\n    }\n\n    if (onChangeText) {\n      onChangeText(text);\n    }\n  }\n\n  function handleFocus(e) {\n    var hostNode = e.target;\n\n    if (onFocus) {\n      e.nativeEvent.text = hostNode.value;\n      onFocus(e);\n    }\n\n    if (hostNode != null) {\n      TextInputState._currentlyFocusedNode = hostNode;\n\n      if (clearTextOnFocus) {\n        hostNode.value = '';\n      }\n\n      if (selectTextOnFocus) {\n        setTimeout(function () {\n          hostNode.select();\n        }, 0);\n      }\n    }\n  }\n\n  function handleKeyDown(e) {\n    var hostNode = e.target;\n    e.stopPropagation();\n    var blurOnSubmitDefault = !multiline;\n    var shouldBlurOnSubmit = blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;\n    var nativeEvent = e.nativeEvent;\n    var isComposing = isEventComposing(nativeEvent);\n\n    if (onKeyPress) {\n      onKeyPress(e);\n    }\n\n    if (e.key === 'Enter' && !e.shiftKey && !isComposing && !e.isDefaultPrevented()) {\n      if ((blurOnSubmit || !multiline) && onSubmitEditing) {\n        e.preventDefault();\n        nativeEvent.text = e.target.value;\n        onSubmitEditing(e);\n      }\n\n      if (shouldBlurOnSubmit && hostNode != null) {\n        hostNode.blur();\n      }\n    }\n  }\n\n  function handleSelectionChange(e) {\n    if (onSelectionChange) {\n      try {\n        var node = e.target;\n        var selectionStart = node.selectionStart,\n            selectionEnd = node.selectionEnd;\n        e.nativeEvent.selection = {\n          start: selectionStart,\n          end: selectionEnd\n        };\n        e.nativeEvent.text = e.target.value;\n        onSelectionChange(e);\n      } catch (e) {}\n    }\n  }\n\n  useLayoutEffect(function () {\n    var node = hostRef.current;\n\n    if (node != null && selection != null) {\n      setSelection(node, selection);\n    }\n\n    if (document.activeElement === node) {\n      TextInputState._currentlyFocusedNode = node;\n    }\n  }, [hostRef, selection]);\n  var component = multiline ? 'textarea' : 'input';\n  var classList = [classes.textinput];\n  var style = StyleSheet.compose(props.style, placeholderTextColor && {\n    placeholderTextColor: placeholderTextColor\n  });\n  useElementLayout(hostRef, onLayout);\n  useResponderEvents(hostRef, {\n    onMoveShouldSetResponder: onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture: onMoveShouldSetResponderCapture,\n    onResponderEnd: onResponderEnd,\n    onResponderGrant: onResponderGrant,\n    onResponderMove: onResponderMove,\n    onResponderReject: onResponderReject,\n    onResponderRelease: onResponderRelease,\n    onResponderStart: onResponderStart,\n    onResponderTerminate: onResponderTerminate,\n    onResponderTerminationRequest: onResponderTerminationRequest,\n    onScrollShouldSetResponder: onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture: onScrollShouldSetResponderCapture,\n    onSelectionChangeShouldSetResponder: onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture: onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder: onStartShouldSetResponder,\n    onStartShouldSetResponderCapture: onStartShouldSetResponderCapture\n  });\n  var supportedProps = pickProps(props);\n  supportedProps.autoCapitalize = autoCapitalize;\n  supportedProps.autoComplete = autoComplete || autoCompleteType || 'on';\n  supportedProps.autoCorrect = autoCorrect ? 'on' : 'off';\n  supportedProps.classList = classList;\n  supportedProps.dir = dir !== undefined ? dir : 'auto';\n  supportedProps.enterKeyHint = returnKeyType;\n  supportedProps.onBlur = handleBlur;\n  supportedProps.onChange = handleChange;\n  supportedProps.onFocus = handleFocus;\n  supportedProps.onKeyDown = handleKeyDown;\n  supportedProps.onSelect = handleSelectionChange;\n  supportedProps.readOnly = !editable;\n  supportedProps.rows = multiline ? numberOfLines : undefined;\n  supportedProps.spellCheck = spellCheck != null ? spellCheck : autoCorrect;\n  supportedProps.style = style;\n  supportedProps.type = multiline ? undefined : type;\n  supportedProps.inputMode = inputMode;\n  var platformMethodsRef = usePlatformMethods(supportedProps);\n  var setRef = useMergeRefs(hostRef, platformMethodsRef, imperativeRef, forwardedRef);\n  supportedProps.ref = setRef;\n  return createElement(component, supportedProps);\n}, \"9cXNb/Wj3CWMMIn0cD3CQRCmjMc=\", false, function () {\n  return [useElementLayout, useResponderEvents, usePlatformMethods, useMergeRefs];\n}));\n_c2 = TextInput;\nTextInput.displayName = 'TextInput';\nTextInput.State = TextInputState;\nvar classes = css.create({\n  textinput: {\n    MozAppearance: 'textfield',\n    WebkitAppearance: 'none',\n    backgroundColor: 'transparent',\n    border: '0 solid black',\n    borderRadius: 0,\n    boxSizing: 'border-box',\n    font: '14px System',\n    margin: 0,\n    padding: 0,\n    resize: 'none'\n  }\n});\nexport default TextInput;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TextInput$React.forwardRef\");\n$RefreshReg$(_c2, \"TextInput\");\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/Users/garethcozens/Documents/repo/cloudratha/react-native-web-nx-demo/node_modules/react-native-web/dist/exports/TextInput/index.js"],"names":["keys","Object","symbols","i","arguments","source","ownKeys","_defineProperty","key","value","enumerable","configurable","writable","obj","isSelectionStale","selectionEnd","node","selectionStart","start","selection","end","setSelection","forwardPropsList","_objectSpread","forwardedProps","autoCapitalize","autoComplete","autoCorrect","autoFocus","defaultValue","disabled","lang","maxLength","onChange","onScroll","placeholder","pointerEvents","readOnly","rows","spellCheck","type","pickProps","pick","nativeEvent","TextInput","React","_props$autoCapitalize","props","autoCompleteType","_props$autoCorrect","blurOnSubmit","clearTextOnFocus","dir","_props$editable","editable","_props$keyboardType","keyboardType","_props$multiline","multiline","_props$numberOfLines","numberOfLines","onBlur","onChangeText","onContentSizeChange","onFocus","onKeyPress","onLayout","onMoveShouldSetResponder","onMoveShouldSetResponderCapture","onResponderEnd","onResponderGrant","onResponderMove","onResponderReject","onResponderRelease","onResponderStart","onResponderTerminate","onResponderTerminationRequest","onScrollShouldSetResponder","onScrollShouldSetResponderCapture","onSelectionChange","onSelectionChangeShouldSetResponder","onSelectionChangeShouldSetResponderCapture","onStartShouldSetResponder","onStartShouldSetResponderCapture","onSubmitEditing","placeholderTextColor","returnKeyType","_props$secureTextEntr","secureTextEntry","selectTextOnFocus","inputMode","dimensions","height","width","hostRef","handleContentSizeChange","hostNode","newHeight","newWidth","contentSize","imperativeRef","TextInputState","e","text","setTimeout","blurOnSubmitDefault","shouldBlurOnSubmit","isComposing","isEventComposing","useLayoutEffect","document","component","classList","classes","style","StyleSheet","useElementLayout","useResponderEvents","supportedProps","platformMethodsRef","usePlatformMethods","setRef","useMergeRefs","createElement","css","textinput","MozAppearance","WebkitAppearance","backgroundColor","border","borderRadius","boxSizing","font","margin","padding","resize"],"mappings":"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","sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport * as React from 'react';\nimport createElement from '../createElement';\nimport css from '../StyleSheet/css';\nimport * as forwardedProps from '../../modules/forwardedProps';\nimport pick from '../../modules/pick';\nimport useElementLayout from '../../modules/useElementLayout';\nimport useLayoutEffect from '../../modules/useLayoutEffect';\nimport useMergeRefs from '../../modules/useMergeRefs';\nimport usePlatformMethods from '../../modules/usePlatformMethods';\nimport useResponderEvents from '../../modules/useResponderEvents';\nimport StyleSheet from '../StyleSheet';\nimport TextInputState from '../../modules/TextInputState';\n/**\n * Determines whether a 'selection' prop differs from a node's existing\n * selection state.\n */\n\nvar isSelectionStale = function isSelectionStale(node, selection) {\n  var selectionEnd = node.selectionEnd,\n      selectionStart = node.selectionStart;\n  var start = selection.start,\n      end = selection.end;\n  return start !== selectionStart || end !== selectionEnd;\n};\n/**\n * Certain input types do no support 'selectSelectionRange' and will throw an\n * error.\n */\n\n\nvar setSelection = function setSelection(node, selection) {\n  if (isSelectionStale(node, selection)) {\n    var start = selection.start,\n        end = selection.end;\n\n    try {\n      node.setSelectionRange(start, end || start);\n    } catch (e) {}\n  }\n};\n\nvar forwardPropsList = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, forwardedProps.defaultProps), forwardedProps.accessibilityProps), forwardedProps.clickProps), forwardedProps.focusProps), forwardedProps.keyboardProps), forwardedProps.mouseProps), forwardedProps.touchProps), forwardedProps.styleProps), {}, {\n  autoCapitalize: true,\n  autoComplete: true,\n  autoCorrect: true,\n  autoFocus: true,\n  defaultValue: true,\n  disabled: true,\n  lang: true,\n  maxLength: true,\n  onChange: true,\n  onScroll: true,\n  placeholder: true,\n  pointerEvents: true,\n  readOnly: true,\n  rows: true,\n  spellCheck: true,\n  value: true,\n  type: true\n});\n\nvar pickProps = function pickProps(props) {\n  return pick(props, forwardPropsList);\n}; // If an Input Method Editor is processing key input, the 'keyCode' is 229.\n// https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode\n\n\nfunction isEventComposing(nativeEvent) {\n  return nativeEvent.isComposing || nativeEvent.keyCode === 229;\n}\n\nvar TextInput = /*#__PURE__*/React.forwardRef(function (props, forwardedRef) {\n  var _props$autoCapitalize = props.autoCapitalize,\n      autoCapitalize = _props$autoCapitalize === void 0 ? 'sentences' : _props$autoCapitalize,\n      autoComplete = props.autoComplete,\n      autoCompleteType = props.autoCompleteType,\n      _props$autoCorrect = props.autoCorrect,\n      autoCorrect = _props$autoCorrect === void 0 ? true : _props$autoCorrect,\n      blurOnSubmit = props.blurOnSubmit,\n      clearTextOnFocus = props.clearTextOnFocus,\n      dir = props.dir,\n      _props$editable = props.editable,\n      editable = _props$editable === void 0 ? true : _props$editable,\n      _props$keyboardType = props.keyboardType,\n      keyboardType = _props$keyboardType === void 0 ? 'default' : _props$keyboardType,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      _props$numberOfLines = props.numberOfLines,\n      numberOfLines = _props$numberOfLines === void 0 ? 1 : _props$numberOfLines,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onChangeText = props.onChangeText,\n      onContentSizeChange = props.onContentSizeChange,\n      onFocus = props.onFocus,\n      onKeyPress = props.onKeyPress,\n      onLayout = props.onLayout,\n      onMoveShouldSetResponder = props.onMoveShouldSetResponder,\n      onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,\n      onResponderEnd = props.onResponderEnd,\n      onResponderGrant = props.onResponderGrant,\n      onResponderMove = props.onResponderMove,\n      onResponderReject = props.onResponderReject,\n      onResponderRelease = props.onResponderRelease,\n      onResponderStart = props.onResponderStart,\n      onResponderTerminate = props.onResponderTerminate,\n      onResponderTerminationRequest = props.onResponderTerminationRequest,\n      onScrollShouldSetResponder = props.onScrollShouldSetResponder,\n      onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,\n      onSelectionChange = props.onSelectionChange,\n      onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder,\n      onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture,\n      onStartShouldSetResponder = props.onStartShouldSetResponder,\n      onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,\n      onSubmitEditing = props.onSubmitEditing,\n      placeholderTextColor = props.placeholderTextColor,\n      returnKeyType = props.returnKeyType,\n      _props$secureTextEntr = props.secureTextEntry,\n      secureTextEntry = _props$secureTextEntr === void 0 ? false : _props$secureTextEntr,\n      selection = props.selection,\n      selectTextOnFocus = props.selectTextOnFocus,\n      spellCheck = props.spellCheck;\n  var type;\n  var inputMode;\n\n  switch (keyboardType) {\n    case 'email-address':\n      type = 'email';\n      break;\n\n    case 'number-pad':\n    case 'numeric':\n      inputMode = 'numeric';\n      break;\n\n    case 'decimal-pad':\n      inputMode = 'decimal';\n      break;\n\n    case 'phone-pad':\n      type = 'tel';\n      break;\n\n    case 'search':\n    case 'web-search':\n      type = 'search';\n      break;\n\n    case 'url':\n      type = 'url';\n      break;\n\n    default:\n      type = 'text';\n  }\n\n  if (secureTextEntry) {\n    type = 'password';\n  }\n\n  var dimensions = React.useRef({\n    height: null,\n    width: null\n  });\n  var hostRef = React.useRef(null);\n  var handleContentSizeChange = React.useCallback(function (hostNode) {\n    if (multiline && onContentSizeChange && hostNode != null) {\n      var newHeight = hostNode.scrollHeight;\n      var newWidth = hostNode.scrollWidth;\n\n      if (newHeight !== dimensions.current.height || newWidth !== dimensions.current.width) {\n        dimensions.current.height = newHeight;\n        dimensions.current.width = newWidth;\n        onContentSizeChange({\n          nativeEvent: {\n            contentSize: {\n              height: dimensions.current.height,\n              width: dimensions.current.width\n            }\n          }\n        });\n      }\n    }\n  }, [multiline, onContentSizeChange]);\n  var imperativeRef = React.useMemo(function () {\n    return function (hostNode) {\n      // TextInput needs to add more methods to the hostNode in addition to those\n      // added by `usePlatformMethods`. This is temporarily until an API like\n      // `TextInput.clear(hostRef)` is added to React Native.\n      if (hostNode != null) {\n        hostNode.clear = function () {\n          if (hostNode != null) {\n            hostNode.value = '';\n          }\n        };\n\n        hostNode.isFocused = function () {\n          return hostNode != null && TextInputState.currentlyFocusedField() === hostNode;\n        };\n\n        handleContentSizeChange(hostNode);\n      }\n    };\n  }, [handleContentSizeChange]);\n\n  function handleBlur(e) {\n    TextInputState._currentlyFocusedNode = null;\n\n    if (onBlur) {\n      e.nativeEvent.text = e.target.value;\n      onBlur(e);\n    }\n  }\n\n  function handleChange(e) {\n    var hostNode = e.target;\n    var text = hostNode.value;\n    e.nativeEvent.text = text;\n    handleContentSizeChange(hostNode);\n\n    if (onChange) {\n      onChange(e);\n    }\n\n    if (onChangeText) {\n      onChangeText(text);\n    }\n  }\n\n  function handleFocus(e) {\n    var hostNode = e.target;\n\n    if (onFocus) {\n      e.nativeEvent.text = hostNode.value;\n      onFocus(e);\n    }\n\n    if (hostNode != null) {\n      TextInputState._currentlyFocusedNode = hostNode;\n\n      if (clearTextOnFocus) {\n        hostNode.value = '';\n      }\n\n      if (selectTextOnFocus) {\n        // Safari requires selection to occur in a setTimeout\n        setTimeout(function () {\n          hostNode.select();\n        }, 0);\n      }\n    }\n  }\n\n  function handleKeyDown(e) {\n    var hostNode = e.target; // Prevent key events bubbling (see #612)\n\n    e.stopPropagation();\n    var blurOnSubmitDefault = !multiline;\n    var shouldBlurOnSubmit = blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;\n    var nativeEvent = e.nativeEvent;\n    var isComposing = isEventComposing(nativeEvent);\n\n    if (onKeyPress) {\n      onKeyPress(e);\n    }\n\n    if (e.key === 'Enter' && !e.shiftKey && // Do not call submit if composition is occuring.\n    !isComposing && !e.isDefaultPrevented()) {\n      if ((blurOnSubmit || !multiline) && onSubmitEditing) {\n        // prevent \"Enter\" from inserting a newline or submitting a form\n        e.preventDefault();\n        nativeEvent.text = e.target.value;\n        onSubmitEditing(e);\n      }\n\n      if (shouldBlurOnSubmit && hostNode != null) {\n        hostNode.blur();\n      }\n    }\n  }\n\n  function handleSelectionChange(e) {\n    if (onSelectionChange) {\n      try {\n        var node = e.target;\n        var selectionStart = node.selectionStart,\n            selectionEnd = node.selectionEnd;\n        e.nativeEvent.selection = {\n          start: selectionStart,\n          end: selectionEnd\n        };\n        e.nativeEvent.text = e.target.value;\n        onSelectionChange(e);\n      } catch (e) {}\n    }\n  }\n\n  useLayoutEffect(function () {\n    var node = hostRef.current;\n\n    if (node != null && selection != null) {\n      setSelection(node, selection);\n    }\n\n    if (document.activeElement === node) {\n      TextInputState._currentlyFocusedNode = node;\n    }\n  }, [hostRef, selection]);\n  var component = multiline ? 'textarea' : 'input';\n  var classList = [classes.textinput];\n  var style = StyleSheet.compose(props.style, placeholderTextColor && {\n    placeholderTextColor: placeholderTextColor\n  });\n  useElementLayout(hostRef, onLayout);\n  useResponderEvents(hostRef, {\n    onMoveShouldSetResponder: onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture: onMoveShouldSetResponderCapture,\n    onResponderEnd: onResponderEnd,\n    onResponderGrant: onResponderGrant,\n    onResponderMove: onResponderMove,\n    onResponderReject: onResponderReject,\n    onResponderRelease: onResponderRelease,\n    onResponderStart: onResponderStart,\n    onResponderTerminate: onResponderTerminate,\n    onResponderTerminationRequest: onResponderTerminationRequest,\n    onScrollShouldSetResponder: onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture: onScrollShouldSetResponderCapture,\n    onSelectionChangeShouldSetResponder: onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture: onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder: onStartShouldSetResponder,\n    onStartShouldSetResponderCapture: onStartShouldSetResponderCapture\n  });\n  var supportedProps = pickProps(props);\n  supportedProps.autoCapitalize = autoCapitalize;\n  supportedProps.autoComplete = autoComplete || autoCompleteType || 'on';\n  supportedProps.autoCorrect = autoCorrect ? 'on' : 'off';\n  supportedProps.classList = classList; // 'auto' by default allows browsers to infer writing direction\n\n  supportedProps.dir = dir !== undefined ? dir : 'auto';\n  supportedProps.enterKeyHint = returnKeyType;\n  supportedProps.onBlur = handleBlur;\n  supportedProps.onChange = handleChange;\n  supportedProps.onFocus = handleFocus;\n  supportedProps.onKeyDown = handleKeyDown;\n  supportedProps.onSelect = handleSelectionChange;\n  supportedProps.readOnly = !editable;\n  supportedProps.rows = multiline ? numberOfLines : undefined;\n  supportedProps.spellCheck = spellCheck != null ? spellCheck : autoCorrect;\n  supportedProps.style = style;\n  supportedProps.type = multiline ? undefined : type;\n  supportedProps.inputMode = inputMode;\n  var platformMethodsRef = usePlatformMethods(supportedProps);\n  var setRef = useMergeRefs(hostRef, platformMethodsRef, imperativeRef, forwardedRef);\n  supportedProps.ref = setRef;\n  return createElement(component, supportedProps);\n});\nTextInput.displayName = 'TextInput'; // $FlowFixMe\n\nTextInput.State = TextInputState;\nvar classes = css.create({\n  textinput: {\n    MozAppearance: 'textfield',\n    WebkitAppearance: 'none',\n    backgroundColor: 'transparent',\n    border: '0 solid black',\n    borderRadius: 0,\n    boxSizing: 'border-box',\n    font: '14px System',\n    margin: 0,\n    padding: 0,\n    resize: 'none'\n  }\n});\nexport default TextInput;"]},"metadata":{},"sourceType":"module"}