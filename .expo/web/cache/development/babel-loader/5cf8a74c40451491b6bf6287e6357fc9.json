{"ast":null,"code":"'use strict';\n\nvar DELAY = 'DELAY';\nvar ERROR = 'ERROR';\nvar LONG_PRESS_DETECTED = 'LONG_PRESS_DETECTED';\nvar NOT_RESPONDER = 'NOT_RESPONDER';\nvar RESPONDER_ACTIVE_LONG_PRESS_START = 'RESPONDER_ACTIVE_LONG_PRESS_START';\nvar RESPONDER_ACTIVE_PRESS_START = 'RESPONDER_ACTIVE_PRESS_START';\nvar RESPONDER_INACTIVE_PRESS_START = 'RESPONDER_INACTIVE_PRESS_START';\nvar RESPONDER_GRANT = 'RESPONDER_GRANT';\nvar RESPONDER_RELEASE = 'RESPONDER_RELEASE';\nvar RESPONDER_TERMINATED = 'RESPONDER_TERMINATED';\nvar Transitions = Object.freeze({\n  NOT_RESPONDER: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: RESPONDER_INACTIVE_PRESS_START,\n    RESPONDER_RELEASE: ERROR,\n    RESPONDER_TERMINATED: ERROR,\n    LONG_PRESS_DETECTED: ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_START: {\n    DELAY: RESPONDER_ACTIVE_PRESS_START,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: ERROR\n  },\n  RESPONDER_ACTIVE_PRESS_START: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: RESPONDER_ACTIVE_LONG_PRESS_START\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_START: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: RESPONDER_ACTIVE_LONG_PRESS_START\n  },\n  ERROR: {\n    DELAY: NOT_RESPONDER,\n    RESPONDER_GRANT: RESPONDER_INACTIVE_PRESS_START,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: NOT_RESPONDER\n  }\n});\n\nvar isActiveSignal = function isActiveSignal(signal) {\n  return signal === RESPONDER_ACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_LONG_PRESS_START;\n};\n\nvar isButtonRole = function isButtonRole(element) {\n  return element.getAttribute('role') === 'button';\n};\n\nvar isPressStartSignal = function isPressStartSignal(signal) {\n  return signal === RESPONDER_INACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_LONG_PRESS_START;\n};\n\nvar isTerminalSignal = function isTerminalSignal(signal) {\n  return signal === RESPONDER_TERMINATED || signal === RESPONDER_RELEASE;\n};\n\nvar isValidKeyPress = function isValidKeyPress(event) {\n  var key = event.key,\n      target = event.target;\n  var role = target.getAttribute('role');\n  var isSpacebar = key === ' ' || key === 'Spacebar';\n  return key === 'Enter' || isSpacebar && role === 'button';\n};\n\nvar DEFAULT_LONG_PRESS_DELAY_MS = 450;\nvar DEFAULT_PRESS_DELAY_MS = 50;\n\nvar PressResponder = function () {\n  function PressResponder(config) {\n    this._eventHandlers = null;\n    this._isPointerTouch = false;\n    this._longPressDelayTimeout = null;\n    this._longPressDispatched = false;\n    this._pressDelayTimeout = null;\n    this._pressOutDelayTimeout = null;\n    this._touchState = NOT_RESPONDER;\n    this.configure(config);\n  }\n\n  var _proto = PressResponder.prototype;\n\n  _proto.configure = function configure(config) {\n    this._config = config;\n  };\n\n  _proto.reset = function reset() {\n    this._cancelLongPressDelayTimeout();\n\n    this._cancelPressDelayTimeout();\n\n    this._cancelPressOutDelayTimeout();\n  };\n\n  _proto.getEventHandlers = function getEventHandlers() {\n    if (this._eventHandlers == null) {\n      this._eventHandlers = this._createEventHandlers();\n    }\n\n    return this._eventHandlers;\n  };\n\n  _proto._createEventHandlers = function _createEventHandlers() {\n    var _this = this;\n\n    var start = function start(event, shouldDelay) {\n      event.persist();\n\n      _this._cancelPressOutDelayTimeout();\n\n      _this._longPressDispatched = false;\n      _this._selectionTerminated = false;\n      _this._touchState = NOT_RESPONDER;\n      _this._isPointerTouch = event.nativeEvent.type === 'touchstart';\n\n      _this._receiveSignal(RESPONDER_GRANT, event);\n\n      var delayPressStart = normalizeDelay(_this._config.delayPressStart, 0, DEFAULT_PRESS_DELAY_MS);\n\n      if (shouldDelay !== false && delayPressStart > 0) {\n        _this._pressDelayTimeout = setTimeout(function () {\n          _this._receiveSignal(DELAY, event);\n        }, delayPressStart);\n      } else {\n        _this._receiveSignal(DELAY, event);\n      }\n\n      var delayLongPress = normalizeDelay(_this._config.delayLongPress, 10, DEFAULT_LONG_PRESS_DELAY_MS);\n      _this._longPressDelayTimeout = setTimeout(function () {\n        _this._handleLongPress(event);\n      }, delayLongPress + delayPressStart);\n    };\n\n    var end = function end(event) {\n      _this._receiveSignal(RESPONDER_RELEASE, event);\n    };\n\n    var keyupHandler = function keyupHandler(event) {\n      var onPress = _this._config.onPress;\n      var target = event.target;\n\n      if (_this._touchState !== NOT_RESPONDER && isValidKeyPress(event)) {\n        end(event);\n        document.removeEventListener('keyup', keyupHandler);\n        var role = target.getAttribute('role');\n        var elementType = target.tagName.toLowerCase();\n        var isNativeInteractiveElement = role === 'link' || elementType === 'a' || elementType === 'button' || elementType === 'input' || elementType === 'select' || elementType === 'textarea';\n\n        if (onPress != null && !isNativeInteractiveElement) {\n          onPress(event);\n        }\n      }\n    };\n\n    return {\n      onStartShouldSetResponder: function onStartShouldSetResponder(event) {\n        var disabled = _this._config.disabled;\n\n        if (disabled && isButtonRole(event.currentTarget)) {\n          event.stopPropagation();\n        }\n\n        if (disabled == null) {\n          return true;\n        }\n\n        return !disabled;\n      },\n      onKeyDown: function onKeyDown(event) {\n        var disabled = _this._config.disabled;\n        var key = event.key,\n            target = event.target;\n\n        if (!disabled && isValidKeyPress(event)) {\n          if (_this._touchState === NOT_RESPONDER) {\n            start(event, false);\n            document.addEventListener('keyup', keyupHandler);\n          }\n\n          var role = target.getAttribute('role');\n          var isSpacebarKey = key === ' ' || key === 'Spacebar';\n\n          var _isButtonRole = role === 'button' || role === 'menuitem';\n\n          if (isSpacebarKey && _isButtonRole) {\n            event.preventDefault();\n          }\n\n          event.stopPropagation();\n        }\n      },\n      onResponderGrant: function onResponderGrant(event) {\n        return start(event);\n      },\n      onResponderMove: function onResponderMove(event) {\n        if (_this._config.onPressMove != null) {\n          _this._config.onPressMove(event);\n        }\n\n        var touch = getTouchFromResponderEvent(event);\n\n        if (_this._touchActivatePosition != null) {\n          var deltaX = _this._touchActivatePosition.pageX - touch.pageX;\n          var deltaY = _this._touchActivatePosition.pageY - touch.pageY;\n\n          if (Math.hypot(deltaX, deltaY) > 10) {\n            _this._cancelLongPressDelayTimeout();\n          }\n        }\n      },\n      onResponderRelease: function onResponderRelease(event) {\n        return end(event);\n      },\n      onResponderTerminate: function onResponderTerminate(event) {\n        if (event.nativeEvent.type === 'selectionchange') {\n          _this._selectionTerminated = true;\n        }\n\n        _this._receiveSignal(RESPONDER_TERMINATED, event);\n      },\n      onResponderTerminationRequest: function onResponderTerminationRequest(event) {\n        var _this$_config = _this._config,\n            cancelable = _this$_config.cancelable,\n            disabled = _this$_config.disabled,\n            onLongPress = _this$_config.onLongPress;\n\n        if (!disabled && onLongPress != null && _this._isPointerTouch && event.nativeEvent.type === 'contextmenu') {\n          return false;\n        }\n\n        if (cancelable == null) {\n          return true;\n        }\n\n        return cancelable;\n      },\n      onClick: function onClick(event) {\n        var _this$_config2 = _this._config,\n            disabled = _this$_config2.disabled,\n            onPress = _this$_config2.onPress;\n\n        if (!disabled) {\n          event.stopPropagation();\n\n          if (_this._longPressDispatched || _this._selectionTerminated) {\n            event.preventDefault();\n          } else if (onPress != null && event.altKey === false) {\n            onPress(event);\n          }\n        } else {\n          if (isButtonRole(event.currentTarget)) {\n            event.stopPropagation();\n          }\n        }\n      },\n      onContextMenu: function onContextMenu(event) {\n        var _this$_config3 = _this._config,\n            disabled = _this$_config3.disabled,\n            onLongPress = _this$_config3.onLongPress;\n\n        if (!disabled) {\n          if (onLongPress != null && _this._isPointerTouch && !event.defaultPrevented) {\n            event.preventDefault();\n            event.stopPropagation();\n          }\n        } else {\n          if (isButtonRole(event.currentTarget)) {\n            event.stopPropagation();\n          }\n        }\n      }\n    };\n  };\n\n  _proto._receiveSignal = function _receiveSignal(signal, event) {\n    var prevState = this._touchState;\n    var nextState = null;\n\n    if (Transitions[prevState] != null) {\n      nextState = Transitions[prevState][signal];\n    }\n\n    if (this._touchState === NOT_RESPONDER && signal === RESPONDER_RELEASE) {\n      return;\n    }\n\n    if (nextState == null || nextState === ERROR) {\n      console.error(\"PressResponder: Invalid signal \" + signal + \" for state \" + prevState + \" on responder\");\n    } else if (prevState !== nextState) {\n      this._performTransitionSideEffects(prevState, nextState, signal, event);\n\n      this._touchState = nextState;\n    }\n  };\n\n  _proto._performTransitionSideEffects = function _performTransitionSideEffects(prevState, nextState, signal, event) {\n    if (isTerminalSignal(signal)) {\n      this._isPointerTouch = false;\n      this._touchActivatePosition = null;\n\n      this._cancelLongPressDelayTimeout();\n    }\n\n    if (isPressStartSignal(prevState) && signal === LONG_PRESS_DETECTED) {\n      var onLongPress = this._config.onLongPress;\n\n      if (onLongPress != null && event.nativeEvent.key == null) {\n        onLongPress(event);\n        this._longPressDispatched = true;\n      }\n    }\n\n    var isPrevActive = isActiveSignal(prevState);\n    var isNextActive = isActiveSignal(nextState);\n\n    if (!isPrevActive && isNextActive) {\n      this._activate(event);\n    } else if (isPrevActive && !isNextActive) {\n      this._deactivate(event);\n    }\n\n    if (isPressStartSignal(prevState) && signal === RESPONDER_RELEASE) {\n      var _this$_config4 = this._config,\n          _onLongPress = _this$_config4.onLongPress,\n          onPress = _this$_config4.onPress;\n\n      if (onPress != null) {\n        var isPressCanceledByLongPress = _onLongPress != null && prevState === RESPONDER_ACTIVE_LONG_PRESS_START;\n\n        if (!isPressCanceledByLongPress) {\n          if (!isNextActive && !isPrevActive) {\n            this._activate(event);\n\n            this._deactivate(event);\n          }\n        }\n      }\n    }\n\n    this._cancelPressDelayTimeout();\n  };\n\n  _proto._activate = function _activate(event) {\n    var _this$_config5 = this._config,\n        onPressChange = _this$_config5.onPressChange,\n        onPressStart = _this$_config5.onPressStart;\n    var touch = getTouchFromResponderEvent(event);\n    this._touchActivatePosition = {\n      pageX: touch.pageX,\n      pageY: touch.pageY\n    };\n\n    if (onPressStart != null) {\n      onPressStart(event);\n    }\n\n    if (onPressChange != null) {\n      onPressChange(true);\n    }\n  };\n\n  _proto._deactivate = function _deactivate(event) {\n    var _this$_config6 = this._config,\n        onPressChange = _this$_config6.onPressChange,\n        onPressEnd = _this$_config6.onPressEnd;\n\n    function end() {\n      if (onPressEnd != null) {\n        onPressEnd(event);\n      }\n\n      if (onPressChange != null) {\n        onPressChange(false);\n      }\n    }\n\n    var delayPressEnd = normalizeDelay(this._config.delayPressEnd);\n\n    if (delayPressEnd > 0) {\n      this._pressOutDelayTimeout = setTimeout(function () {\n        end();\n      }, delayPressEnd);\n    } else {\n      end();\n    }\n  };\n\n  _proto._handleLongPress = function _handleLongPress(event) {\n    if (this._touchState === RESPONDER_ACTIVE_PRESS_START || this._touchState === RESPONDER_ACTIVE_LONG_PRESS_START) {\n      this._receiveSignal(LONG_PRESS_DETECTED, event);\n    }\n  };\n\n  _proto._cancelLongPressDelayTimeout = function _cancelLongPressDelayTimeout() {\n    if (this._longPressDelayTimeout != null) {\n      clearTimeout(this._longPressDelayTimeout);\n      this._longPressDelayTimeout = null;\n    }\n  };\n\n  _proto._cancelPressDelayTimeout = function _cancelPressDelayTimeout() {\n    if (this._pressDelayTimeout != null) {\n      clearTimeout(this._pressDelayTimeout);\n      this._pressDelayTimeout = null;\n    }\n  };\n\n  _proto._cancelPressOutDelayTimeout = function _cancelPressOutDelayTimeout() {\n    if (this._pressOutDelayTimeout != null) {\n      clearTimeout(this._pressOutDelayTimeout);\n      this._pressOutDelayTimeout = null;\n    }\n  };\n\n  return PressResponder;\n}();\n\nexport { PressResponder as default };\n\nfunction normalizeDelay(delay, min, fallback) {\n  if (min === void 0) {\n    min = 0;\n  }\n\n  if (fallback === void 0) {\n    fallback = 0;\n  }\n\n  return Math.max(min, delay !== null && delay !== void 0 ? delay : fallback);\n}\n\nfunction getTouchFromResponderEvent(event) {\n  var _event$nativeEvent = event.nativeEvent,\n      changedTouches = _event$nativeEvent.changedTouches,\n      touches = _event$nativeEvent.touches;\n\n  if (touches != null && touches.length > 0) {\n    return touches[0];\n  }\n\n  if (changedTouches != null && changedTouches.length > 0) {\n    return changedTouches[0];\n  }\n\n  return event.nativeEvent;\n}","map":{"version":3,"sources":["/Users/garethcozens/Documents/repo/cloudratha/react-native-web-nx-demo/node_modules/react-native-web/dist/modules/usePressEvents/PressResponder.js"],"names":["DELAY","ERROR","LONG_PRESS_DETECTED","NOT_RESPONDER","RESPONDER_ACTIVE_LONG_PRESS_START","RESPONDER_ACTIVE_PRESS_START","RESPONDER_INACTIVE_PRESS_START","RESPONDER_GRANT","RESPONDER_RELEASE","RESPONDER_TERMINATED","Transitions","Object","isActiveSignal","signal","isButtonRole","element","isPressStartSignal","isTerminalSignal","isValidKeyPress","key","event","target","role","isSpacebar","DEFAULT_LONG_PRESS_DELAY_MS","DEFAULT_PRESS_DELAY_MS","PressResponder","_proto","_this","start","delayPressStart","normalizeDelay","shouldDelay","setTimeout","delayLongPress","end","keyupHandler","onPress","document","elementType","isNativeInteractiveElement","onStartShouldSetResponder","disabled","onKeyDown","isSpacebarKey","_isButtonRole","onResponderGrant","onResponderMove","touch","getTouchFromResponderEvent","deltaX","deltaY","Math","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","_this$_config","cancelable","onLongPress","onClick","_this$_config2","onContextMenu","_this$_config3","prevState","nextState","console","isPrevActive","isNextActive","_this$_config4","_onLongPress","isPressCanceledByLongPress","_this$_config5","onPressChange","onPressStart","pageX","pageY","_this$_config6","onPressEnd","delayPressEnd","clearTimeout","min","fallback","delay","_event$nativeEvent","changedTouches","touches"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nvar DELAY = 'DELAY';\nvar ERROR = 'ERROR';\nvar LONG_PRESS_DETECTED = 'LONG_PRESS_DETECTED';\nvar NOT_RESPONDER = 'NOT_RESPONDER';\nvar RESPONDER_ACTIVE_LONG_PRESS_START = 'RESPONDER_ACTIVE_LONG_PRESS_START';\nvar RESPONDER_ACTIVE_PRESS_START = 'RESPONDER_ACTIVE_PRESS_START';\nvar RESPONDER_INACTIVE_PRESS_START = 'RESPONDER_INACTIVE_PRESS_START';\nvar RESPONDER_GRANT = 'RESPONDER_GRANT';\nvar RESPONDER_RELEASE = 'RESPONDER_RELEASE';\nvar RESPONDER_TERMINATED = 'RESPONDER_TERMINATED';\nvar Transitions = Object.freeze({\n  NOT_RESPONDER: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: RESPONDER_INACTIVE_PRESS_START,\n    RESPONDER_RELEASE: ERROR,\n    RESPONDER_TERMINATED: ERROR,\n    LONG_PRESS_DETECTED: ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_START: {\n    DELAY: RESPONDER_ACTIVE_PRESS_START,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: ERROR\n  },\n  RESPONDER_ACTIVE_PRESS_START: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: RESPONDER_ACTIVE_LONG_PRESS_START\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_START: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: RESPONDER_ACTIVE_LONG_PRESS_START\n  },\n  ERROR: {\n    DELAY: NOT_RESPONDER,\n    RESPONDER_GRANT: RESPONDER_INACTIVE_PRESS_START,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: NOT_RESPONDER\n  }\n});\n\nvar isActiveSignal = function isActiveSignal(signal) {\n  return signal === RESPONDER_ACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_LONG_PRESS_START;\n};\n\nvar isButtonRole = function isButtonRole(element) {\n  return element.getAttribute('role') === 'button';\n};\n\nvar isPressStartSignal = function isPressStartSignal(signal) {\n  return signal === RESPONDER_INACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_LONG_PRESS_START;\n};\n\nvar isTerminalSignal = function isTerminalSignal(signal) {\n  return signal === RESPONDER_TERMINATED || signal === RESPONDER_RELEASE;\n};\n\nvar isValidKeyPress = function isValidKeyPress(event) {\n  var key = event.key,\n      target = event.target;\n  var role = target.getAttribute('role');\n  var isSpacebar = key === ' ' || key === 'Spacebar';\n  return key === 'Enter' || isSpacebar && role === 'button';\n};\n\nvar DEFAULT_LONG_PRESS_DELAY_MS = 450; // 500 - 50\n\nvar DEFAULT_PRESS_DELAY_MS = 50;\n/**\n * =========================== PressResponder Tutorial ===========================\n *\n * The `PressResponder` class helps you create press interactions by analyzing the\n * geometry of elements and observing when another responder (e.g. ScrollView)\n * has stolen the touch lock. It offers hooks for your component to provide\n * interaction feedback to the user:\n *\n * - When a press has activated (e.g. highlight an element)\n * - When a press has deactivated (e.g. un-highlight an element)\n * - When a press sould trigger an action, meaning it activated and deactivated\n *   while within the geometry of the element without the lock being stolen.\n *\n * A high quality interaction isn't as simple as you might think. There should\n * be a slight delay before activation. Moving your finger beyond an element's\n * bounds should trigger deactivation, but moving the same finger back within an\n * element's bounds should trigger reactivation.\n *\n * In order to use `PressResponder`, do the following:\n *\n *     const pressResponder = new PressResponder(config);\n *\n * 2. Choose the rendered component who should collect the press events. On that\n *    element, spread `pressability.getEventHandlers()` into its props.\n *\n *    return (\n *      <View {...this.state.pressResponder.getEventHandlers()} />\n *    );\n *\n * 3. Reset `PressResponder` when your component unmounts.\n *\n *    componentWillUnmount() {\n *      this.state.pressResponder.reset();\n *    }\n *\n * ==================== Implementation Details ====================\n *\n * `PressResponder` only assumes that there exists a `HitRect` node. The `PressRect`\n * is an abstract box that is extended beyond the `HitRect`.\n *\n * # Geometry\n *\n *  ┌────────────────────────┐\n *  │  ┌──────────────────┐  │ - Presses start anywhere within `HitRect`.\n *  │  │  ┌────────────┐  │  │\n *  │  │  │ VisualRect │  │  │\n *  │  │  └────────────┘  │  │ - When pressed down for sufficient amount of time\n *  │  │    HitRect       │  │   before letting up, `VisualRect` activates.\n *  │  └──────────────────┘  │\n *  │       Out Region   o   │\n *  └────────────────────│───┘\n *                       └────── When the press is released outside the `HitRect`,\n *                               the responder is NOT eligible for a \"press\".\n *\n * # State Machine\n *\n * ┌───────────────┐ ◀──── RESPONDER_RELEASE\n * │ NOT_RESPONDER │\n * └───┬───────────┘ ◀──── RESPONDER_TERMINATED\n *     │\n *     │ RESPONDER_GRANT (HitRect)\n *     │\n *     ▼\n * ┌─────────────────────┐          ┌───────────────────┐              ┌───────────────────┐\n * │ RESPONDER_INACTIVE_ │  DELAY   │ RESPONDER_ACTIVE_ │  T + DELAY   │ RESPONDER_ACTIVE_ │\n * │ PRESS_START         ├────────▶ │ PRESS_START       ├────────────▶ │ LONG_PRESS_START  │\n * └─────────────────────┘          └───────────────────┘              └───────────────────┘\n *\n * T + DELAY => LONG_PRESS_DELAY + DELAY\n *\n * Not drawn are the side effects of each transition. The most important side\n * effect is the invocation of `onLongPress`. Only when the browser produces a\n * `click` event is `onPress` invoked.\n */\n\nvar PressResponder = /*#__PURE__*/function () {\n  function PressResponder(config) {\n    this._eventHandlers = null;\n    this._isPointerTouch = false;\n    this._longPressDelayTimeout = null;\n    this._longPressDispatched = false;\n    this._pressDelayTimeout = null;\n    this._pressOutDelayTimeout = null;\n    this._touchState = NOT_RESPONDER;\n    this.configure(config);\n  }\n\n  var _proto = PressResponder.prototype;\n\n  _proto.configure = function configure(config) {\n    this._config = config;\n  }\n  /**\n   * Resets any pending timers. This should be called on unmount.\n   */\n  ;\n\n  _proto.reset = function reset() {\n    this._cancelLongPressDelayTimeout();\n\n    this._cancelPressDelayTimeout();\n\n    this._cancelPressOutDelayTimeout();\n  }\n  /**\n   * Returns a set of props to spread into the interactive element.\n   */\n  ;\n\n  _proto.getEventHandlers = function getEventHandlers() {\n    if (this._eventHandlers == null) {\n      this._eventHandlers = this._createEventHandlers();\n    }\n\n    return this._eventHandlers;\n  };\n\n  _proto._createEventHandlers = function _createEventHandlers() {\n    var _this = this;\n\n    var start = function start(event, shouldDelay) {\n      event.persist();\n\n      _this._cancelPressOutDelayTimeout();\n\n      _this._longPressDispatched = false;\n      _this._selectionTerminated = false;\n      _this._touchState = NOT_RESPONDER;\n      _this._isPointerTouch = event.nativeEvent.type === 'touchstart';\n\n      _this._receiveSignal(RESPONDER_GRANT, event);\n\n      var delayPressStart = normalizeDelay(_this._config.delayPressStart, 0, DEFAULT_PRESS_DELAY_MS);\n\n      if (shouldDelay !== false && delayPressStart > 0) {\n        _this._pressDelayTimeout = setTimeout(function () {\n          _this._receiveSignal(DELAY, event);\n        }, delayPressStart);\n      } else {\n        _this._receiveSignal(DELAY, event);\n      }\n\n      var delayLongPress = normalizeDelay(_this._config.delayLongPress, 10, DEFAULT_LONG_PRESS_DELAY_MS);\n      _this._longPressDelayTimeout = setTimeout(function () {\n        _this._handleLongPress(event);\n      }, delayLongPress + delayPressStart);\n    };\n\n    var end = function end(event) {\n      _this._receiveSignal(RESPONDER_RELEASE, event);\n    };\n\n    var keyupHandler = function keyupHandler(event) {\n      var onPress = _this._config.onPress;\n      var target = event.target;\n\n      if (_this._touchState !== NOT_RESPONDER && isValidKeyPress(event)) {\n        end(event);\n        document.removeEventListener('keyup', keyupHandler);\n        var role = target.getAttribute('role');\n        var elementType = target.tagName.toLowerCase();\n        var isNativeInteractiveElement = role === 'link' || elementType === 'a' || elementType === 'button' || elementType === 'input' || elementType === 'select' || elementType === 'textarea';\n\n        if (onPress != null && !isNativeInteractiveElement) {\n          onPress(event);\n        }\n      }\n    };\n\n    return {\n      onStartShouldSetResponder: function onStartShouldSetResponder(event) {\n        var disabled = _this._config.disabled;\n\n        if (disabled && isButtonRole(event.currentTarget)) {\n          event.stopPropagation();\n        }\n\n        if (disabled == null) {\n          return true;\n        }\n\n        return !disabled;\n      },\n      onKeyDown: function onKeyDown(event) {\n        var disabled = _this._config.disabled;\n        var key = event.key,\n            target = event.target;\n\n        if (!disabled && isValidKeyPress(event)) {\n          if (_this._touchState === NOT_RESPONDER) {\n            start(event, false); // Listen to 'keyup' on document to account for situations where\n            // focus is moved to another element during 'keydown'.\n\n            document.addEventListener('keyup', keyupHandler);\n          }\n\n          var role = target.getAttribute('role');\n          var isSpacebarKey = key === ' ' || key === 'Spacebar';\n\n          var _isButtonRole = role === 'button' || role === 'menuitem';\n\n          if (isSpacebarKey && _isButtonRole) {\n            // Prevent spacebar scrolling the window\n            event.preventDefault();\n          }\n\n          event.stopPropagation();\n        }\n      },\n      onResponderGrant: function onResponderGrant(event) {\n        return start(event);\n      },\n      onResponderMove: function onResponderMove(event) {\n        if (_this._config.onPressMove != null) {\n          _this._config.onPressMove(event);\n        }\n\n        var touch = getTouchFromResponderEvent(event);\n\n        if (_this._touchActivatePosition != null) {\n          var deltaX = _this._touchActivatePosition.pageX - touch.pageX;\n          var deltaY = _this._touchActivatePosition.pageY - touch.pageY;\n\n          if (Math.hypot(deltaX, deltaY) > 10) {\n            _this._cancelLongPressDelayTimeout();\n          }\n        }\n      },\n      onResponderRelease: function onResponderRelease(event) {\n        return end(event);\n      },\n      onResponderTerminate: function onResponderTerminate(event) {\n        if (event.nativeEvent.type === 'selectionchange') {\n          _this._selectionTerminated = true;\n        }\n\n        _this._receiveSignal(RESPONDER_TERMINATED, event);\n      },\n      onResponderTerminationRequest: function onResponderTerminationRequest(event) {\n        var _this$_config = _this._config,\n            cancelable = _this$_config.cancelable,\n            disabled = _this$_config.disabled,\n            onLongPress = _this$_config.onLongPress; // If `onLongPress` is provided, don't terminate on `contextmenu` as default\n        // behavior will be prevented for non-mouse pointers.\n\n        if (!disabled && onLongPress != null && _this._isPointerTouch && event.nativeEvent.type === 'contextmenu') {\n          return false;\n        }\n\n        if (cancelable == null) {\n          return true;\n        }\n\n        return cancelable;\n      },\n      // NOTE: this diverges from react-native in 3 significant ways:\n      // * The `onPress` callback is not connected to the responder system (the native\n      //  `click` event must be used but is dispatched in many scenarios where no pointers\n      //   are on the screen.) Therefore, it's possible for `onPress` to be called without\n      //   `onPress{Start,End}` being called first.\n      // * The `onPress` callback is only be called on the first ancestor of the native\n      //   `click` target that is using the PressResponder.\n      // * The event's `nativeEvent` is a `MouseEvent` not a `TouchEvent`.\n      onClick: function onClick(event) {\n        var _this$_config2 = _this._config,\n            disabled = _this$_config2.disabled,\n            onPress = _this$_config2.onPress;\n\n        if (!disabled) {\n          // If long press dispatched, cancel default click behavior.\n          // If the responder terminated because text was selected during the gesture,\n          // cancel the default click behavior.\n          event.stopPropagation();\n\n          if (_this._longPressDispatched || _this._selectionTerminated) {\n            event.preventDefault();\n          } else if (onPress != null && event.altKey === false) {\n            onPress(event);\n          }\n        } else {\n          if (isButtonRole(event.currentTarget)) {\n            event.stopPropagation();\n          }\n        }\n      },\n      // If `onLongPress` is provided and a touch pointer is being used, prevent the\n      // default context menu from opening.\n      onContextMenu: function onContextMenu(event) {\n        var _this$_config3 = _this._config,\n            disabled = _this$_config3.disabled,\n            onLongPress = _this$_config3.onLongPress;\n\n        if (!disabled) {\n          if (onLongPress != null && _this._isPointerTouch && !event.defaultPrevented) {\n            event.preventDefault();\n            event.stopPropagation();\n          }\n        } else {\n          if (isButtonRole(event.currentTarget)) {\n            event.stopPropagation();\n          }\n        }\n      }\n    };\n  }\n  /**\n   * Receives a state machine signal, performs side effects of the transition\n   * and stores the new state. Validates the transition as well.\n   */\n  ;\n\n  _proto._receiveSignal = function _receiveSignal(signal, event) {\n    var prevState = this._touchState;\n    var nextState = null;\n\n    if (Transitions[prevState] != null) {\n      nextState = Transitions[prevState][signal];\n    }\n\n    if (this._touchState === NOT_RESPONDER && signal === RESPONDER_RELEASE) {\n      return;\n    }\n\n    if (nextState == null || nextState === ERROR) {\n      console.error(\"PressResponder: Invalid signal \" + signal + \" for state \" + prevState + \" on responder\");\n    } else if (prevState !== nextState) {\n      this._performTransitionSideEffects(prevState, nextState, signal, event);\n\n      this._touchState = nextState;\n    }\n  }\n  /**\n   * Performs a transition between touchable states and identify any activations\n   * or deactivations (and callback invocations).\n   */\n  ;\n\n  _proto._performTransitionSideEffects = function _performTransitionSideEffects(prevState, nextState, signal, event) {\n    if (isTerminalSignal(signal)) {\n      this._isPointerTouch = false;\n      this._touchActivatePosition = null;\n\n      this._cancelLongPressDelayTimeout();\n    }\n\n    if (isPressStartSignal(prevState) && signal === LONG_PRESS_DETECTED) {\n      var onLongPress = this._config.onLongPress; // Long press is not supported for keyboards because 'click' can be dispatched\n      // immediately (and multiple times) after 'keydown'.\n\n      if (onLongPress != null && event.nativeEvent.key == null) {\n        onLongPress(event);\n        this._longPressDispatched = true;\n      }\n    }\n\n    var isPrevActive = isActiveSignal(prevState);\n    var isNextActive = isActiveSignal(nextState);\n\n    if (!isPrevActive && isNextActive) {\n      this._activate(event);\n    } else if (isPrevActive && !isNextActive) {\n      this._deactivate(event);\n    }\n\n    if (isPressStartSignal(prevState) && signal === RESPONDER_RELEASE) {\n      var _this$_config4 = this._config,\n          _onLongPress = _this$_config4.onLongPress,\n          onPress = _this$_config4.onPress;\n\n      if (onPress != null) {\n        var isPressCanceledByLongPress = _onLongPress != null && prevState === RESPONDER_ACTIVE_LONG_PRESS_START;\n\n        if (!isPressCanceledByLongPress) {\n          // If we never activated (due to delays), activate and deactivate now.\n          if (!isNextActive && !isPrevActive) {\n            this._activate(event);\n\n            this._deactivate(event);\n          }\n        }\n      }\n    }\n\n    this._cancelPressDelayTimeout();\n  };\n\n  _proto._activate = function _activate(event) {\n    var _this$_config5 = this._config,\n        onPressChange = _this$_config5.onPressChange,\n        onPressStart = _this$_config5.onPressStart;\n    var touch = getTouchFromResponderEvent(event);\n    this._touchActivatePosition = {\n      pageX: touch.pageX,\n      pageY: touch.pageY\n    };\n\n    if (onPressStart != null) {\n      onPressStart(event);\n    }\n\n    if (onPressChange != null) {\n      onPressChange(true);\n    }\n  };\n\n  _proto._deactivate = function _deactivate(event) {\n    var _this$_config6 = this._config,\n        onPressChange = _this$_config6.onPressChange,\n        onPressEnd = _this$_config6.onPressEnd;\n\n    function end() {\n      if (onPressEnd != null) {\n        onPressEnd(event);\n      }\n\n      if (onPressChange != null) {\n        onPressChange(false);\n      }\n    }\n\n    var delayPressEnd = normalizeDelay(this._config.delayPressEnd);\n\n    if (delayPressEnd > 0) {\n      this._pressOutDelayTimeout = setTimeout(function () {\n        end();\n      }, delayPressEnd);\n    } else {\n      end();\n    }\n  };\n\n  _proto._handleLongPress = function _handleLongPress(event) {\n    if (this._touchState === RESPONDER_ACTIVE_PRESS_START || this._touchState === RESPONDER_ACTIVE_LONG_PRESS_START) {\n      this._receiveSignal(LONG_PRESS_DETECTED, event);\n    }\n  };\n\n  _proto._cancelLongPressDelayTimeout = function _cancelLongPressDelayTimeout() {\n    if (this._longPressDelayTimeout != null) {\n      clearTimeout(this._longPressDelayTimeout);\n      this._longPressDelayTimeout = null;\n    }\n  };\n\n  _proto._cancelPressDelayTimeout = function _cancelPressDelayTimeout() {\n    if (this._pressDelayTimeout != null) {\n      clearTimeout(this._pressDelayTimeout);\n      this._pressDelayTimeout = null;\n    }\n  };\n\n  _proto._cancelPressOutDelayTimeout = function _cancelPressOutDelayTimeout() {\n    if (this._pressOutDelayTimeout != null) {\n      clearTimeout(this._pressOutDelayTimeout);\n      this._pressOutDelayTimeout = null;\n    }\n  };\n\n  return PressResponder;\n}();\n\nexport { PressResponder as default };\n\nfunction normalizeDelay(delay, min, fallback) {\n  if (min === void 0) {\n    min = 0;\n  }\n\n  if (fallback === void 0) {\n    fallback = 0;\n  }\n\n  return Math.max(min, delay !== null && delay !== void 0 ? delay : fallback);\n}\n\nfunction getTouchFromResponderEvent(event) {\n  var _event$nativeEvent = event.nativeEvent,\n      changedTouches = _event$nativeEvent.changedTouches,\n      touches = _event$nativeEvent.touches;\n\n  if (touches != null && touches.length > 0) {\n    return touches[0];\n  }\n\n  if (changedTouches != null && changedTouches.length > 0) {\n    return changedTouches[0];\n  }\n\n  return event.nativeEvent;\n}"]},"metadata":{},"sourceType":"module"}