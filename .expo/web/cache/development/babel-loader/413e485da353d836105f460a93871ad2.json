{"ast":null,"code":"'use strict';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar Info = function Info() {\n  this.any_blank_count = 0;\n  this.any_blank_ms = 0;\n  this.any_blank_speed_sum = 0;\n  this.mostly_blank_count = 0;\n  this.mostly_blank_ms = 0;\n  this.pixels_blank = 0;\n  this.pixels_sampled = 0;\n  this.pixels_scrolled = 0;\n  this.total_time_spent = 0;\n  this.sample_count = 0;\n};\n\n_c = Info;\nvar DEBUG = false;\nvar _listeners = [];\nvar _minSampleCount = 10;\n\nvar _sampleRate = DEBUG ? 1 : null;\n\nvar FillRateHelper = function () {\n  FillRateHelper.addListener = function addListener(callback) {\n    if (_sampleRate === null) {\n      console.warn('Call `FillRateHelper.setSampleRate` before `addListener`.');\n    }\n\n    _listeners.push(callback);\n\n    return {\n      remove: function remove() {\n        _listeners = _listeners.filter(function (listener) {\n          return callback !== listener;\n        });\n      }\n    };\n  };\n\n  FillRateHelper.setSampleRate = function setSampleRate(sampleRate) {\n    _sampleRate = sampleRate;\n  };\n\n  FillRateHelper.setMinSampleCount = function setMinSampleCount(minSampleCount) {\n    _minSampleCount = minSampleCount;\n  };\n\n  function FillRateHelper(getFrameMetrics) {\n    this._anyBlankStartTime = null;\n    this._enabled = false;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n    this._getFrameMetrics = getFrameMetrics;\n    this._enabled = (_sampleRate || 0) > Math.random();\n\n    this._resetData();\n  }\n\n  var _proto = FillRateHelper.prototype;\n\n  _proto.activate = function activate() {\n    if (this._enabled && this._samplesStartTime == null) {\n      DEBUG && console.debug('FillRateHelper: activate');\n      this._samplesStartTime = global.performance.now();\n    }\n  };\n\n  _proto.deactivateAndFlush = function deactivateAndFlush() {\n    if (!this._enabled) {\n      return;\n    }\n\n    var start = this._samplesStartTime;\n\n    if (start == null) {\n      DEBUG && console.debug('FillRateHelper: bail on deactivate with no start time');\n      return;\n    }\n\n    if (this._info.sample_count < _minSampleCount) {\n      this._resetData();\n\n      return;\n    }\n\n    var total_time_spent = global.performance.now() - start;\n\n    var info = _objectSpread(_objectSpread({}, this._info), {}, {\n      total_time_spent: total_time_spent\n    });\n\n    if (DEBUG) {\n      var derived = {\n        avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,\n        avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),\n        avg_speed_when_any_blank: this._info.any_blank_speed_sum / this._info.any_blank_count,\n        any_blank_per_min: this._info.any_blank_count / (total_time_spent / 1000 / 60),\n        any_blank_time_frac: this._info.any_blank_ms / total_time_spent,\n        mostly_blank_per_min: this._info.mostly_blank_count / (total_time_spent / 1000 / 60),\n        mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent\n      };\n\n      for (var key in derived) {\n        derived[key] = Math.round(1000 * derived[key]) / 1000;\n      }\n\n      console.debug('FillRateHelper deactivateAndFlush: ', {\n        derived: derived,\n        info: info\n      });\n    }\n\n    _listeners.forEach(function (listener) {\n      return listener(info);\n    });\n\n    this._resetData();\n  };\n\n  _proto.computeBlankness = function computeBlankness(props, state, scrollMetrics) {\n    if (!this._enabled || props.getItemCount(props.data) === 0 || this._samplesStartTime == null) {\n      return 0;\n    }\n\n    var dOffset = scrollMetrics.dOffset,\n        offset = scrollMetrics.offset,\n        velocity = scrollMetrics.velocity,\n        visibleLength = scrollMetrics.visibleLength;\n    this._info.sample_count++;\n    this._info.pixels_sampled += Math.round(visibleLength);\n    this._info.pixels_scrolled += Math.round(Math.abs(dOffset));\n    var scrollSpeed = Math.round(Math.abs(velocity) * 1000);\n    var now = global.performance.now();\n\n    if (this._anyBlankStartTime != null) {\n      this._info.any_blank_ms += now - this._anyBlankStartTime;\n    }\n\n    this._anyBlankStartTime = null;\n\n    if (this._mostlyBlankStartTime != null) {\n      this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;\n    }\n\n    this._mostlyBlankStartTime = null;\n    var blankTop = 0;\n    var first = state.first;\n\n    var firstFrame = this._getFrameMetrics(first);\n\n    while (first <= state.last && (!firstFrame || !firstFrame.inLayout)) {\n      firstFrame = this._getFrameMetrics(first);\n      first++;\n    }\n\n    if (firstFrame && first > 0) {\n      blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));\n    }\n\n    var blankBottom = 0;\n    var last = state.last;\n\n    var lastFrame = this._getFrameMetrics(last);\n\n    while (last >= state.first && (!lastFrame || !lastFrame.inLayout)) {\n      lastFrame = this._getFrameMetrics(last);\n      last--;\n    }\n\n    if (lastFrame && last < props.getItemCount(props.data) - 1) {\n      var bottomEdge = lastFrame.offset + lastFrame.length;\n      blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));\n    }\n\n    var pixels_blank = Math.round(blankTop + blankBottom);\n    var blankness = pixels_blank / visibleLength;\n\n    if (blankness > 0) {\n      this._anyBlankStartTime = now;\n      this._info.any_blank_speed_sum += scrollSpeed;\n      this._info.any_blank_count++;\n      this._info.pixels_blank += pixels_blank;\n\n      if (blankness > 0.5) {\n        this._mostlyBlankStartTime = now;\n        this._info.mostly_blank_count++;\n      }\n    } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {\n      this.deactivateAndFlush();\n    }\n\n    return blankness;\n  };\n\n  _proto.enabled = function enabled() {\n    return this._enabled;\n  };\n\n  _proto._resetData = function _resetData() {\n    this._anyBlankStartTime = null;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n  };\n\n  return FillRateHelper;\n}();\n\nexport default FillRateHelper;\n\nvar _c;\n\n$RefreshReg$(_c, \"Info\");\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/Users/garethcozens/Documents/repo/cloudratha/react-native-web-nx-demo/node_modules/react-native-web/dist/vendor/react-native/FillRateHelper/index.js"],"names":["keys","Object","symbols","i","arguments","source","ownKeys","_defineProperty","key","value","enumerable","configurable","writable","obj","Info","DEBUG","_listeners","_minSampleCount","_sampleRate","FillRateHelper","console","remove","callback","Math","_proto","global","start","total_time_spent","info","_objectSpread","derived","avg_blankness","avg_speed","avg_speed_when_any_blank","any_blank_per_min","any_blank_time_frac","mostly_blank_per_min","mostly_blank_time_frac","listener","props","dOffset","scrollMetrics","offset","velocity","visibleLength","scrollSpeed","now","blankTop","first","state","firstFrame","blankBottom","last","lastFrame","bottomEdge","pixels_blank","blankness"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar Info = function Info() {\n  this.any_blank_count = 0;\n  this.any_blank_ms = 0;\n  this.any_blank_speed_sum = 0;\n  this.mostly_blank_count = 0;\n  this.mostly_blank_ms = 0;\n  this.pixels_blank = 0;\n  this.pixels_sampled = 0;\n  this.pixels_scrolled = 0;\n  this.total_time_spent = 0;\n  this.sample_count = 0;\n};\n\nvar DEBUG = false;\nvar _listeners = [];\nvar _minSampleCount = 10;\n\nvar _sampleRate = DEBUG ? 1 : null;\n/**\n * A helper class for detecting when the maximem fill rate of `VirtualizedList` is exceeded.\n * By default the sampling rate is set to zero and this will do nothing. If you want to collect\n * samples (e.g. to log them), make sure to call `FillRateHelper.setSampleRate(0.0-1.0)`.\n *\n * Listeners and sample rate are global for all `VirtualizedList`s - typical usage will combine with\n * `SceneTracker.getActiveScene` to determine the context of the events.\n */\n\n\nvar FillRateHelper = /*#__PURE__*/function () {\n  FillRateHelper.addListener = function addListener(callback) {\n    if (_sampleRate === null) {\n      console.warn('Call `FillRateHelper.setSampleRate` before `addListener`.');\n    }\n\n    _listeners.push(callback);\n\n    return {\n      remove: function remove() {\n        _listeners = _listeners.filter(function (listener) {\n          return callback !== listener;\n        });\n      }\n    };\n  };\n\n  FillRateHelper.setSampleRate = function setSampleRate(sampleRate) {\n    _sampleRate = sampleRate;\n  };\n\n  FillRateHelper.setMinSampleCount = function setMinSampleCount(minSampleCount) {\n    _minSampleCount = minSampleCount;\n  };\n\n  function FillRateHelper(getFrameMetrics) {\n    this._anyBlankStartTime = null;\n    this._enabled = false;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n    this._getFrameMetrics = getFrameMetrics;\n    this._enabled = (_sampleRate || 0) > Math.random();\n\n    this._resetData();\n  }\n\n  var _proto = FillRateHelper.prototype;\n\n  _proto.activate = function activate() {\n    if (this._enabled && this._samplesStartTime == null) {\n      DEBUG && console.debug('FillRateHelper: activate');\n      this._samplesStartTime = global.performance.now();\n    }\n  };\n\n  _proto.deactivateAndFlush = function deactivateAndFlush() {\n    if (!this._enabled) {\n      return;\n    }\n\n    var start = this._samplesStartTime; // const for flow\n\n    if (start == null) {\n      DEBUG && console.debug('FillRateHelper: bail on deactivate with no start time');\n      return;\n    }\n\n    if (this._info.sample_count < _minSampleCount) {\n      // Don't bother with under-sampled events.\n      this._resetData();\n\n      return;\n    }\n\n    var total_time_spent = global.performance.now() - start;\n\n    var info = _objectSpread(_objectSpread({}, this._info), {}, {\n      total_time_spent: total_time_spent\n    });\n\n    if (DEBUG) {\n      var derived = {\n        avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,\n        avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),\n        avg_speed_when_any_blank: this._info.any_blank_speed_sum / this._info.any_blank_count,\n        any_blank_per_min: this._info.any_blank_count / (total_time_spent / 1000 / 60),\n        any_blank_time_frac: this._info.any_blank_ms / total_time_spent,\n        mostly_blank_per_min: this._info.mostly_blank_count / (total_time_spent / 1000 / 60),\n        mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent\n      };\n\n      for (var key in derived) {\n        derived[key] = Math.round(1000 * derived[key]) / 1000;\n      }\n\n      console.debug('FillRateHelper deactivateAndFlush: ', {\n        derived: derived,\n        info: info\n      });\n    }\n\n    _listeners.forEach(function (listener) {\n      return listener(info);\n    });\n\n    this._resetData();\n  };\n\n  _proto.computeBlankness = function computeBlankness(props, state, scrollMetrics) {\n    if (!this._enabled || props.getItemCount(props.data) === 0 || this._samplesStartTime == null) {\n      return 0;\n    }\n\n    var dOffset = scrollMetrics.dOffset,\n        offset = scrollMetrics.offset,\n        velocity = scrollMetrics.velocity,\n        visibleLength = scrollMetrics.visibleLength; // Denominator metrics that we track for all events - most of the time there is no blankness and\n    // we want to capture that.\n\n    this._info.sample_count++;\n    this._info.pixels_sampled += Math.round(visibleLength);\n    this._info.pixels_scrolled += Math.round(Math.abs(dOffset));\n    var scrollSpeed = Math.round(Math.abs(velocity) * 1000); // px / sec\n    // Whether blank now or not, record the elapsed time blank if we were blank last time.\n\n    var now = global.performance.now();\n\n    if (this._anyBlankStartTime != null) {\n      this._info.any_blank_ms += now - this._anyBlankStartTime;\n    }\n\n    this._anyBlankStartTime = null;\n\n    if (this._mostlyBlankStartTime != null) {\n      this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;\n    }\n\n    this._mostlyBlankStartTime = null;\n    var blankTop = 0;\n    var first = state.first;\n\n    var firstFrame = this._getFrameMetrics(first);\n\n    while (first <= state.last && (!firstFrame || !firstFrame.inLayout)) {\n      firstFrame = this._getFrameMetrics(first);\n      first++;\n    } // Only count blankTop if we aren't rendering the first item, otherwise we will count the header\n    // as blank.\n\n\n    if (firstFrame && first > 0) {\n      blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));\n    }\n\n    var blankBottom = 0;\n    var last = state.last;\n\n    var lastFrame = this._getFrameMetrics(last);\n\n    while (last >= state.first && (!lastFrame || !lastFrame.inLayout)) {\n      lastFrame = this._getFrameMetrics(last);\n      last--;\n    } // Only count blankBottom if we aren't rendering the last item, otherwise we will count the\n    // footer as blank.\n\n\n    if (lastFrame && last < props.getItemCount(props.data) - 1) {\n      var bottomEdge = lastFrame.offset + lastFrame.length;\n      blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));\n    }\n\n    var pixels_blank = Math.round(blankTop + blankBottom);\n    var blankness = pixels_blank / visibleLength;\n\n    if (blankness > 0) {\n      this._anyBlankStartTime = now;\n      this._info.any_blank_speed_sum += scrollSpeed;\n      this._info.any_blank_count++;\n      this._info.pixels_blank += pixels_blank;\n\n      if (blankness > 0.5) {\n        this._mostlyBlankStartTime = now;\n        this._info.mostly_blank_count++;\n      }\n    } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {\n      this.deactivateAndFlush();\n    }\n\n    return blankness;\n  };\n\n  _proto.enabled = function enabled() {\n    return this._enabled;\n  };\n\n  _proto._resetData = function _resetData() {\n    this._anyBlankStartTime = null;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n  };\n\n  return FillRateHelper;\n}();\n\nexport default FillRateHelper;"]},"metadata":{},"sourceType":"module"}