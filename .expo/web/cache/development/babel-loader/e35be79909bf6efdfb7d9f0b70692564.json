{"ast":null,"code":"'use strict';\n\nimport InteractionManager from \"../../../exports/InteractionManager\";\n\nvar Batchinator = function () {\n  function Batchinator(callback, delayMS) {\n    this._delay = delayMS;\n    this._callback = callback;\n  }\n\n  var _proto = Batchinator.prototype;\n\n  _proto.dispose = function dispose(options) {\n    if (options === void 0) {\n      options = {\n        abort: false\n      };\n    }\n\n    if (this._taskHandle) {\n      this._taskHandle.cancel();\n\n      if (!options.abort) {\n        this._callback();\n      }\n\n      this._taskHandle = null;\n    }\n  };\n\n  _proto.schedule = function schedule() {\n    var _this = this;\n\n    if (this._taskHandle) {\n      return;\n    }\n\n    var timeoutHandle = setTimeout(function () {\n      _this._taskHandle = InteractionManager.runAfterInteractions(function () {\n        _this._taskHandle = null;\n\n        _this._callback();\n      });\n    }, this._delay);\n    this._taskHandle = {\n      cancel: function cancel() {\n        return clearTimeout(timeoutHandle);\n      }\n    };\n  };\n\n  return Batchinator;\n}();\n\nexport default Batchinator;","map":{"version":3,"sources":["/Users/garethcozens/Documents/repo/cloudratha/react-native-web-nx-demo/node_modules/react-native-web/dist/vendor/react-native/Batchinator/index.js"],"names":["Batchinator","_proto","options","abort","_this","timeoutHandle","setTimeout","InteractionManager","cancel","clearTimeout"],"mappings":"AASA;;AAEA,OAAA,kBAAA;;AAwBA,IAAIA,WAAW,GAAgB,YAAY;AACzC,WAAA,WAAA,CAAA,QAAA,EAAA,OAAA,EAAwC;AACtC,SAAA,MAAA,GAAA,OAAA;AACA,SAAA,SAAA,GAAA,QAAA;AAUF;;AAAA,MAAIC,MAAM,GAAGD,WAAW,CAAxB,SAAA;;AAEAC,EAAAA,MAAM,CAANA,OAAAA,GAAiB,SAAA,OAAA,CAAA,OAAA,EAA0B;AACzC,QAAIC,OAAO,KAAK,KAAhB,CAAA,EAAwB;AACtBA,MAAAA,OAAO,GAAG;AACRC,QAAAA,KAAK,EADPD;AAAU,OAAVA;AAKF;;AAAA,QAAI,KAAJ,WAAA,EAAsB;AACpB,WAAA,WAAA,CAAA,MAAA;;AAEA,UAAI,CAACA,OAAO,CAAZ,KAAA,EAAoB;AAClB,aAAA,SAAA;AAGF;;AAAA,WAAA,WAAA,GAAA,IAAA;AAEH;AAhBDD,GAAAA;;AAkBAA,EAAAA,MAAM,CAANA,QAAAA,GAAkB,SAAA,QAAA,GAAoB;AACpC,QAAIG,KAAK,GAAT,IAAA;;AAEA,QAAI,KAAJ,WAAA,EAAsB;AACpB;AAGF;;AAAA,QAAIC,aAAa,GAAGC,UAAU,CAAC,YAAY;AACzCF,MAAAA,KAAK,CAALA,WAAAA,GAAoBG,kBAAkB,CAAlBA,oBAAAA,CAAwC,YAAY;AAGtEH,QAAAA,KAAK,CAALA,WAAAA,GAAAA,IAAAA;;AAEAA,QAAAA,KAAK,CAALA,SAAAA;AALFA,OAAoBG,CAApBH;AAD4B,KAAA,EAQ3B,KARH,MAA8B,CAA9B;AASA,SAAA,WAAA,GAAmB;AACjBI,MAAAA,MAAM,EAAE,SAAA,MAAA,GAAkB;AACxB,eAAOC,YAAY,CAAnB,aAAmB,CAAnB;AAFJ;AAAmB,KAAnB;AAhBFR,GAAAA;;AAuBA,SAAA,WAAA;AAxDF,CAA+B,EAA/B;;AA2DA,eAAA,WAAA","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport InteractionManager from '../../../exports/InteractionManager';\n/**\n * A simple class for batching up invocations of a low-pri callback. A timeout is set to run the\n * callback once after a delay, no matter how many times it's scheduled. Once the delay is reached,\n * InteractionManager.runAfterInteractions is used to invoke the callback after any hi-pri\n * interactions are done running.\n *\n * Make sure to cleanup with dispose().  Example:\n *\n *   class Widget extends React.Component {\n *     _batchedSave: new Batchinator(() => this._saveState, 1000);\n *     _saveSate() {\n *       // save this.state to disk\n *     }\n *     componentDidUpdate() {\n *       this._batchedSave.schedule();\n *     }\n *     componentWillUnmount() {\n *       this._batchedSave.dispose();\n *     }\n *     ...\n *   }\n */\n\nvar Batchinator = /*#__PURE__*/function () {\n  function Batchinator(callback, delayMS) {\n    this._delay = delayMS;\n    this._callback = callback;\n  }\n  /*\n   * Cleanup any pending tasks.\n   *\n   * By default, if there is a pending task the callback is run immediately. Set the option abort to\n   * true to not call the callback if it was pending.\n   */\n\n\n  var _proto = Batchinator.prototype;\n\n  _proto.dispose = function dispose(options) {\n    if (options === void 0) {\n      options = {\n        abort: false\n      };\n    }\n\n    if (this._taskHandle) {\n      this._taskHandle.cancel();\n\n      if (!options.abort) {\n        this._callback();\n      }\n\n      this._taskHandle = null;\n    }\n  };\n\n  _proto.schedule = function schedule() {\n    var _this = this;\n\n    if (this._taskHandle) {\n      return;\n    }\n\n    var timeoutHandle = setTimeout(function () {\n      _this._taskHandle = InteractionManager.runAfterInteractions(function () {\n        // Note that we clear the handle before invoking the callback so that if the callback calls\n        // schedule again, it will actually schedule another task.\n        _this._taskHandle = null;\n\n        _this._callback();\n      });\n    }, this._delay);\n    this._taskHandle = {\n      cancel: function cancel() {\n        return clearTimeout(timeoutHandle);\n      }\n    };\n  };\n\n  return Batchinator;\n}();\n\nexport default Batchinator;"]},"metadata":{},"sourceType":"module"}