{"ast":null,"code":"import invariant from 'fbjs/lib/invariant';\nimport requestIdleCallback, { cancelIdleCallback } from \"../../modules/requestIdleCallback\";\nvar InteractionManager = {\n  Events: {\n    interactionStart: 'interactionStart',\n    interactionComplete: 'interactionComplete'\n  },\n  runAfterInteractions: function runAfterInteractions(task) {\n    var handle;\n    var promise = new Promise(function (resolve) {\n      handle = requestIdleCallback(function () {\n        if (task) {\n          resolve(task());\n        } else {\n          resolve();\n        }\n      });\n    });\n    return {\n      then: promise.then.bind(promise),\n      done: promise.then.bind(promise),\n      cancel: function cancel() {\n        cancelIdleCallback(handle);\n      }\n    };\n  },\n  createInteractionHandle: function createInteractionHandle() {\n    return 1;\n  },\n  clearInteractionHandle: function clearInteractionHandle(handle) {\n    invariant(!!handle, 'Must provide a handle to clear.');\n  },\n  addListener: function addListener() {}\n};\nexport default InteractionManager;\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/Users/garethcozens/Documents/repo/cloudratha/react-native-web-nx-demo/node_modules/react-native-web/dist/exports/InteractionManager/index.js"],"names":["InteractionManager","Events","interactionStart","interactionComplete","runAfterInteractions","promise","handle","requestIdleCallback","resolve","task","then","done","cancel","cancelIdleCallback","createInteractionHandle","clearInteractionHandle","invariant","addListener"],"mappings":"AASA,OAAA,SAAA,MAAA,oBAAA;AACA,OAAA,mBAAA,IAAA,kBAAA;AACA,IAAIA,kBAAkB,GAAG;AACvBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,gBAAgB,EADV,kBAAA;AAENC,IAAAA,mBAAmB,EAHE;AACf,GADe;AASvBC,EAAAA,oBAAoB,EAAE,SAAA,oBAAA,CAAA,IAAA,EAAoC;AACxD,QAAA,MAAA;AACA,QAAIC,OAAO,GAAG,IAAA,OAAA,CAAY,UAAA,OAAA,EAAmB;AAC3CC,MAAAA,MAAM,GAAGC,mBAAmB,CAAC,YAAY;AACvC,YAAA,IAAA,EAAU;AACRC,UAAAA,OAAO,CAACC,IAARD,EAAO,CAAPA;AADF,SAAA,MAEO;AACLA,UAAAA,OAAO;AAEV;AANDF,OAA4B,CAA5BA;AADF,KAAc,CAAd;AASA,WAAO;AACLI,MAAAA,IAAI,EAAEL,OAAO,CAAPA,IAAAA,CAAAA,IAAAA,CADD,OACCA,CADD;AAELM,MAAAA,IAAI,EAAEN,OAAO,CAAPA,IAAAA,CAAAA,IAAAA,CAFD,OAECA,CAFD;AAGLO,MAAAA,MAAM,EAAE,SAAA,MAAA,GAAkB;AACxBC,QAAAA,kBAAkB,CAAlBA,MAAkB,CAAlBA;AAJJ;AAAO,KAAP;AApBqB,GAAA;AAgCvBC,EAAAA,uBAAuB,EAAE,SAAA,uBAAA,GAAmC;AAC1D,WAAA,CAAA;AAjCqB,GAAA;AAuCvBC,EAAAA,sBAAsB,EAAE,SAAA,sBAAA,CAAA,MAAA,EAAwC;AAC9DC,IAAAA,SAAS,CAAC,CAAC,CAAF,MAAA,EAATA,iCAAS,CAATA;AAxCqB,GAAA;AA0CvBC,EAAAA,WAAW,EAAE,SAAA,WAAA,GAAuB,CA1CtC;AAAyB,CAAzB;AA4CA,eAAA,kBAAA","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport invariant from 'fbjs/lib/invariant';\nimport requestIdleCallback, { cancelIdleCallback } from '../../modules/requestIdleCallback';\nvar InteractionManager = {\n  Events: {\n    interactionStart: 'interactionStart',\n    interactionComplete: 'interactionComplete'\n  },\n\n  /**\n   * Schedule a function to run after all interactions have completed.\n   */\n  runAfterInteractions: function runAfterInteractions(task) {\n    var handle;\n    var promise = new Promise(function (resolve) {\n      handle = requestIdleCallback(function () {\n        if (task) {\n          resolve(task());\n        } else {\n          resolve();\n        }\n      });\n    });\n    return {\n      then: promise.then.bind(promise),\n      done: promise.then.bind(promise),\n      cancel: function cancel() {\n        cancelIdleCallback(handle);\n      }\n    };\n  },\n\n  /**\n   * Notify manager that an interaction has started.\n   */\n  createInteractionHandle: function createInteractionHandle() {\n    return 1;\n  },\n\n  /**\n   * Notify manager that an interaction has completed.\n   */\n  clearInteractionHandle: function clearInteractionHandle(handle) {\n    invariant(!!handle, 'Must provide a handle to clear.');\n  },\n  addListener: function addListener() {}\n};\nexport default InteractionManager;"]},"metadata":{},"sourceType":"module"}