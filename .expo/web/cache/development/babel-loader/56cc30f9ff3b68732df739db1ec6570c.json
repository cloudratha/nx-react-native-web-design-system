{"ast":null,"code":"import Dimensions from \"../Dimensions\";\n\nvar PixelRatio = function () {\n  function PixelRatio() {}\n\n  PixelRatio.get = function get() {\n    return Dimensions.get('window').scale;\n  };\n\n  PixelRatio.getFontScale = function getFontScale() {\n    return Dimensions.get('window').fontScale || PixelRatio.get();\n  };\n\n  PixelRatio.getPixelSizeForLayoutSize = function getPixelSizeForLayoutSize(layoutSize) {\n    return Math.round(layoutSize * PixelRatio.get());\n  };\n\n  PixelRatio.roundToNearestPixel = function roundToNearestPixel(layoutSize) {\n    var ratio = PixelRatio.get();\n    return Math.round(layoutSize * ratio) / ratio;\n  };\n\n  return PixelRatio;\n}();\n\nexport { PixelRatio as default };\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/Users/garethcozens/Documents/repo/cloudratha/react-native-web-nx-demo/node_modules/react-native-web/dist/exports/PixelRatio/index.js"],"names":["PixelRatio","Dimensions","Math","layoutSize","ratio"],"mappings":"AASA,OAAA,UAAA;;AAKA,IAAIA,UAAU,GAAgB,YAAY;AACxC,WAAA,UAAA,GAAsB,CAKtBA;;AAAAA,EAAAA,UAAU,CAAVA,GAAAA,GAAiB,SAAA,GAAA,GAAe;AAC9B,WAAOC,UAAU,CAAVA,GAAAA,CAAAA,QAAAA,EAAP,KAAA;AADFD,GAAAA;;AAQAA,EAAAA,UAAU,CAAVA,YAAAA,GAA0B,SAAA,YAAA,GAAwB;AAChD,WAAOC,UAAU,CAAVA,GAAAA,CAAAA,QAAAA,EAAAA,SAAAA,IAAsCD,UAAU,CAAvD,GAA6CA,EAA7C;AADFA,GAAAA;;AASAA,EAAAA,UAAU,CAAVA,yBAAAA,GAAuC,SAAA,yBAAA,CAAA,UAAA,EAA+C;AACpF,WAAOE,IAAI,CAAJA,KAAAA,CAAWC,UAAU,GAAGH,UAAU,CAAzC,GAA+BA,EAAxBE,CAAP;AADFF,GAAAA;;AAWAA,EAAAA,UAAU,CAAVA,mBAAAA,GAAiC,SAAA,mBAAA,CAAA,UAAA,EAAyC;AACxE,QAAII,KAAK,GAAGJ,UAAU,CAAtB,GAAYA,EAAZ;AACA,WAAOE,IAAI,CAAJA,KAAAA,CAAWC,UAAU,GAArBD,KAAAA,IAAP,KAAA;AAFFF,GAAAA;;AAKA,SAAA,UAAA;AAvCF,CAA8B,EAA9B;;AA0CA,SAASA,UAAU,IAAnB,OAAA","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport Dimensions from '../Dimensions';\n/**\n * PixelRatio gives access to the device pixel density.\n */\n\nvar PixelRatio = /*#__PURE__*/function () {\n  function PixelRatio() {}\n\n  /**\n   * Returns the device pixel density.\n   */\n  PixelRatio.get = function get() {\n    return Dimensions.get('window').scale;\n  }\n  /**\n   * No equivalent for Web\n   */\n  ;\n\n  PixelRatio.getFontScale = function getFontScale() {\n    return Dimensions.get('window').fontScale || PixelRatio.get();\n  }\n  /**\n   * Converts a layout size (dp) to pixel size (px).\n   * Guaranteed to return an integer number.\n   */\n  ;\n\n  PixelRatio.getPixelSizeForLayoutSize = function getPixelSizeForLayoutSize(layoutSize) {\n    return Math.round(layoutSize * PixelRatio.get());\n  }\n  /**\n   * Rounds a layout size (dp) to the nearest layout size that corresponds to\n   * an integer number of pixels. For example, on a device with a PixelRatio\n   * of 3, `PixelRatio.roundToNearestPixel(8.4) = 8.33`, which corresponds to\n   * exactly (8.33 * 3) = 25 pixels.\n   */\n  ;\n\n  PixelRatio.roundToNearestPixel = function roundToNearestPixel(layoutSize) {\n    var ratio = PixelRatio.get();\n    return Math.round(layoutSize * ratio) / ratio;\n  };\n\n  return PixelRatio;\n}();\n\nexport { PixelRatio as default };"]},"metadata":{},"sourceType":"module"}