{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport AccessibilityUtil from \"../AccessibilityUtil\";\nimport css from \"../../exports/StyleSheet/css\";\nimport StyleSheet from \"../../exports/StyleSheet\";\nimport styleResolver from \"../../exports/StyleSheet/styleResolver\";\nimport { STYLE_GROUPS } from \"../../exports/StyleSheet/constants\";\nvar emptyObject = {};\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\nvar uppercasePattern = /[A-Z]/g;\n\nfunction toHyphenLower(match) {\n  return '-' + match.toLowerCase();\n}\n\nfunction hyphenateString(str) {\n  return str.replace(uppercasePattern, toHyphenLower);\n}\n\nfunction processIDRefList(idRefList) {\n  return isArray(idRefList) ? idRefList.join(' ') : idRefList;\n}\n\nvar classes = css.create({\n  reset: {\n    backgroundColor: 'transparent',\n    color: 'inherit',\n    font: 'inherit',\n    listStyle: 'none',\n    margin: 0,\n    textAlign: 'inherit',\n    textDecoration: 'none'\n  },\n  cursor: {\n    cursor: 'pointer'\n  }\n}, STYLE_GROUPS.classicReset);\nvar pointerEventsStyles = StyleSheet.create({\n  auto: {\n    pointerEvents: 'auto'\n  },\n  'box-none': {\n    pointerEvents: 'box-none'\n  },\n  'box-only': {\n    pointerEvents: 'box-only'\n  },\n  none: {\n    pointerEvents: 'none'\n  }\n});\n\nvar createDOMProps = function createDOMProps(elementType, props) {\n  if (!props) {\n    props = emptyObject;\n  }\n\n  var _props = props,\n      accessibilityActiveDescendant = _props.accessibilityActiveDescendant,\n      accessibilityAtomic = _props.accessibilityAtomic,\n      accessibilityAutoComplete = _props.accessibilityAutoComplete,\n      accessibilityBusy = _props.accessibilityBusy,\n      accessibilityChecked = _props.accessibilityChecked,\n      accessibilityColumnCount = _props.accessibilityColumnCount,\n      accessibilityColumnIndex = _props.accessibilityColumnIndex,\n      accessibilityColumnSpan = _props.accessibilityColumnSpan,\n      accessibilityControls = _props.accessibilityControls,\n      accessibilityCurrent = _props.accessibilityCurrent,\n      accessibilityDescribedBy = _props.accessibilityDescribedBy,\n      accessibilityDetails = _props.accessibilityDetails,\n      accessibilityDisabled = _props.accessibilityDisabled,\n      accessibilityErrorMessage = _props.accessibilityErrorMessage,\n      accessibilityExpanded = _props.accessibilityExpanded,\n      accessibilityFlowTo = _props.accessibilityFlowTo,\n      accessibilityHasPopup = _props.accessibilityHasPopup,\n      accessibilityHidden = _props.accessibilityHidden,\n      accessibilityInvalid = _props.accessibilityInvalid,\n      accessibilityKeyShortcuts = _props.accessibilityKeyShortcuts,\n      accessibilityLabel = _props.accessibilityLabel,\n      accessibilityLabelledBy = _props.accessibilityLabelledBy,\n      accessibilityLevel = _props.accessibilityLevel,\n      accessibilityLiveRegion = _props.accessibilityLiveRegion,\n      accessibilityModal = _props.accessibilityModal,\n      accessibilityMultiline = _props.accessibilityMultiline,\n      accessibilityMultiSelectable = _props.accessibilityMultiSelectable,\n      accessibilityOrientation = _props.accessibilityOrientation,\n      accessibilityOwns = _props.accessibilityOwns,\n      accessibilityPlaceholder = _props.accessibilityPlaceholder,\n      accessibilityPosInSet = _props.accessibilityPosInSet,\n      accessibilityPressed = _props.accessibilityPressed,\n      accessibilityReadOnly = _props.accessibilityReadOnly,\n      accessibilityRequired = _props.accessibilityRequired,\n      accessibilityRole = _props.accessibilityRole,\n      accessibilityRoleDescription = _props.accessibilityRoleDescription,\n      accessibilityRowCount = _props.accessibilityRowCount,\n      accessibilityRowIndex = _props.accessibilityRowIndex,\n      accessibilityRowSpan = _props.accessibilityRowSpan,\n      accessibilitySelected = _props.accessibilitySelected,\n      accessibilitySetSize = _props.accessibilitySetSize,\n      accessibilitySort = _props.accessibilitySort,\n      accessibilityValueMax = _props.accessibilityValueMax,\n      accessibilityValueMin = _props.accessibilityValueMin,\n      accessibilityValueNow = _props.accessibilityValueNow,\n      accessibilityValueText = _props.accessibilityValueText,\n      classList = _props.classList,\n      dataSet = _props.dataSet,\n      focusable = _props.focusable,\n      nativeID = _props.nativeID,\n      pointerEvents = _props.pointerEvents,\n      providedStyle = _props.style,\n      testID = _props.testID,\n      accessible = _props.accessible,\n      accessibilityState = _props.accessibilityState,\n      accessibilityValue = _props.accessibilityValue,\n      domProps = _objectWithoutPropertiesLoose(_props, [\"accessibilityActiveDescendant\", \"accessibilityAtomic\", \"accessibilityAutoComplete\", \"accessibilityBusy\", \"accessibilityChecked\", \"accessibilityColumnCount\", \"accessibilityColumnIndex\", \"accessibilityColumnSpan\", \"accessibilityControls\", \"accessibilityCurrent\", \"accessibilityDescribedBy\", \"accessibilityDetails\", \"accessibilityDisabled\", \"accessibilityErrorMessage\", \"accessibilityExpanded\", \"accessibilityFlowTo\", \"accessibilityHasPopup\", \"accessibilityHidden\", \"accessibilityInvalid\", \"accessibilityKeyShortcuts\", \"accessibilityLabel\", \"accessibilityLabelledBy\", \"accessibilityLevel\", \"accessibilityLiveRegion\", \"accessibilityModal\", \"accessibilityMultiline\", \"accessibilityMultiSelectable\", \"accessibilityOrientation\", \"accessibilityOwns\", \"accessibilityPlaceholder\", \"accessibilityPosInSet\", \"accessibilityPressed\", \"accessibilityReadOnly\", \"accessibilityRequired\", \"accessibilityRole\", \"accessibilityRoleDescription\", \"accessibilityRowCount\", \"accessibilityRowIndex\", \"accessibilityRowSpan\", \"accessibilitySelected\", \"accessibilitySetSize\", \"accessibilitySort\", \"accessibilityValueMax\", \"accessibilityValueMin\", \"accessibilityValueNow\", \"accessibilityValueText\", \"classList\", \"dataSet\", \"focusable\", \"nativeID\", \"pointerEvents\", \"style\", \"testID\", \"accessible\", \"accessibilityState\", \"accessibilityValue\"]);\n\n  var disabled = accessibilityState != null && accessibilityState.disabled === true || accessibilityDisabled;\n  var role = AccessibilityUtil.propsToAriaRole(props);\n\n  if (accessibilityState != null) {\n    for (var prop in accessibilityState) {\n      var value = accessibilityState[prop];\n\n      if (value != null) {\n        if (prop === 'disabled' || prop === 'hidden') {\n          if (value === true) {\n            domProps[\"aria-\" + prop] = value;\n            domProps[prop] = value;\n          }\n        } else {\n          domProps[\"aria-\" + prop] = value;\n        }\n      }\n    }\n  }\n\n  if (accessibilityValue != null) {\n    for (var _prop in accessibilityValue) {\n      var _value = accessibilityValue[_prop];\n\n      if (_value != null) {\n        domProps[\"aria-value\" + _prop] = _value;\n      }\n    }\n  }\n\n  if (accessibilityActiveDescendant != null) {\n    domProps['aria-activedescendant'] = accessibilityActiveDescendant;\n  }\n\n  if (accessibilityAtomic != null) {\n    domProps['aria-atomic'] = accessibilityAtomic;\n  }\n\n  if (accessibilityAutoComplete != null) {\n    domProps['aria-autocomplete'] = accessibilityAutoComplete;\n  }\n\n  if (accessibilityBusy != null) {\n    domProps['aria-busy'] = accessibilityBusy;\n  }\n\n  if (accessibilityChecked != null) {\n    domProps['aria-checked'] = accessibilityChecked;\n  }\n\n  if (accessibilityColumnCount != null) {\n    domProps['aria-colcount'] = accessibilityColumnCount;\n  }\n\n  if (accessibilityColumnIndex != null) {\n    domProps['aria-colindex'] = accessibilityColumnIndex;\n  }\n\n  if (accessibilityColumnSpan != null) {\n    domProps['aria-colspan'] = accessibilityColumnSpan;\n  }\n\n  if (accessibilityControls != null) {\n    domProps['aria-controls'] = processIDRefList(accessibilityControls);\n  }\n\n  if (accessibilityCurrent != null) {\n    domProps['aria-current'] = accessibilityCurrent;\n  }\n\n  if (accessibilityDescribedBy != null) {\n    domProps['aria-describedby'] = processIDRefList(accessibilityDescribedBy);\n  }\n\n  if (accessibilityDetails != null) {\n    domProps['aria-details'] = accessibilityDetails;\n  }\n\n  if (disabled === true) {\n    domProps['aria-disabled'] = true;\n\n    if (elementType === 'button' || elementType === 'form' || elementType === 'input' || elementType === 'select' || elementType === 'textarea') {\n      domProps.disabled = true;\n    }\n  }\n\n  if (accessibilityErrorMessage != null) {\n    domProps['aria-errormessage'] = accessibilityErrorMessage;\n  }\n\n  if (accessibilityExpanded != null) {\n    domProps['aria-expanded'] = accessibilityExpanded;\n  }\n\n  if (accessibilityFlowTo != null) {\n    domProps['aria-flowto'] = processIDRefList(accessibilityFlowTo);\n  }\n\n  if (accessibilityHasPopup != null) {\n    domProps['aria-haspopup'] = accessibilityHasPopup;\n  }\n\n  if (accessibilityHidden === true) {\n    domProps['aria-hidden'] = accessibilityHidden;\n  }\n\n  if (accessibilityInvalid != null) {\n    domProps['aria-invalid'] = accessibilityInvalid;\n  }\n\n  if (accessibilityKeyShortcuts != null && Array.isArray(accessibilityKeyShortcuts)) {\n    domProps['aria-keyshortcuts'] = accessibilityKeyShortcuts.join(' ');\n  }\n\n  if (accessibilityLabel != null) {\n    domProps['aria-label'] = accessibilityLabel;\n  }\n\n  if (accessibilityLabelledBy != null) {\n    domProps['aria-labelledby'] = processIDRefList(accessibilityLabelledBy);\n  }\n\n  if (accessibilityLevel != null) {\n    domProps['aria-level'] = accessibilityLevel;\n  }\n\n  if (accessibilityLiveRegion != null) {\n    domProps['aria-live'] = accessibilityLiveRegion === 'none' ? 'off' : accessibilityLiveRegion;\n  }\n\n  if (accessibilityModal != null) {\n    domProps['aria-modal'] = accessibilityModal;\n  }\n\n  if (accessibilityMultiline != null) {\n    domProps['aria-multiline'] = accessibilityMultiline;\n  }\n\n  if (accessibilityMultiSelectable != null) {\n    domProps['aria-multiselectable'] = accessibilityMultiSelectable;\n  }\n\n  if (accessibilityOrientation != null) {\n    domProps['aria-orientation'] = accessibilityOrientation;\n  }\n\n  if (accessibilityOwns != null) {\n    domProps['aria-owns'] = processIDRefList(accessibilityOwns);\n  }\n\n  if (accessibilityPlaceholder != null) {\n    domProps['aria-placeholder'] = accessibilityPlaceholder;\n  }\n\n  if (accessibilityPosInSet != null) {\n    domProps['aria-posinset'] = accessibilityPosInSet;\n  }\n\n  if (accessibilityPressed != null) {\n    domProps['aria-pressed'] = accessibilityPressed;\n  }\n\n  if (accessibilityReadOnly != null) {\n    domProps['aria-readonly'] = accessibilityReadOnly;\n\n    if (elementType === 'input' || elementType === 'select' || elementType === 'textarea') {\n      domProps.readOnly = true;\n    }\n  }\n\n  if (accessibilityRequired != null) {\n    domProps['aria-required'] = accessibilityRequired;\n\n    if (elementType === 'input' || elementType === 'select' || elementType === 'textarea') {\n      domProps.required = true;\n    }\n  }\n\n  if (role != null) {\n    domProps['role'] = role === 'none' ? 'presentation' : role;\n  }\n\n  if (accessibilityRoleDescription != null) {\n    domProps['aria-roledescription'] = accessibilityRoleDescription;\n  }\n\n  if (accessibilityRowCount != null) {\n    domProps['aria-rowcount'] = accessibilityRowCount;\n  }\n\n  if (accessibilityRowIndex != null) {\n    domProps['aria-rowindex'] = accessibilityRowIndex;\n  }\n\n  if (accessibilityRowSpan != null) {\n    domProps['aria-rowspan'] = accessibilityRowSpan;\n  }\n\n  if (accessibilitySelected != null) {\n    domProps['aria-selected'] = accessibilitySelected;\n  }\n\n  if (accessibilitySetSize != null) {\n    domProps['aria-setsize'] = accessibilitySetSize;\n  }\n\n  if (accessibilitySort != null) {\n    domProps['aria-sort'] = accessibilitySort;\n  }\n\n  if (accessibilityValueMax != null) {\n    domProps['aria-valuemax'] = accessibilityValueMax;\n  }\n\n  if (accessibilityValueMin != null) {\n    domProps['aria-valuemin'] = accessibilityValueMin;\n  }\n\n  if (accessibilityValueNow != null) {\n    domProps['aria-valuenow'] = accessibilityValueNow;\n  }\n\n  if (accessibilityValueText != null) {\n    domProps['aria-valuetext'] = accessibilityValueText;\n  }\n\n  if (dataSet != null) {\n    for (var dataProp in dataSet) {\n      if (hasOwnProperty.call(dataSet, dataProp)) {\n        var dataName = hyphenateString(dataProp);\n        var dataValue = dataSet[dataProp];\n\n        if (dataValue != null) {\n          domProps[\"data-\" + dataName] = dataValue;\n        }\n      }\n    }\n  }\n\n  var _focusable = focusable != null ? focusable : accessible;\n\n  if (_focusable === false) {\n    domProps.tabIndex = '-1';\n  }\n\n  if (elementType === 'a' || elementType === 'button' || elementType === 'input' || elementType === 'select' || elementType === 'textarea') {\n    if (_focusable === false || accessibilityDisabled === true) {\n      domProps.tabIndex = '-1';\n    }\n  } else if (role === 'button' || role === 'checkbox' || role === 'link' || role === 'radio' || role === 'textbox' || role === 'switch') {\n    if (_focusable !== false) {\n      domProps.tabIndex = '0';\n    }\n  } else {\n    if (_focusable === true) {\n      domProps.tabIndex = '0';\n    }\n  }\n\n  var reactNativeStyle = StyleSheet.compose(pointerEvents && pointerEventsStyles[pointerEvents], providedStyle);\n  var needsCursor = (role === 'button' || role === 'link') && !disabled;\n  var needsReset = elementType === 'a' || elementType === 'button' || elementType === 'li' || elementType === 'ul' || role === 'heading';\n  var finalClassList = [needsReset && classes.reset, needsCursor && classes.cursor, classList];\n\n  var _styleResolver$resolv = styleResolver.resolve(reactNativeStyle, finalClassList),\n      className = _styleResolver$resolv.className,\n      style = _styleResolver$resolv.style;\n\n  if (className != null && className !== '') {\n    domProps.className = className;\n  }\n\n  if (style) {\n    domProps.style = style;\n  }\n\n  if (nativeID != null) {\n    domProps.id = nativeID;\n  }\n\n  if (testID != null) {\n    domProps['data-testid'] = testID;\n  }\n\n  return domProps;\n};\n\nexport default createDOMProps;\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/Users/garethcozens/Documents/repo/cloudratha/react-native-web-nx-demo/node_modules/react-native-web/dist/modules/createDOMProps/index.js"],"names":["source","target","sourceKeys","Object","i","key","excluded","emptyObject","hasOwnProperty","isArray","Array","uppercasePattern","match","str","idRefList","classes","css","reset","backgroundColor","color","font","listStyle","margin","textAlign","textDecoration","cursor","STYLE_GROUPS","pointerEventsStyles","StyleSheet","auto","pointerEvents","none","createDOMProps","props","_props","accessibilityActiveDescendant","accessibilityAtomic","accessibilityAutoComplete","accessibilityBusy","accessibilityChecked","accessibilityColumnCount","accessibilityColumnIndex","accessibilityColumnSpan","accessibilityControls","accessibilityCurrent","accessibilityDescribedBy","accessibilityDetails","accessibilityDisabled","accessibilityErrorMessage","accessibilityExpanded","accessibilityFlowTo","accessibilityHasPopup","accessibilityHidden","accessibilityInvalid","accessibilityKeyShortcuts","accessibilityLabel","accessibilityLabelledBy","accessibilityLevel","accessibilityLiveRegion","accessibilityModal","accessibilityMultiline","accessibilityMultiSelectable","accessibilityOrientation","accessibilityOwns","accessibilityPlaceholder","accessibilityPosInSet","accessibilityPressed","accessibilityReadOnly","accessibilityRequired","accessibilityRole","accessibilityRoleDescription","accessibilityRowCount","accessibilityRowIndex","accessibilityRowSpan","accessibilitySelected","accessibilitySetSize","accessibilitySort","accessibilityValueMax","accessibilityValueMin","accessibilityValueNow","accessibilityValueText","classList","dataSet","focusable","nativeID","providedStyle","testID","accessible","accessibilityState","accessibilityValue","domProps","_objectWithoutPropertiesLoose","disabled","role","AccessibilityUtil","value","prop","_value","processIDRefList","elementType","dataName","hyphenateString","dataValue","_focusable","reactNativeStyle","needsCursor","needsReset","finalClassList","_styleResolver$resolv","styleResolver","className","style"],"mappings":"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","sourcesContent":["function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport AccessibilityUtil from '../AccessibilityUtil';\nimport css from '../../exports/StyleSheet/css';\nimport StyleSheet from '../../exports/StyleSheet';\nimport styleResolver from '../../exports/StyleSheet/styleResolver';\nimport { STYLE_GROUPS } from '../../exports/StyleSheet/constants';\nvar emptyObject = {};\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\nvar uppercasePattern = /[A-Z]/g;\n\nfunction toHyphenLower(match) {\n  return '-' + match.toLowerCase();\n}\n\nfunction hyphenateString(str) {\n  return str.replace(uppercasePattern, toHyphenLower);\n}\n\nfunction processIDRefList(idRefList) {\n  return isArray(idRefList) ? idRefList.join(' ') : idRefList;\n} // Reset styles for heading, link, and list DOM elements\n\n\nvar classes = css.create({\n  reset: {\n    backgroundColor: 'transparent',\n    color: 'inherit',\n    font: 'inherit',\n    listStyle: 'none',\n    margin: 0,\n    textAlign: 'inherit',\n    textDecoration: 'none'\n  },\n  cursor: {\n    cursor: 'pointer'\n  }\n}, STYLE_GROUPS.classicReset);\nvar pointerEventsStyles = StyleSheet.create({\n  auto: {\n    pointerEvents: 'auto'\n  },\n  'box-none': {\n    pointerEvents: 'box-none'\n  },\n  'box-only': {\n    pointerEvents: 'box-only'\n  },\n  none: {\n    pointerEvents: 'none'\n  }\n});\n\nvar createDOMProps = function createDOMProps(elementType, props) {\n  if (!props) {\n    props = emptyObject;\n  }\n\n  var _props = props,\n      accessibilityActiveDescendant = _props.accessibilityActiveDescendant,\n      accessibilityAtomic = _props.accessibilityAtomic,\n      accessibilityAutoComplete = _props.accessibilityAutoComplete,\n      accessibilityBusy = _props.accessibilityBusy,\n      accessibilityChecked = _props.accessibilityChecked,\n      accessibilityColumnCount = _props.accessibilityColumnCount,\n      accessibilityColumnIndex = _props.accessibilityColumnIndex,\n      accessibilityColumnSpan = _props.accessibilityColumnSpan,\n      accessibilityControls = _props.accessibilityControls,\n      accessibilityCurrent = _props.accessibilityCurrent,\n      accessibilityDescribedBy = _props.accessibilityDescribedBy,\n      accessibilityDetails = _props.accessibilityDetails,\n      accessibilityDisabled = _props.accessibilityDisabled,\n      accessibilityErrorMessage = _props.accessibilityErrorMessage,\n      accessibilityExpanded = _props.accessibilityExpanded,\n      accessibilityFlowTo = _props.accessibilityFlowTo,\n      accessibilityHasPopup = _props.accessibilityHasPopup,\n      accessibilityHidden = _props.accessibilityHidden,\n      accessibilityInvalid = _props.accessibilityInvalid,\n      accessibilityKeyShortcuts = _props.accessibilityKeyShortcuts,\n      accessibilityLabel = _props.accessibilityLabel,\n      accessibilityLabelledBy = _props.accessibilityLabelledBy,\n      accessibilityLevel = _props.accessibilityLevel,\n      accessibilityLiveRegion = _props.accessibilityLiveRegion,\n      accessibilityModal = _props.accessibilityModal,\n      accessibilityMultiline = _props.accessibilityMultiline,\n      accessibilityMultiSelectable = _props.accessibilityMultiSelectable,\n      accessibilityOrientation = _props.accessibilityOrientation,\n      accessibilityOwns = _props.accessibilityOwns,\n      accessibilityPlaceholder = _props.accessibilityPlaceholder,\n      accessibilityPosInSet = _props.accessibilityPosInSet,\n      accessibilityPressed = _props.accessibilityPressed,\n      accessibilityReadOnly = _props.accessibilityReadOnly,\n      accessibilityRequired = _props.accessibilityRequired,\n      accessibilityRole = _props.accessibilityRole,\n      accessibilityRoleDescription = _props.accessibilityRoleDescription,\n      accessibilityRowCount = _props.accessibilityRowCount,\n      accessibilityRowIndex = _props.accessibilityRowIndex,\n      accessibilityRowSpan = _props.accessibilityRowSpan,\n      accessibilitySelected = _props.accessibilitySelected,\n      accessibilitySetSize = _props.accessibilitySetSize,\n      accessibilitySort = _props.accessibilitySort,\n      accessibilityValueMax = _props.accessibilityValueMax,\n      accessibilityValueMin = _props.accessibilityValueMin,\n      accessibilityValueNow = _props.accessibilityValueNow,\n      accessibilityValueText = _props.accessibilityValueText,\n      classList = _props.classList,\n      dataSet = _props.dataSet,\n      focusable = _props.focusable,\n      nativeID = _props.nativeID,\n      pointerEvents = _props.pointerEvents,\n      providedStyle = _props.style,\n      testID = _props.testID,\n      accessible = _props.accessible,\n      accessibilityState = _props.accessibilityState,\n      accessibilityValue = _props.accessibilityValue,\n      domProps = _objectWithoutPropertiesLoose(_props, [\"accessibilityActiveDescendant\", \"accessibilityAtomic\", \"accessibilityAutoComplete\", \"accessibilityBusy\", \"accessibilityChecked\", \"accessibilityColumnCount\", \"accessibilityColumnIndex\", \"accessibilityColumnSpan\", \"accessibilityControls\", \"accessibilityCurrent\", \"accessibilityDescribedBy\", \"accessibilityDetails\", \"accessibilityDisabled\", \"accessibilityErrorMessage\", \"accessibilityExpanded\", \"accessibilityFlowTo\", \"accessibilityHasPopup\", \"accessibilityHidden\", \"accessibilityInvalid\", \"accessibilityKeyShortcuts\", \"accessibilityLabel\", \"accessibilityLabelledBy\", \"accessibilityLevel\", \"accessibilityLiveRegion\", \"accessibilityModal\", \"accessibilityMultiline\", \"accessibilityMultiSelectable\", \"accessibilityOrientation\", \"accessibilityOwns\", \"accessibilityPlaceholder\", \"accessibilityPosInSet\", \"accessibilityPressed\", \"accessibilityReadOnly\", \"accessibilityRequired\", \"accessibilityRole\", \"accessibilityRoleDescription\", \"accessibilityRowCount\", \"accessibilityRowIndex\", \"accessibilityRowSpan\", \"accessibilitySelected\", \"accessibilitySetSize\", \"accessibilitySort\", \"accessibilityValueMax\", \"accessibilityValueMin\", \"accessibilityValueNow\", \"accessibilityValueText\", \"classList\", \"dataSet\", \"focusable\", \"nativeID\", \"pointerEvents\", \"style\", \"testID\", \"accessible\", \"accessibilityState\", \"accessibilityValue\"]);\n\n  var disabled = accessibilityState != null && accessibilityState.disabled === true || accessibilityDisabled;\n  var role = AccessibilityUtil.propsToAriaRole(props); // DEPRECATED\n\n  if (accessibilityState != null) {\n    for (var prop in accessibilityState) {\n      var value = accessibilityState[prop];\n\n      if (value != null) {\n        if (prop === 'disabled' || prop === 'hidden') {\n          if (value === true) {\n            domProps[\"aria-\" + prop] = value; // also set prop directly to pick up host elementType behaviour\n\n            domProps[prop] = value;\n          }\n        } else {\n          domProps[\"aria-\" + prop] = value;\n        }\n      }\n    }\n  }\n\n  if (accessibilityValue != null) {\n    for (var _prop in accessibilityValue) {\n      var _value = accessibilityValue[_prop];\n\n      if (_value != null) {\n        domProps[\"aria-value\" + _prop] = _value;\n      }\n    }\n  } // ACCESSIBILITY\n\n\n  if (accessibilityActiveDescendant != null) {\n    domProps['aria-activedescendant'] = accessibilityActiveDescendant;\n  }\n\n  if (accessibilityAtomic != null) {\n    domProps['aria-atomic'] = accessibilityAtomic;\n  }\n\n  if (accessibilityAutoComplete != null) {\n    domProps['aria-autocomplete'] = accessibilityAutoComplete;\n  }\n\n  if (accessibilityBusy != null) {\n    domProps['aria-busy'] = accessibilityBusy;\n  }\n\n  if (accessibilityChecked != null) {\n    domProps['aria-checked'] = accessibilityChecked;\n  }\n\n  if (accessibilityColumnCount != null) {\n    domProps['aria-colcount'] = accessibilityColumnCount;\n  }\n\n  if (accessibilityColumnIndex != null) {\n    domProps['aria-colindex'] = accessibilityColumnIndex;\n  }\n\n  if (accessibilityColumnSpan != null) {\n    domProps['aria-colspan'] = accessibilityColumnSpan;\n  }\n\n  if (accessibilityControls != null) {\n    domProps['aria-controls'] = processIDRefList(accessibilityControls);\n  }\n\n  if (accessibilityCurrent != null) {\n    domProps['aria-current'] = accessibilityCurrent;\n  }\n\n  if (accessibilityDescribedBy != null) {\n    domProps['aria-describedby'] = processIDRefList(accessibilityDescribedBy);\n  }\n\n  if (accessibilityDetails != null) {\n    domProps['aria-details'] = accessibilityDetails;\n  }\n\n  if (disabled === true) {\n    domProps['aria-disabled'] = true; // Enhance with native semantics\n\n    if (elementType === 'button' || elementType === 'form' || elementType === 'input' || elementType === 'select' || elementType === 'textarea') {\n      domProps.disabled = true;\n    }\n  }\n\n  if (accessibilityErrorMessage != null) {\n    domProps['aria-errormessage'] = accessibilityErrorMessage;\n  }\n\n  if (accessibilityExpanded != null) {\n    domProps['aria-expanded'] = accessibilityExpanded;\n  }\n\n  if (accessibilityFlowTo != null) {\n    domProps['aria-flowto'] = processIDRefList(accessibilityFlowTo);\n  }\n\n  if (accessibilityHasPopup != null) {\n    domProps['aria-haspopup'] = accessibilityHasPopup;\n  }\n\n  if (accessibilityHidden === true) {\n    domProps['aria-hidden'] = accessibilityHidden;\n  }\n\n  if (accessibilityInvalid != null) {\n    domProps['aria-invalid'] = accessibilityInvalid;\n  }\n\n  if (accessibilityKeyShortcuts != null && Array.isArray(accessibilityKeyShortcuts)) {\n    domProps['aria-keyshortcuts'] = accessibilityKeyShortcuts.join(' ');\n  }\n\n  if (accessibilityLabel != null) {\n    domProps['aria-label'] = accessibilityLabel;\n  }\n\n  if (accessibilityLabelledBy != null) {\n    domProps['aria-labelledby'] = processIDRefList(accessibilityLabelledBy);\n  }\n\n  if (accessibilityLevel != null) {\n    domProps['aria-level'] = accessibilityLevel;\n  }\n\n  if (accessibilityLiveRegion != null) {\n    domProps['aria-live'] = accessibilityLiveRegion === 'none' ? 'off' : accessibilityLiveRegion;\n  }\n\n  if (accessibilityModal != null) {\n    domProps['aria-modal'] = accessibilityModal;\n  }\n\n  if (accessibilityMultiline != null) {\n    domProps['aria-multiline'] = accessibilityMultiline;\n  }\n\n  if (accessibilityMultiSelectable != null) {\n    domProps['aria-multiselectable'] = accessibilityMultiSelectable;\n  }\n\n  if (accessibilityOrientation != null) {\n    domProps['aria-orientation'] = accessibilityOrientation;\n  }\n\n  if (accessibilityOwns != null) {\n    domProps['aria-owns'] = processIDRefList(accessibilityOwns);\n  }\n\n  if (accessibilityPlaceholder != null) {\n    domProps['aria-placeholder'] = accessibilityPlaceholder;\n  }\n\n  if (accessibilityPosInSet != null) {\n    domProps['aria-posinset'] = accessibilityPosInSet;\n  }\n\n  if (accessibilityPressed != null) {\n    domProps['aria-pressed'] = accessibilityPressed;\n  }\n\n  if (accessibilityReadOnly != null) {\n    domProps['aria-readonly'] = accessibilityReadOnly; // Enhance with native semantics\n\n    if (elementType === 'input' || elementType === 'select' || elementType === 'textarea') {\n      domProps.readOnly = true;\n    }\n  }\n\n  if (accessibilityRequired != null) {\n    domProps['aria-required'] = accessibilityRequired; // Enhance with native semantics\n\n    if (elementType === 'input' || elementType === 'select' || elementType === 'textarea') {\n      domProps.required = true;\n    }\n  }\n\n  if (role != null) {\n    // 'presentation' synonym has wider browser support\n    domProps['role'] = role === 'none' ? 'presentation' : role;\n  }\n\n  if (accessibilityRoleDescription != null) {\n    domProps['aria-roledescription'] = accessibilityRoleDescription;\n  }\n\n  if (accessibilityRowCount != null) {\n    domProps['aria-rowcount'] = accessibilityRowCount;\n  }\n\n  if (accessibilityRowIndex != null) {\n    domProps['aria-rowindex'] = accessibilityRowIndex;\n  }\n\n  if (accessibilityRowSpan != null) {\n    domProps['aria-rowspan'] = accessibilityRowSpan;\n  }\n\n  if (accessibilitySelected != null) {\n    domProps['aria-selected'] = accessibilitySelected;\n  }\n\n  if (accessibilitySetSize != null) {\n    domProps['aria-setsize'] = accessibilitySetSize;\n  }\n\n  if (accessibilitySort != null) {\n    domProps['aria-sort'] = accessibilitySort;\n  }\n\n  if (accessibilityValueMax != null) {\n    domProps['aria-valuemax'] = accessibilityValueMax;\n  }\n\n  if (accessibilityValueMin != null) {\n    domProps['aria-valuemin'] = accessibilityValueMin;\n  }\n\n  if (accessibilityValueNow != null) {\n    domProps['aria-valuenow'] = accessibilityValueNow;\n  }\n\n  if (accessibilityValueText != null) {\n    domProps['aria-valuetext'] = accessibilityValueText;\n  } // \"dataSet\" replaced with \"data-*\"\n\n\n  if (dataSet != null) {\n    for (var dataProp in dataSet) {\n      if (hasOwnProperty.call(dataSet, dataProp)) {\n        var dataName = hyphenateString(dataProp);\n        var dataValue = dataSet[dataProp];\n\n        if (dataValue != null) {\n          domProps[\"data-\" + dataName] = dataValue;\n        }\n      }\n    }\n  } // FOCUS\n  // \"focusable\" indicates that an element may be a keyboard tab-stop.\n\n\n  var _focusable = focusable != null ? focusable : accessible;\n\n  if (_focusable === false) {\n    domProps.tabIndex = '-1';\n  }\n\n  if ( // These native elements are focusable by default\n  elementType === 'a' || elementType === 'button' || elementType === 'input' || elementType === 'select' || elementType === 'textarea') {\n    if (_focusable === false || accessibilityDisabled === true) {\n      domProps.tabIndex = '-1';\n    }\n  } else if ( // These roles are made focusable by default\n  role === 'button' || role === 'checkbox' || role === 'link' || role === 'radio' || role === 'textbox' || role === 'switch') {\n    if (_focusable !== false) {\n      domProps.tabIndex = '0';\n    }\n  } else {\n    // Everything else must explicitly set the prop\n    if (_focusable === true) {\n      domProps.tabIndex = '0';\n    }\n  } // STYLE\n\n\n  var reactNativeStyle = StyleSheet.compose(pointerEvents && pointerEventsStyles[pointerEvents], providedStyle); // Additional style resets for interactive elements\n\n  var needsCursor = (role === 'button' || role === 'link') && !disabled;\n  var needsReset = elementType === 'a' || elementType === 'button' || elementType === 'li' || elementType === 'ul' || role === 'heading'; // Classic CSS styles\n\n  var finalClassList = [needsReset && classes.reset, needsCursor && classes.cursor, classList]; // Resolve styles\n\n  var _styleResolver$resolv = styleResolver.resolve(reactNativeStyle, finalClassList),\n      className = _styleResolver$resolv.className,\n      style = _styleResolver$resolv.style;\n\n  if (className != null && className !== '') {\n    domProps.className = className;\n  }\n\n  if (style) {\n    domProps.style = style;\n  } // OTHER\n  // Native element ID\n\n\n  if (nativeID != null) {\n    domProps.id = nativeID;\n  } // Automated test IDs\n\n\n  if (testID != null) {\n    domProps['data-testid'] = testID;\n  }\n\n  return domProps;\n};\n\nexport default createDOMProps;"]},"metadata":{},"sourceType":"module"}