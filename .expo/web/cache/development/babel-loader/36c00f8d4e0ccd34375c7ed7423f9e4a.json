{"ast":null,"code":"import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\n\nfunction isScreenReaderEnabled() {\n  return new Promise(function (resolve, reject) {\n    resolve(true);\n  });\n}\n\nvar prefersReducedMotionMedia = canUseDOM && typeof window.matchMedia === 'function' ? window.matchMedia('(prefers-reduced-motion: reduce)') : null;\n\nfunction isReduceMotionEnabled() {\n  return new Promise(function (resolve, reject) {\n    resolve(prefersReducedMotionMedia ? prefersReducedMotionMedia.matches : true);\n  });\n}\n\nfunction addChangeListener(fn) {\n  if (prefersReducedMotionMedia != null) {\n    prefersReducedMotionMedia.addEventListener != null ? prefersReducedMotionMedia.addEventListener('change', fn) : prefersReducedMotionMedia.addListener(fn);\n  }\n}\n\nfunction removeChangeListener(fn) {\n  if (prefersReducedMotionMedia != null) {\n    prefersReducedMotionMedia.removeEventListener != null ? prefersReducedMotionMedia.removeEventListener('change', fn) : prefersReducedMotionMedia.removeListener(fn);\n  }\n}\n\nvar handlers = {};\nvar AccessibilityInfo = {\n  isScreenReaderEnabled: isScreenReaderEnabled,\n  isReduceMotionEnabled: isReduceMotionEnabled,\n  fetch: isScreenReaderEnabled,\n  addEventListener: function addEventListener(eventName, handler) {\n    if (eventName === 'reduceMotionChanged') {\n      if (!prefersReducedMotionMedia) {\n        return;\n      }\n\n      var listener = function listener(event) {\n        handler(event.matches);\n      };\n\n      addChangeListener(listener);\n      handlers[handler] = listener;\n    }\n\n    return {\n      remove: function remove() {\n        return AccessibilityInfo.removeEventListener(eventName, handler);\n      }\n    };\n  },\n  setAccessibilityFocus: function setAccessibilityFocus(reactTag) {},\n  announceForAccessibility: function announceForAccessibility(announcement) {},\n  removeEventListener: function removeEventListener(eventName, handler) {\n    if (eventName === 'reduceMotionChanged') {\n      var listener = handlers[handler];\n\n      if (!listener || !prefersReducedMotionMedia) {\n        return;\n      }\n\n      removeChangeListener(listener);\n    }\n\n    return;\n  }\n};\nexport default AccessibilityInfo;","map":{"version":3,"sources":["/Users/garethcozens/Documents/repo/cloudratha/react-native-web-nx-demo/node_modules/react-native-web/dist/exports/AccessibilityInfo/index.js"],"names":["resolve","prefersReducedMotionMedia","canUseDOM","window","handlers","AccessibilityInfo","isScreenReaderEnabled","isReduceMotionEnabled","fetch","addEventListener","eventName","listener","handler","event","addChangeListener","remove","setAccessibilityFocus","announceForAccessibility","removeEventListener","removeChangeListener"],"mappings":"AAQA,SAAA,SAAA,QAAA,+BAAA;;AAEA,SAAA,qBAAA,GAAiC;AAC/B,SAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAA2B;AAC5CA,IAAAA,OAAO,CAAPA,IAAO,CAAPA;AADF,GAAO,CAAP;AAKF;;AAAA,IAAIC,yBAAyB,GAAGC,SAAS,IAAI,OAAOC,MAAM,CAAb,UAAA,KAAbD,UAAAA,GAAuDC,MAAM,CAANA,UAAAA,CAAvDD,kCAAuDC,CAAvDD,GAAhC,IAAA;;AAEA,SAAA,qBAAA,GAAiC;AAC/B,SAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAA2B;AAC5CF,IAAAA,OAAO,CAACC,yBAAyB,GAAGA,yBAAyB,CAA5B,OAAA,GAAjCD,IAAO,CAAPA;AADF,GAAO,CAAP;AAKF;;AAAA,SAAA,iBAAA,CAAA,EAAA,EAA+B;AAC7B,MAAIC,yBAAyB,IAA7B,IAAA,EAAuC;AACrCA,IAAAA,yBAAyB,CAAzBA,gBAAAA,IAAAA,IAAAA,GAAqDA,yBAAyB,CAAzBA,gBAAAA,CAAAA,QAAAA,EAArDA,EAAqDA,CAArDA,GAAgHA,yBAAyB,CAAzBA,WAAAA,CAAhHA,EAAgHA,CAAhHA;AAEH;AAED;;AAAA,SAAA,oBAAA,CAAA,EAAA,EAAkC;AAChC,MAAIA,yBAAyB,IAA7B,IAAA,EAAuC;AACrCA,IAAAA,yBAAyB,CAAzBA,mBAAAA,IAAAA,IAAAA,GAAwDA,yBAAyB,CAAzBA,mBAAAA,CAAAA,QAAAA,EAAxDA,EAAwDA,CAAxDA,GAAsHA,yBAAyB,CAAzBA,cAAAA,CAAtHA,EAAsHA,CAAtHA;AAEH;AAED;;AAAA,IAAIG,QAAQ,GAAZ,EAAA;AACA,IAAIC,iBAAiB,GAAG;AAOtBC,EAAAA,qBAAqB,EAPC,qBAAA;AAetBC,EAAAA,qBAAqB,EAfC,qBAAA;AAoBtBC,EAAAA,KAAK,EApBiB,qBAAA;AAyBtBC,EAAAA,gBAAgB,EAAE,SAAA,gBAAA,CAAA,SAAA,EAAA,OAAA,EAA8C;AAC9D,QAAIC,SAAS,KAAb,qBAAA,EAAyC;AACvC,UAAI,CAAJ,yBAAA,EAAgC;AAC9B;AAGF;;AAAA,UAAIC,QAAQ,GAAG,SAAA,QAAA,CAAA,KAAA,EAAyB;AACtCC,QAAAA,OAAO,CAACC,KAAK,CAAbD,OAAO,CAAPA;AADF,OAAA;;AAIAE,MAAAA,iBAAiB,CAAjBA,QAAiB,CAAjBA;AACAV,MAAAA,QAAQ,CAARA,OAAQ,CAARA,GAAAA,QAAAA;AAGF;;AAAA,WAAO;AACLW,MAAAA,MAAM,EAAE,SAAA,MAAA,GAAkB;AACxB,eAAOV,iBAAiB,CAAjBA,mBAAAA,CAAAA,SAAAA,EAAP,OAAOA,CAAP;AAFJ;AAAO,KAAP;AAvCoB,GAAA;AAiDtBW,EAAAA,qBAAqB,EAAE,SAAA,qBAAA,CAAA,QAAA,EAAyC,CAjD1C,CAAA;AAsDtBC,EAAAA,wBAAwB,EAAE,SAAA,wBAAA,CAAA,YAAA,EAAgD,CAtDpD,CAAA;AA2DtBC,EAAAA,mBAAmB,EAAE,SAAA,mBAAA,CAAA,SAAA,EAAA,OAAA,EAAiD;AACpE,QAAIR,SAAS,KAAb,qBAAA,EAAyC;AACvC,UAAIC,QAAQ,GAAGP,QAAQ,CAAvB,OAAuB,CAAvB;;AAEA,UAAI,CAAA,QAAA,IAAa,CAAjB,yBAAA,EAA6C;AAC3C;AAGFe;;AAAAA,MAAAA,oBAAoB,CAApBA,QAAoB,CAApBA;AAGF;;AAAA;AAtEJ;AAAwB,CAAxB;AAyEA,eAAA,iBAAA","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\n\nfunction isScreenReaderEnabled() {\n  return new Promise(function (resolve, reject) {\n    resolve(true);\n  });\n}\n\nvar prefersReducedMotionMedia = canUseDOM && typeof window.matchMedia === 'function' ? window.matchMedia('(prefers-reduced-motion: reduce)') : null;\n\nfunction isReduceMotionEnabled() {\n  return new Promise(function (resolve, reject) {\n    resolve(prefersReducedMotionMedia ? prefersReducedMotionMedia.matches : true);\n  });\n}\n\nfunction addChangeListener(fn) {\n  if (prefersReducedMotionMedia != null) {\n    prefersReducedMotionMedia.addEventListener != null ? prefersReducedMotionMedia.addEventListener('change', fn) : prefersReducedMotionMedia.addListener(fn);\n  }\n}\n\nfunction removeChangeListener(fn) {\n  if (prefersReducedMotionMedia != null) {\n    prefersReducedMotionMedia.removeEventListener != null ? prefersReducedMotionMedia.removeEventListener('change', fn) : prefersReducedMotionMedia.removeListener(fn);\n  }\n}\n\nvar handlers = {};\nvar AccessibilityInfo = {\n  /**\n   * Query whether a screen reader is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a screen reader is enabled and `false` otherwise.\n   */\n  isScreenReaderEnabled: isScreenReaderEnabled,\n\n  /**\n   * Query whether the user prefers reduced motion.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a screen reader is enabled and `false` otherwise.\n   */\n  isReduceMotionEnabled: isReduceMotionEnabled,\n\n  /**\n   * Deprecated\n   */\n  fetch: isScreenReaderEnabled,\n\n  /**\n   * Add an event handler. Supported events: reduceMotionChanged\n   */\n  addEventListener: function addEventListener(eventName, handler) {\n    if (eventName === 'reduceMotionChanged') {\n      if (!prefersReducedMotionMedia) {\n        return;\n      }\n\n      var listener = function listener(event) {\n        handler(event.matches);\n      };\n\n      addChangeListener(listener);\n      handlers[handler] = listener;\n    }\n\n    return {\n      remove: function remove() {\n        return AccessibilityInfo.removeEventListener(eventName, handler);\n      }\n    };\n  },\n\n  /**\n   * Set accessibility focus to a react component.\n   */\n  setAccessibilityFocus: function setAccessibilityFocus(reactTag) {},\n\n  /**\n   * Post a string to be announced by the screen reader.\n   */\n  announceForAccessibility: function announceForAccessibility(announcement) {},\n\n  /**\n   * Remove an event handler.\n   */\n  removeEventListener: function removeEventListener(eventName, handler) {\n    if (eventName === 'reduceMotionChanged') {\n      var listener = handlers[handler];\n\n      if (!listener || !prefersReducedMotionMedia) {\n        return;\n      }\n\n      removeChangeListener(listener);\n    }\n\n    return;\n  }\n};\nexport default AccessibilityInfo;"]},"metadata":{},"sourceType":"module"}