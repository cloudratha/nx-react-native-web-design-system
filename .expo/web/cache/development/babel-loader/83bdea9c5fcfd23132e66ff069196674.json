{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport * as React from 'react';\nimport * as ResponderSystem from \"./ResponderSystem\";\nvar emptyObject = {};\nvar idCounter = 0;\n\nfunction useStable(getInitialValue) {\n  _s();\n\n  var ref = React.useRef(null);\n\n  if (ref.current == null) {\n    ref.current = getInitialValue();\n  }\n\n  return ref.current;\n}\n\n_s(useStable, \"QMBuJFIdzLIeqBcFwhMf246mjOM=\");\n\nexport default function useResponderEvents(hostRef, config) {\n  _s2();\n\n  if (config === void 0) {\n    config = emptyObject;\n  }\n\n  var id = useStable(function () {\n    return idCounter++;\n  });\n  var isAttachedRef = React.useRef(false);\n  React.useEffect(function () {\n    ResponderSystem.attachListeners();\n    return function () {\n      ResponderSystem.removeNode(id);\n    };\n  }, [id]);\n  React.useEffect(function () {\n    var _config = config,\n        onMoveShouldSetResponder = _config.onMoveShouldSetResponder,\n        onMoveShouldSetResponderCapture = _config.onMoveShouldSetResponderCapture,\n        onScrollShouldSetResponder = _config.onScrollShouldSetResponder,\n        onScrollShouldSetResponderCapture = _config.onScrollShouldSetResponderCapture,\n        onSelectionChangeShouldSetResponder = _config.onSelectionChangeShouldSetResponder,\n        onSelectionChangeShouldSetResponderCapture = _config.onSelectionChangeShouldSetResponderCapture,\n        onStartShouldSetResponder = _config.onStartShouldSetResponder,\n        onStartShouldSetResponderCapture = _config.onStartShouldSetResponderCapture;\n    var requiresResponderSystem = onMoveShouldSetResponder != null || onMoveShouldSetResponderCapture != null || onScrollShouldSetResponder != null || onScrollShouldSetResponderCapture != null || onSelectionChangeShouldSetResponder != null || onSelectionChangeShouldSetResponderCapture != null || onStartShouldSetResponder != null || onStartShouldSetResponderCapture != null;\n    var node = hostRef.current;\n\n    if (requiresResponderSystem) {\n      ResponderSystem.addNode(id, node, config);\n      isAttachedRef.current = true;\n    } else if (isAttachedRef.current) {\n      ResponderSystem.removeNode(id);\n      isAttachedRef.current = false;\n    }\n  }, [config, hostRef, id]);\n  React.useDebugValue({\n    isResponder: hostRef.current === ResponderSystem.getResponderNode()\n  });\n  React.useDebugValue(config);\n}\n\n_s2(useResponderEvents, \"DGcHtLtlazs5FRMTwJ6n+Mo/OEI=\", false, function () {\n  return [useStable];\n});\n\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/Users/garethcozens/Documents/repo/cloudratha/react-native-web-nx-demo/node_modules/react-native-web/dist/modules/useResponderEvents/index.js"],"names":["emptyObject","idCounter","useStable","ref","React","getInitialValue","useResponderEvents","config","id","isAttachedRef","ResponderSystem","_config","onMoveShouldSetResponder","onMoveShouldSetResponderCapture","onScrollShouldSetResponder","onScrollShouldSetResponderCapture","onSelectionChangeShouldSetResponder","onSelectionChangeShouldSetResponderCapture","onStartShouldSetResponder","onStartShouldSetResponderCapture","requiresResponderSystem","node","hostRef","isResponder"],"mappings":";;;AAkBA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAO,KAAP,eAAA;AACA,IAAIA,WAAW,GAAf,EAAA;AACA,IAAIC,SAAS,GAAb,CAAA;;AAEA,SAAA,SAAA,CAAA,eAAA,EAAoC;AAAA,EAAA,EAAA;;AAClC,MAAIE,GAAG,GAAGC,KAAK,CAALA,MAAAA,CAAV,IAAUA,CAAV;;AAEA,MAAID,GAAG,CAAHA,OAAAA,IAAJ,IAAA,EAAyB;AACvBA,IAAAA,GAAG,CAAHA,OAAAA,GAAcE,eAAdF,EAAAA;AAGF;;AAAA,SAAOA,GAAG,CAAV,OAAA;;;GAPOD,S;;AAUT,eAAe,SAAA,kBAAA,CAAA,OAAA,EAAA,MAAA,EAA6C;AAAA,EAAA,GAAA;;AAC1D,MAAIK,MAAM,KAAK,KAAf,CAAA,EAAuB;AACrBA,IAAAA,MAAM,GAANA,WAAAA;AAGF;;AAAA,MAAIC,EAAE,GAAGN,SAAS,CAAC,YAAY;AAC7B,WAAOD,SAAP,EAAA;AADF,GAAkB,CAAlB;AAGA,MAAIQ,aAAa,GAAGL,KAAK,CAALA,MAAAA,CAApB,KAAoBA,CAApB;AAIAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAY;AAC1BM,IAAAA,eAAe,CAAfA,eAAAA;AACA,WAAO,YAAY;AACjBA,MAAAA,eAAe,CAAfA,UAAAA,CAAAA,EAAAA;AADF,KAAA;AAFFN,GAAAA,EAKG,CALHA,EAKG,CALHA;AAOAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAY;AAC1B,QAAIO,OAAO,GAAX,MAAA;AAAA,QACIC,wBAAwB,GAAGD,OAAO,CADtC,wBAAA;AAAA,QAEIE,+BAA+B,GAAGF,OAAO,CAF7C,+BAAA;AAAA,QAGIG,0BAA0B,GAAGH,OAAO,CAHxC,0BAAA;AAAA,QAIII,iCAAiC,GAAGJ,OAAO,CAJ/C,iCAAA;AAAA,QAKIK,mCAAmC,GAAGL,OAAO,CALjD,mCAAA;AAAA,QAMIM,0CAA0C,GAAGN,OAAO,CANxD,0CAAA;AAAA,QAOIO,yBAAyB,GAAGP,OAAO,CAPvC,yBAAA;AAAA,QAQIQ,gCAAgC,GAAGR,OAAO,CAR9C,gCAAA;AASA,QAAIS,uBAAuB,GAAGR,wBAAwB,IAAxBA,IAAAA,IAAoCC,+BAA+B,IAAnED,IAAAA,IAA+EE,0BAA0B,IAAzGF,IAAAA,IAAqHG,iCAAiC,IAAtJH,IAAAA,IAAkKI,mCAAmC,IAArMJ,IAAAA,IAAiNK,0CAA0C,IAA3PL,IAAAA,IAAuQM,yBAAyB,IAAhSN,IAAAA,IAA4SO,gCAAgC,IAA1W,IAAA;AACA,QAAIE,IAAI,GAAGC,OAAO,CAAlB,OAAA;;AAEA,QAAA,uBAAA,EAA6B;AAC3BZ,MAAAA,eAAe,CAAfA,OAAAA,CAAAA,EAAAA,EAAAA,IAAAA,EAAAA,MAAAA;AACAD,MAAAA,aAAa,CAAbA,OAAAA,GAAAA,IAAAA;AAFF,KAAA,MAGO,IAAIA,aAAa,CAAjB,OAAA,EAA2B;AAChCC,MAAAA,eAAe,CAAfA,UAAAA,CAAAA,EAAAA;AACAD,MAAAA,aAAa,CAAbA,OAAAA,GAAAA,KAAAA;AAEH;AApBDL,GAAAA,EAoBG,CAAA,MAAA,EAAA,OAAA,EApBHA,EAoBG,CApBHA;AAqBAA,EAAAA,KAAK,CAALA,aAAAA,CAAoB;AAClBmB,IAAAA,WAAW,EAAED,OAAO,CAAPA,OAAAA,KAAoBZ,eAAe,CADlDN,gBACmCM;AADf,GAApBN;AAGAA,EAAAA,KAAK,CAALA,aAAAA,CAAAA,MAAAA;;;IA3CsBE,kB;UAKbJ,S","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * Hook for integrating the Responder System into React\n *\n *   function SomeComponent({ onStartShouldSetResponder }) {\n *     const ref = useRef(null);\n *     useResponderEvents(ref, { onStartShouldSetResponder });\n *     return <div ref={ref} />\n *   }\n */\nimport * as React from 'react';\nimport * as ResponderSystem from './ResponderSystem';\nvar emptyObject = {};\nvar idCounter = 0;\n\nfunction useStable(getInitialValue) {\n  var ref = React.useRef(null);\n\n  if (ref.current == null) {\n    ref.current = getInitialValue();\n  }\n\n  return ref.current;\n}\n\nexport default function useResponderEvents(hostRef, config) {\n  if (config === void 0) {\n    config = emptyObject;\n  }\n\n  var id = useStable(function () {\n    return idCounter++;\n  });\n  var isAttachedRef = React.useRef(false); // This is a separate effects so it doesn't run when the config changes.\n  // On initial mount, attach global listeners if needed.\n  // On unmount, remove node potentially attached to the Responder System.\n\n  React.useEffect(function () {\n    ResponderSystem.attachListeners();\n    return function () {\n      ResponderSystem.removeNode(id);\n    };\n  }, [id]); // Register and unregister with the Responder System as necessary\n\n  React.useEffect(function () {\n    var _config = config,\n        onMoveShouldSetResponder = _config.onMoveShouldSetResponder,\n        onMoveShouldSetResponderCapture = _config.onMoveShouldSetResponderCapture,\n        onScrollShouldSetResponder = _config.onScrollShouldSetResponder,\n        onScrollShouldSetResponderCapture = _config.onScrollShouldSetResponderCapture,\n        onSelectionChangeShouldSetResponder = _config.onSelectionChangeShouldSetResponder,\n        onSelectionChangeShouldSetResponderCapture = _config.onSelectionChangeShouldSetResponderCapture,\n        onStartShouldSetResponder = _config.onStartShouldSetResponder,\n        onStartShouldSetResponderCapture = _config.onStartShouldSetResponderCapture;\n    var requiresResponderSystem = onMoveShouldSetResponder != null || onMoveShouldSetResponderCapture != null || onScrollShouldSetResponder != null || onScrollShouldSetResponderCapture != null || onSelectionChangeShouldSetResponder != null || onSelectionChangeShouldSetResponderCapture != null || onStartShouldSetResponder != null || onStartShouldSetResponderCapture != null;\n    var node = hostRef.current;\n\n    if (requiresResponderSystem) {\n      ResponderSystem.addNode(id, node, config);\n      isAttachedRef.current = true;\n    } else if (isAttachedRef.current) {\n      ResponderSystem.removeNode(id);\n      isAttachedRef.current = false;\n    }\n  }, [config, hostRef, id]);\n  React.useDebugValue({\n    isResponder: hostRef.current === ResponderSystem.getResponderNode()\n  });\n  React.useDebugValue(config);\n}"]},"metadata":{},"sourceType":"module"}