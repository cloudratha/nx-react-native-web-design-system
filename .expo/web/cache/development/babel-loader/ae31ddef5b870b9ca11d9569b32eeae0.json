{"ast":null,"code":"'use strict';\n\nimport invariant from 'fbjs/lib/invariant';\n\nvar EventSubscriptionVendor = function () {\n  function EventSubscriptionVendor() {\n    this._subscriptionsForType = {};\n  }\n\n  var _proto = EventSubscriptionVendor.prototype;\n\n  _proto.addSubscription = function addSubscription(eventType, subscription) {\n    invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\n\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n\n    var key = this._subscriptionsForType[eventType].length;\n\n    this._subscriptionsForType[eventType].push(subscription);\n\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  };\n\n  _proto.removeAllSubscriptions = function removeAllSubscriptions(eventType) {\n    if (eventType == null) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  };\n\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    var eventType = subscription.eventType;\n    var key = subscription.key;\n    var subscriptionsForType = this._subscriptionsForType[eventType];\n\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  };\n\n  _proto.getSubscriptionsForType = function getSubscriptionsForType(eventType) {\n    return this._subscriptionsForType[eventType];\n  };\n\n  return EventSubscriptionVendor;\n}();\n\nexport default EventSubscriptionVendor;","map":{"version":3,"sources":["/Users/garethcozens/Documents/repo/cloudratha/react-native-web-nx-demo/node_modules/react-native-web/dist/vendor/react-native/emitter/_EventSubscriptionVendor.js"],"names":["EventSubscriptionVendor","_proto","invariant","subscription","key","eventType","subscriptionsForType"],"mappings":"AASA;;AAEA,OAAA,SAAA,MAAA,oBAAA;;AAMA,IAAIA,uBAAuB,GAAgB,YAAY;AACrD,WAAA,uBAAA,GAAmC;AACjC,SAAA,qBAAA,GAAA,EAAA;AAUF;;AAAA,MAAIC,MAAM,GAAGD,uBAAuB,CAApC,SAAA;;AAEAC,EAAAA,MAAM,CAANA,eAAAA,GAAyB,SAAA,eAAA,CAAA,SAAA,EAAA,YAAA,EAAkD;AACzEC,IAAAA,SAAS,CAACC,YAAY,CAAZA,UAAAA,KAAD,IAAA,EAATD,wDAAS,CAATA;;AAEA,QAAI,CAAC,KAAA,qBAAA,CAAL,SAAK,CAAL,EAA4C;AAC1C,WAAA,qBAAA,CAAA,SAAA,IAAA,EAAA;AAGF;;AAAA,QAAIE,GAAG,GAAG,KAAA,qBAAA,CAAA,SAAA,EAAV,MAAA;;AAEA,SAAA,qBAAA,CAAA,SAAA,EAAA,IAAA,CAAA,YAAA;;AAEAD,IAAAA,YAAY,CAAZA,SAAAA,GAAAA,SAAAA;AACAA,IAAAA,YAAY,CAAZA,GAAAA,GAAAA,GAAAA;AACA,WAAA,YAAA;AAbFF,GAAAA;;AAuBAA,EAAAA,MAAM,CAANA,sBAAAA,GAAgC,SAAA,sBAAA,CAAA,SAAA,EAA2C;AACzE,QAAII,SAAS,IAAb,IAAA,EAAuB;AACrB,WAAA,qBAAA,GAAA,EAAA;AADF,KAAA,MAEO;AACL,aAAO,KAAA,qBAAA,CAAP,SAAO,CAAP;AAEH;AANDJ,GAAAA;;AAeAA,EAAAA,MAAM,CAANA,kBAAAA,GAA4B,SAAA,kBAAA,CAAA,YAAA,EAA0C;AACpE,QAAII,SAAS,GAAGF,YAAY,CAA5B,SAAA;AACA,QAAIC,GAAG,GAAGD,YAAY,CAAtB,GAAA;AACA,QAAIG,oBAAoB,GAAG,KAAA,qBAAA,CAA3B,SAA2B,CAA3B;;AAEA,QAAA,oBAAA,EAA0B;AACxB,aAAOA,oBAAoB,CAA3B,GAA2B,CAA3B;AAEH;AARDL,GAAAA;;AAuBAA,EAAAA,MAAM,CAANA,uBAAAA,GAAiC,SAAA,uBAAA,CAAA,SAAA,EAA4C;AAC3E,WAAO,KAAA,qBAAA,CAAP,SAAO,CAAP;AADFA,GAAAA;;AAIA,SAAA,uBAAA;AA/EF,CAA2C,EAA3C;;AAkFA,eAAA,uBAAA","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport invariant from 'fbjs/lib/invariant';\n\n/**\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\n * subscribed to a particular event type.\n */\nvar EventSubscriptionVendor = /*#__PURE__*/function () {\n  function EventSubscriptionVendor() {\n    this._subscriptionsForType = {};\n  }\n  /**\n   * Adds a subscription keyed by an event type.\n   *\n   * @param {string} eventType\n   * @param {EventSubscription} subscription\n   */\n\n\n  var _proto = EventSubscriptionVendor.prototype;\n\n  _proto.addSubscription = function addSubscription(eventType, subscription) {\n    invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\n\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n\n    var key = this._subscriptionsForType[eventType].length;\n\n    this._subscriptionsForType[eventType].push(subscription);\n\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  }\n  /**\n   * Removes a bulk set of the subscriptions.\n   *\n   * @param {?string} eventType - Optional name of the event type whose\n   *   registered supscriptions to remove, if null remove all subscriptions.\n   */\n  ;\n\n  _proto.removeAllSubscriptions = function removeAllSubscriptions(eventType) {\n    if (eventType == null) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  }\n  /**\n   * Removes a specific subscription. Instead of calling this function, call\n   * `subscription.remove()` directly.\n   *\n   * @param {object} subscription\n   */\n  ;\n\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    var eventType = subscription.eventType;\n    var key = subscription.key;\n    var subscriptionsForType = this._subscriptionsForType[eventType];\n\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  }\n  /**\n   * Returns the array of subscriptions that are currently registered for the\n   * given event type.\n   *\n   * Note: This array can be potentially sparse as subscriptions are deleted\n   * from it when they are removed.\n   *\n   * TODO: This returns a nullable array. wat?\n   *\n   * @param {string} eventType\n   * @returns {?array}\n   */\n  ;\n\n  _proto.getSubscriptionsForType = function getSubscriptionsForType(eventType) {\n    return this._subscriptionsForType[eventType];\n  };\n\n  return EventSubscriptionVendor;\n}();\n\nexport default EventSubscriptionVendor;"]},"metadata":{},"sourceType":"module"}