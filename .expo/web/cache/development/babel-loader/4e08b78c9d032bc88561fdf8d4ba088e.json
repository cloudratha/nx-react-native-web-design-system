{"ast":null,"code":"import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport invariant from 'fbjs/lib/invariant';\nvar initialURL = canUseDOM ? window.location.href : '';\n\nvar Linking = function () {\n  function Linking() {\n    var _this = this;\n\n    this._eventCallbacks = {};\n\n    this.addEventListener = function (event, callback) {\n      if (!_this._eventCallbacks[event]) {\n        _this._eventCallbacks[event] = [callback];\n        return;\n      }\n\n      _this._eventCallbacks[event].push(callback);\n    };\n\n    this.removeEventListener = function (event, callback) {\n      var callbacks = _this._eventCallbacks[event];\n      var filteredCallbacks = callbacks.filter(function (c) {\n        return c.toString() !== callback.toString();\n      });\n      _this._eventCallbacks[event] = filteredCallbacks;\n    };\n  }\n\n  var _proto = Linking.prototype;\n\n  _proto._dispatchEvent = function _dispatchEvent(event) {\n    for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      data[_key - 1] = arguments[_key];\n    }\n\n    var listeners = this._eventCallbacks[event];\n\n    if (listeners != null && Array.isArray(listeners)) {\n      listeners.map(function (listener) {\n        listener.apply(void 0, data);\n      });\n    }\n  };\n\n  _proto.canOpenURL = function canOpenURL() {\n    return Promise.resolve(true);\n  };\n\n  _proto.getInitialURL = function getInitialURL() {\n    return Promise.resolve(initialURL);\n  };\n\n  _proto.openURL = function openURL(url) {\n    try {\n      open(url);\n\n      this._dispatchEvent('onOpen', url);\n\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto._validateURL = function _validateURL(url) {\n    invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);\n    invariant(url, 'Invalid URL: cannot be empty');\n  };\n\n  return Linking;\n}();\n\nvar open = function open(url) {\n  if (canUseDOM) {\n    var urlToOpen = new URL(url, window.location).toString();\n    window.open(urlToOpen, '_blank', 'noopener');\n  }\n};\n\nexport default new Linking();\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/Users/garethcozens/Documents/repo/cloudratha/react-native-web-nx-demo/node_modules/react-native-web/dist/exports/Linking/index.js"],"names":["initialURL","canUseDOM","window","Linking","_this","callbacks","filteredCallbacks","c","callback","_proto","_len","arguments","data","_key","listeners","Array","listener","Promise","open","invariant","urlToOpen"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport invariant from 'fbjs/lib/invariant';\nvar initialURL = canUseDOM ? window.location.href : '';\n\nvar Linking = /*#__PURE__*/function () {\n  function Linking() {\n    var _this = this;\n\n    this._eventCallbacks = {};\n\n    this.addEventListener = function (event, callback) {\n      if (!_this._eventCallbacks[event]) {\n        _this._eventCallbacks[event] = [callback];\n        return;\n      }\n\n      _this._eventCallbacks[event].push(callback);\n    };\n\n    this.removeEventListener = function (event, callback) {\n      var callbacks = _this._eventCallbacks[event];\n      var filteredCallbacks = callbacks.filter(function (c) {\n        return c.toString() !== callback.toString();\n      });\n      _this._eventCallbacks[event] = filteredCallbacks;\n    };\n  }\n\n  var _proto = Linking.prototype;\n\n  _proto._dispatchEvent = function _dispatchEvent(event) {\n    for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      data[_key - 1] = arguments[_key];\n    }\n\n    var listeners = this._eventCallbacks[event];\n\n    if (listeners != null && Array.isArray(listeners)) {\n      listeners.map(function (listener) {\n        listener.apply(void 0, data);\n      });\n    }\n  }\n  /**\n   * Adds a event listener for the specified event. The callback will be called when the\n   * said event is dispatched.\n   */\n  ;\n\n  _proto.canOpenURL = function canOpenURL() {\n    return Promise.resolve(true);\n  };\n\n  _proto.getInitialURL = function getInitialURL() {\n    return Promise.resolve(initialURL);\n  }\n  /**\n   * Try to open the given url in a secure fashion. The method returns a Promise object.\n   * If the url opens, the promise is resolved. If not, the promise is rejected.\n   * Dispatches the `onOpen` event if `url` is opened successfully\n   */\n  ;\n\n  _proto.openURL = function openURL(url) {\n    try {\n      open(url);\n\n      this._dispatchEvent('onOpen', url);\n\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto._validateURL = function _validateURL(url) {\n    invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);\n    invariant(url, 'Invalid URL: cannot be empty');\n  };\n\n  return Linking;\n}();\n\nvar open = function open(url) {\n  if (canUseDOM) {\n    var urlToOpen = new URL(url, window.location).toString();\n    window.open(urlToOpen, '_blank', 'noopener');\n  }\n};\n\nexport default new Linking();"]},"metadata":{},"sourceType":"module"}