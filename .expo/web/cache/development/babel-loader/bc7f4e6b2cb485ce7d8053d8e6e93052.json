{"ast":null,"code":"import { isStartish, isMoveish, isEndish } from \"./ResponderEventTypes\";\nvar __DEV__ = true;\nvar MAX_TOUCH_BANK = 20;\nvar touchBank = [];\nvar touchHistory = {\n  touchBank: touchBank,\n  numberActiveTouches: 0,\n  indexOfSingleActiveTouch: -1,\n  mostRecentTimeStamp: 0\n};\n\nfunction timestampForTouch(touch) {\n  return touch.timeStamp || touch.timestamp;\n}\n\nfunction createTouchRecord(touch) {\n  return {\n    touchActive: true,\n    startPageX: touch.pageX,\n    startPageY: touch.pageY,\n    startTimeStamp: timestampForTouch(touch),\n    currentPageX: touch.pageX,\n    currentPageY: touch.pageY,\n    currentTimeStamp: timestampForTouch(touch),\n    previousPageX: touch.pageX,\n    previousPageY: touch.pageY,\n    previousTimeStamp: timestampForTouch(touch)\n  };\n}\n\nfunction resetTouchRecord(touchRecord, touch) {\n  touchRecord.touchActive = true;\n  touchRecord.startPageX = touch.pageX;\n  touchRecord.startPageY = touch.pageY;\n  touchRecord.startTimeStamp = timestampForTouch(touch);\n  touchRecord.currentPageX = touch.pageX;\n  touchRecord.currentPageY = touch.pageY;\n  touchRecord.currentTimeStamp = timestampForTouch(touch);\n  touchRecord.previousPageX = touch.pageX;\n  touchRecord.previousPageY = touch.pageY;\n  touchRecord.previousTimeStamp = timestampForTouch(touch);\n}\n\nfunction getTouchIdentifier(_ref) {\n  var identifier = _ref.identifier;\n\n  if (identifier == null) {\n    console.error('Touch object is missing identifier.');\n  }\n\n  if (__DEV__) {\n    if (identifier > MAX_TOUCH_BANK) {\n      console.error('Touch identifier %s is greater than maximum supported %s which causes ' + 'performance issues backfilling array locations for all of the indices.', identifier, MAX_TOUCH_BANK);\n    }\n  }\n\n  return identifier;\n}\n\nfunction recordTouchStart(touch) {\n  var identifier = getTouchIdentifier(touch);\n  var touchRecord = touchBank[identifier];\n\n  if (touchRecord) {\n    resetTouchRecord(touchRecord, touch);\n  } else {\n    touchBank[identifier] = createTouchRecord(touch);\n  }\n\n  touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n}\n\nfunction recordTouchMove(touch) {\n  var touchRecord = touchBank[getTouchIdentifier(touch)];\n\n  if (touchRecord) {\n    touchRecord.touchActive = true;\n    touchRecord.previousPageX = touchRecord.currentPageX;\n    touchRecord.previousPageY = touchRecord.currentPageY;\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n    touchRecord.currentPageX = touch.pageX;\n    touchRecord.currentPageY = touch.pageY;\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n  } else {\n    console.warn('Cannot record touch move without a touch start.\\n', \"Touch Move: \" + printTouch(touch) + \"\\n\", \"Touch Bank: \" + printTouchBank());\n  }\n}\n\nfunction recordTouchEnd(touch) {\n  var touchRecord = touchBank[getTouchIdentifier(touch)];\n\n  if (touchRecord) {\n    touchRecord.touchActive = false;\n    touchRecord.previousPageX = touchRecord.currentPageX;\n    touchRecord.previousPageY = touchRecord.currentPageY;\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n    touchRecord.currentPageX = touch.pageX;\n    touchRecord.currentPageY = touch.pageY;\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n  } else {\n    console.warn('Cannot record touch end without a touch start.\\n', \"Touch End: \" + printTouch(touch) + \"\\n\", \"Touch Bank: \" + printTouchBank());\n  }\n}\n\nfunction printTouch(touch) {\n  return JSON.stringify({\n    identifier: touch.identifier,\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    timestamp: timestampForTouch(touch)\n  });\n}\n\nfunction printTouchBank() {\n  var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));\n\n  if (touchBank.length > MAX_TOUCH_BANK) {\n    printed += ' (original size: ' + touchBank.length + ')';\n  }\n\n  return printed;\n}\n\nvar ResponderTouchHistoryStore = {\n  recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {\n    if (isMoveish(topLevelType)) {\n      nativeEvent.changedTouches.forEach(recordTouchMove);\n    } else if (isStartish(topLevelType)) {\n      nativeEvent.changedTouches.forEach(recordTouchStart);\n      touchHistory.numberActiveTouches = nativeEvent.touches.length;\n\n      if (touchHistory.numberActiveTouches === 1) {\n        touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;\n      }\n    } else if (isEndish(topLevelType)) {\n      nativeEvent.changedTouches.forEach(recordTouchEnd);\n      touchHistory.numberActiveTouches = nativeEvent.touches.length;\n\n      if (touchHistory.numberActiveTouches === 1) {\n        for (var i = 0; i < touchBank.length; i++) {\n          var touchTrackToCheck = touchBank[i];\n\n          if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {\n            touchHistory.indexOfSingleActiveTouch = i;\n            break;\n          }\n        }\n\n        if (__DEV__) {\n          var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];\n\n          if (!(activeRecord != null && activeRecord.touchActive)) {\n            console.error('Cannot find single active touch.');\n          }\n        }\n      }\n    }\n  },\n  touchHistory: touchHistory\n};\nexport default ResponderTouchHistoryStore;","map":{"version":3,"sources":["/Users/garethcozens/Documents/repo/cloudratha/react-native-web-nx-demo/node_modules/react-native-web/dist/modules/useResponderEvents/ResponderTouchHistoryStore.js"],"names":["__DEV__","MAX_TOUCH_BANK","touchBank","touchHistory","numberActiveTouches","indexOfSingleActiveTouch","mostRecentTimeStamp","touch","touchActive","startPageX","startPageY","startTimeStamp","timestampForTouch","currentPageX","currentPageY","currentTimeStamp","previousPageX","previousPageY","previousTimeStamp","touchRecord","identifier","_ref","console","getTouchIdentifier","resetTouchRecord","createTouchRecord","printTouch","printTouchBank","JSON","pageX","pageY","timestamp","printed","ResponderTouchHistoryStore","recordTouchTrack","isMoveish","nativeEvent","isStartish","isEndish","i","touchTrackToCheck","activeRecord"],"mappings":"AAQA,SAAA,UAAA,EAAA,SAAA,EAAA,QAAA;AAOA,IAAIA,OAAO,GAAX,IAAA;AAEA,IAAIC,cAAc,GAAlB,EAAA;AACA,IAAIC,SAAS,GAAb,EAAA;AACA,IAAIC,YAAY,GAAG;AACjBD,EAAAA,SAAS,EADQ,SAAA;AAEjBE,EAAAA,mBAAmB,EAFF,CAAA;AAMjBC,EAAAA,wBAAwB,EAAE,CANT,CAAA;AAOjBC,EAAAA,mBAAmB,EAPrB;AAAmB,CAAnB;;AAUA,SAAA,iBAAA,CAAA,KAAA,EAAkC;AAGhC,SAAOC,KAAK,CAALA,SAAAA,IAAmBA,KAAK,CAA/B,SAAA;AAQF;;AAAA,SAAA,iBAAA,CAAA,KAAA,EAAkC;AAChC,SAAO;AACLC,IAAAA,WAAW,EADN,IAAA;AAELC,IAAAA,UAAU,EAAEF,KAAK,CAFZ,KAAA;AAGLG,IAAAA,UAAU,EAAEH,KAAK,CAHZ,KAAA;AAILI,IAAAA,cAAc,EAAEC,iBAAiB,CAJ5B,KAI4B,CAJ5B;AAKLC,IAAAA,YAAY,EAAEN,KAAK,CALd,KAAA;AAMLO,IAAAA,YAAY,EAAEP,KAAK,CANd,KAAA;AAOLQ,IAAAA,gBAAgB,EAAEH,iBAAiB,CAP9B,KAO8B,CAP9B;AAQLI,IAAAA,aAAa,EAAET,KAAK,CARf,KAAA;AASLU,IAAAA,aAAa,EAAEV,KAAK,CATf,KAAA;AAULW,IAAAA,iBAAiB,EAAEN,iBAAiB,CAVtC,KAUsC;AAV/B,GAAP;AAcF;;AAAA,SAAA,gBAAA,CAAA,WAAA,EAAA,KAAA,EAA8C;AAC5CO,EAAAA,WAAW,CAAXA,WAAAA,GAAAA,IAAAA;AACAA,EAAAA,WAAW,CAAXA,UAAAA,GAAyBZ,KAAK,CAA9BY,KAAAA;AACAA,EAAAA,WAAW,CAAXA,UAAAA,GAAyBZ,KAAK,CAA9BY,KAAAA;AACAA,EAAAA,WAAW,CAAXA,cAAAA,GAA6BP,iBAAiB,CAA9CO,KAA8C,CAA9CA;AACAA,EAAAA,WAAW,CAAXA,YAAAA,GAA2BZ,KAAK,CAAhCY,KAAAA;AACAA,EAAAA,WAAW,CAAXA,YAAAA,GAA2BZ,KAAK,CAAhCY,KAAAA;AACAA,EAAAA,WAAW,CAAXA,gBAAAA,GAA+BP,iBAAiB,CAAhDO,KAAgD,CAAhDA;AACAA,EAAAA,WAAW,CAAXA,aAAAA,GAA4BZ,KAAK,CAAjCY,KAAAA;AACAA,EAAAA,WAAW,CAAXA,aAAAA,GAA4BZ,KAAK,CAAjCY,KAAAA;AACAA,EAAAA,WAAW,CAAXA,iBAAAA,GAAgCP,iBAAiB,CAAjDO,KAAiD,CAAjDA;AAGF;;AAAA,SAAA,kBAAA,CAAA,IAAA,EAAkC;AAChC,MAAIC,UAAU,GAAGC,IAAI,CAArB,UAAA;;AAEA,MAAID,UAAU,IAAd,IAAA,EAAwB;AACtBE,IAAAA,OAAO,CAAPA,KAAAA,CAAAA,qCAAAA;AAGF;;AAAA,MAAA,OAAA,EAAa;AACX,QAAIF,UAAU,GAAd,cAAA,EAAiC;AAC/BE,MAAAA,OAAO,CAAPA,KAAAA,CAAc,2EAAdA,wEAAAA,EAAAA,UAAAA,EAAAA,cAAAA;AAEH;AAED;;AAAA,SAAA,UAAA;AAGF;;AAAA,SAAA,gBAAA,CAAA,KAAA,EAAiC;AAC/B,MAAIF,UAAU,GAAGG,kBAAkB,CAAnC,KAAmC,CAAnC;AACA,MAAIJ,WAAW,GAAGjB,SAAS,CAA3B,UAA2B,CAA3B;;AAEA,MAAA,WAAA,EAAiB;AACfsB,IAAAA,gBAAgB,CAAA,WAAA,EAAhBA,KAAgB,CAAhBA;AADF,GAAA,MAEO;AACLtB,IAAAA,SAAS,CAATA,UAAS,CAATA,GAAwBuB,iBAAiB,CAAzCvB,KAAyC,CAAzCA;AAGFC;;AAAAA,EAAAA,YAAY,CAAZA,mBAAAA,GAAmCS,iBAAiB,CAApDT,KAAoD,CAApDA;AAGF;;AAAA,SAAA,eAAA,CAAA,KAAA,EAAgC;AAC9B,MAAIgB,WAAW,GAAGjB,SAAS,CAACqB,kBAAkB,CAA9C,KAA8C,CAAnB,CAA3B;;AAEA,MAAA,WAAA,EAAiB;AACfJ,IAAAA,WAAW,CAAXA,WAAAA,GAAAA,IAAAA;AACAA,IAAAA,WAAW,CAAXA,aAAAA,GAA4BA,WAAW,CAAvCA,YAAAA;AACAA,IAAAA,WAAW,CAAXA,aAAAA,GAA4BA,WAAW,CAAvCA,YAAAA;AACAA,IAAAA,WAAW,CAAXA,iBAAAA,GAAgCA,WAAW,CAA3CA,gBAAAA;AACAA,IAAAA,WAAW,CAAXA,YAAAA,GAA2BZ,KAAK,CAAhCY,KAAAA;AACAA,IAAAA,WAAW,CAAXA,YAAAA,GAA2BZ,KAAK,CAAhCY,KAAAA;AACAA,IAAAA,WAAW,CAAXA,gBAAAA,GAA+BP,iBAAiB,CAAhDO,KAAgD,CAAhDA;AACAhB,IAAAA,YAAY,CAAZA,mBAAAA,GAAmCS,iBAAiB,CAApDT,KAAoD,CAApDA;AARF,GAAA,MASO;AACLmB,IAAAA,OAAO,CAAPA,IAAAA,CAAAA,mDAAAA,EAAkE,iBAAiBI,UAAU,CAA3B,KAA2B,CAA3B,GAAlEJ,IAAAA,EAA6G,iBAAiBK,cAA9HL,EAAAA;AAEH;AAED;;AAAA,SAAA,cAAA,CAAA,KAAA,EAA+B;AAC7B,MAAIH,WAAW,GAAGjB,SAAS,CAACqB,kBAAkB,CAA9C,KAA8C,CAAnB,CAA3B;;AAEA,MAAA,WAAA,EAAiB;AACfJ,IAAAA,WAAW,CAAXA,WAAAA,GAAAA,KAAAA;AACAA,IAAAA,WAAW,CAAXA,aAAAA,GAA4BA,WAAW,CAAvCA,YAAAA;AACAA,IAAAA,WAAW,CAAXA,aAAAA,GAA4BA,WAAW,CAAvCA,YAAAA;AACAA,IAAAA,WAAW,CAAXA,iBAAAA,GAAgCA,WAAW,CAA3CA,gBAAAA;AACAA,IAAAA,WAAW,CAAXA,YAAAA,GAA2BZ,KAAK,CAAhCY,KAAAA;AACAA,IAAAA,WAAW,CAAXA,YAAAA,GAA2BZ,KAAK,CAAhCY,KAAAA;AACAA,IAAAA,WAAW,CAAXA,gBAAAA,GAA+BP,iBAAiB,CAAhDO,KAAgD,CAAhDA;AACAhB,IAAAA,YAAY,CAAZA,mBAAAA,GAAmCS,iBAAiB,CAApDT,KAAoD,CAApDA;AARF,GAAA,MASO;AACLmB,IAAAA,OAAO,CAAPA,IAAAA,CAAAA,kDAAAA,EAAiE,gBAAgBI,UAAU,CAA1B,KAA0B,CAA1B,GAAjEJ,IAAAA,EAA2G,iBAAiBK,cAA5HL,EAAAA;AAEH;AAED;;AAAA,SAAA,UAAA,CAAA,KAAA,EAA2B;AACzB,SAAOM,IAAI,CAAJA,SAAAA,CAAe;AACpBR,IAAAA,UAAU,EAAEb,KAAK,CADG,UAAA;AAEpBsB,IAAAA,KAAK,EAAEtB,KAAK,CAFQ,KAAA;AAGpBuB,IAAAA,KAAK,EAAEvB,KAAK,CAHQ,KAAA;AAIpBwB,IAAAA,SAAS,EAAEnB,iBAAiB,CAJ9B,KAI8B;AAJR,GAAfgB,CAAP;AAQF;;AAAA,SAAA,cAAA,GAA0B;AACxB,MAAII,OAAO,GAAGJ,IAAI,CAAJA,SAAAA,CAAe1B,SAAS,CAATA,KAAAA,CAAAA,CAAAA,EAA7B,cAA6BA,CAAf0B,CAAd;;AAEA,MAAI1B,SAAS,CAATA,MAAAA,GAAJ,cAAA,EAAuC;AACrC8B,IAAAA,OAAO,IAAI,sBAAsB9B,SAAS,CAA/B,MAAA,GAAX8B,GAAAA;AAGF;;AAAA,SAAA,OAAA;AAGF;;AAAA,IAAIC,0BAA0B,GAAG;AAC/BC,EAAAA,gBAAgB,EAAE,SAAA,gBAAA,CAAA,YAAA,EAAA,WAAA,EAAqD;AACrE,QAAIC,SAAS,CAAb,YAAa,CAAb,EAA6B;AAC3BC,MAAAA,WAAW,CAAXA,cAAAA,CAAAA,OAAAA,CAAAA,eAAAA;AADF,KAAA,MAEO,IAAIC,UAAU,CAAd,YAAc,CAAd,EAA8B;AACnCD,MAAAA,WAAW,CAAXA,cAAAA,CAAAA,OAAAA,CAAAA,gBAAAA;AACAjC,MAAAA,YAAY,CAAZA,mBAAAA,GAAmCiC,WAAW,CAAXA,OAAAA,CAAnCjC,MAAAA;;AAEA,UAAIA,YAAY,CAAZA,mBAAAA,KAAJ,CAAA,EAA4C;AAC1CA,QAAAA,YAAY,CAAZA,wBAAAA,GAAwCiC,WAAW,CAAXA,OAAAA,CAAAA,CAAAA,EAAxCjC,UAAAA;AAEH;AAPM,KAAA,MAOA,IAAImC,QAAQ,CAAZ,YAAY,CAAZ,EAA4B;AACjCF,MAAAA,WAAW,CAAXA,cAAAA,CAAAA,OAAAA,CAAAA,cAAAA;AACAjC,MAAAA,YAAY,CAAZA,mBAAAA,GAAmCiC,WAAW,CAAXA,OAAAA,CAAnCjC,MAAAA;;AAEA,UAAIA,YAAY,CAAZA,mBAAAA,KAAJ,CAAA,EAA4C;AAC1C,aAAK,IAAIoC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGrC,SAAS,CAA7B,MAAA,EAAsCqC,CAAtC,EAAA,EAA2C;AACzC,cAAIC,iBAAiB,GAAGtC,SAAS,CAAjC,CAAiC,CAAjC;;AAEA,cAAIsC,iBAAiB,IAAjBA,IAAAA,IAA6BA,iBAAiB,CAAlD,WAAA,EAAgE;AAC9DrC,YAAAA,YAAY,CAAZA,wBAAAA,GAAAA,CAAAA;AACA;AAEH;AAED;;AAAA,YAAA,OAAA,EAAa;AACX,cAAIsC,YAAY,GAAGvC,SAAS,CAACC,YAAY,CAAzC,wBAA4B,CAA5B;;AAEA,cAAI,EAAEsC,YAAY,IAAZA,IAAAA,IAAwBA,YAAY,CAA1C,WAAI,CAAJ,EAAyD;AACvDnB,YAAAA,OAAO,CAAPA,KAAAA,CAAAA,kCAAAA;AAEH;AACF;AACF;AACF;AAlC8B,GAAA;AAmC/BnB,EAAAA,YAAY,EAnCd;AAAiC,CAAjC;AAqCA,eAAA,0BAAA","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { isStartish, isMoveish, isEndish } from './ResponderEventTypes';\n\n/**\n * Tracks the position and time of each active touch by `touch.identifier`. We\n * should typically only see IDs in the range of 1-20 because IDs get recycled\n * when touches end and start again.\n */\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar MAX_TOUCH_BANK = 20;\nvar touchBank = [];\nvar touchHistory = {\n  touchBank: touchBank,\n  numberActiveTouches: 0,\n  // If there is only one active touch, we remember its location. This prevents\n  // us having to loop through all of the touches all the time in the most\n  // common case.\n  indexOfSingleActiveTouch: -1,\n  mostRecentTimeStamp: 0\n};\n\nfunction timestampForTouch(touch) {\n  // The legacy internal implementation provides \"timeStamp\", which has been\n  // renamed to \"timestamp\".\n  return touch.timeStamp || touch.timestamp;\n}\n/**\n * TODO: Instead of making gestures recompute filtered velocity, we could\n * include a built in velocity computation that can be reused globally.\n */\n\n\nfunction createTouchRecord(touch) {\n  return {\n    touchActive: true,\n    startPageX: touch.pageX,\n    startPageY: touch.pageY,\n    startTimeStamp: timestampForTouch(touch),\n    currentPageX: touch.pageX,\n    currentPageY: touch.pageY,\n    currentTimeStamp: timestampForTouch(touch),\n    previousPageX: touch.pageX,\n    previousPageY: touch.pageY,\n    previousTimeStamp: timestampForTouch(touch)\n  };\n}\n\nfunction resetTouchRecord(touchRecord, touch) {\n  touchRecord.touchActive = true;\n  touchRecord.startPageX = touch.pageX;\n  touchRecord.startPageY = touch.pageY;\n  touchRecord.startTimeStamp = timestampForTouch(touch);\n  touchRecord.currentPageX = touch.pageX;\n  touchRecord.currentPageY = touch.pageY;\n  touchRecord.currentTimeStamp = timestampForTouch(touch);\n  touchRecord.previousPageX = touch.pageX;\n  touchRecord.previousPageY = touch.pageY;\n  touchRecord.previousTimeStamp = timestampForTouch(touch);\n}\n\nfunction getTouchIdentifier(_ref) {\n  var identifier = _ref.identifier;\n\n  if (identifier == null) {\n    console.error('Touch object is missing identifier.');\n  }\n\n  if (__DEV__) {\n    if (identifier > MAX_TOUCH_BANK) {\n      console.error('Touch identifier %s is greater than maximum supported %s which causes ' + 'performance issues backfilling array locations for all of the indices.', identifier, MAX_TOUCH_BANK);\n    }\n  }\n\n  return identifier;\n}\n\nfunction recordTouchStart(touch) {\n  var identifier = getTouchIdentifier(touch);\n  var touchRecord = touchBank[identifier];\n\n  if (touchRecord) {\n    resetTouchRecord(touchRecord, touch);\n  } else {\n    touchBank[identifier] = createTouchRecord(touch);\n  }\n\n  touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n}\n\nfunction recordTouchMove(touch) {\n  var touchRecord = touchBank[getTouchIdentifier(touch)];\n\n  if (touchRecord) {\n    touchRecord.touchActive = true;\n    touchRecord.previousPageX = touchRecord.currentPageX;\n    touchRecord.previousPageY = touchRecord.currentPageY;\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n    touchRecord.currentPageX = touch.pageX;\n    touchRecord.currentPageY = touch.pageY;\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n  } else {\n    console.warn('Cannot record touch move without a touch start.\\n', \"Touch Move: \" + printTouch(touch) + \"\\n\", \"Touch Bank: \" + printTouchBank());\n  }\n}\n\nfunction recordTouchEnd(touch) {\n  var touchRecord = touchBank[getTouchIdentifier(touch)];\n\n  if (touchRecord) {\n    touchRecord.touchActive = false;\n    touchRecord.previousPageX = touchRecord.currentPageX;\n    touchRecord.previousPageY = touchRecord.currentPageY;\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n    touchRecord.currentPageX = touch.pageX;\n    touchRecord.currentPageY = touch.pageY;\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n  } else {\n    console.warn('Cannot record touch end without a touch start.\\n', \"Touch End: \" + printTouch(touch) + \"\\n\", \"Touch Bank: \" + printTouchBank());\n  }\n}\n\nfunction printTouch(touch) {\n  return JSON.stringify({\n    identifier: touch.identifier,\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    timestamp: timestampForTouch(touch)\n  });\n}\n\nfunction printTouchBank() {\n  var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));\n\n  if (touchBank.length > MAX_TOUCH_BANK) {\n    printed += ' (original size: ' + touchBank.length + ')';\n  }\n\n  return printed;\n}\n\nvar ResponderTouchHistoryStore = {\n  recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {\n    if (isMoveish(topLevelType)) {\n      nativeEvent.changedTouches.forEach(recordTouchMove);\n    } else if (isStartish(topLevelType)) {\n      nativeEvent.changedTouches.forEach(recordTouchStart);\n      touchHistory.numberActiveTouches = nativeEvent.touches.length;\n\n      if (touchHistory.numberActiveTouches === 1) {\n        touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;\n      }\n    } else if (isEndish(topLevelType)) {\n      nativeEvent.changedTouches.forEach(recordTouchEnd);\n      touchHistory.numberActiveTouches = nativeEvent.touches.length;\n\n      if (touchHistory.numberActiveTouches === 1) {\n        for (var i = 0; i < touchBank.length; i++) {\n          var touchTrackToCheck = touchBank[i];\n\n          if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {\n            touchHistory.indexOfSingleActiveTouch = i;\n            break;\n          }\n        }\n\n        if (__DEV__) {\n          var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];\n\n          if (!(activeRecord != null && activeRecord.touchActive)) {\n            console.error('Cannot find single active touch.');\n          }\n        }\n      }\n    }\n  },\n  touchHistory: touchHistory\n};\nexport default ResponderTouchHistoryStore;"]},"metadata":{},"sourceType":"module"}