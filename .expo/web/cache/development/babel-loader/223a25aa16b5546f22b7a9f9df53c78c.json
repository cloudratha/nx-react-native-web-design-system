{"ast":null,"code":"function murmurhash2_32_gc(str, seed) {\n  var l = str.length,\n      h = seed ^ l,\n      i = 0,\n      k;\n\n  while (l >= 4) {\n    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;\n    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n    k ^= k >>> 24;\n    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n    h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16) ^ k;\n    l -= 4;\n    ++i;\n  }\n\n  switch (l) {\n    case 3:\n      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;\n\n    case 2:\n      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;\n\n    case 1:\n      h ^= str.charCodeAt(i) & 0xff;\n      h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n  }\n\n  h ^= h >>> 13;\n  h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n  h ^= h >>> 15;\n  return h >>> 0;\n}\n\nvar hash = function hash(str) {\n  return murmurhash2_32_gc(str, 1).toString(36);\n};\n\nexport default hash;\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/Users/garethcozens/Documents/repo/cloudratha/react-native-web-nx-demo/node_modules/react-native-web/dist/vendor/hash/index.js"],"names":["l","str","h","seed","i","k","hash","murmurhash2_32_gc"],"mappings":"AAgBA,SAAA,iBAAA,CAAA,GAAA,EAAA,IAAA,EAAsC;AACpC,MAAIA,CAAC,GAAGC,GAAG,CAAX,MAAA;AAAA,MACIC,CAAC,GAAGC,IAAI,GADZ,CAAA;AAAA,MAEIC,CAAC,GAFL,CAAA;AAAA,MAAA,CAAA;;AAKA,SAAOJ,CAAC,IAAR,CAAA,EAAe;AACbK,IAAAA,CAAC,GAAGJ,GAAG,CAAHA,UAAAA,CAAAA,CAAAA,IAAAA,IAAAA,GAA2B,CAACA,GAAG,CAAHA,UAAAA,CAAe,EAAfA,CAAAA,IAAD,IAAA,KAA3BA,CAAAA,GAA+D,CAACA,GAAG,CAAHA,UAAAA,CAAe,EAAfA,CAAAA,IAAD,IAAA,KAA/DA,EAAAA,GAAoG,CAACA,GAAG,CAAHA,UAAAA,CAAe,EAAfA,CAAAA,IAAD,IAAA,KAAxGI,EAAAA;AACAA,IAAAA,CAAC,GAAG,CAACA,CAAC,GAAF,MAAA,IAAA,UAAA,IAA6B,CAAC,CAACA,CAAC,KAAF,EAAA,IAAA,UAAA,GAAD,MAAA,KAAjCA,EAAI,CAAJA;AACAA,IAAAA,CAAC,IAAIA,CAAC,KAANA,EAAAA;AACAA,IAAAA,CAAC,GAAG,CAACA,CAAC,GAAF,MAAA,IAAA,UAAA,IAA6B,CAAC,CAACA,CAAC,KAAF,EAAA,IAAA,UAAA,GAAD,MAAA,KAAjCA,EAAI,CAAJA;AACAH,IAAAA,CAAC,GAAG,CAACA,CAAC,GAAF,MAAA,IAAA,UAAA,IAA6B,CAAC,CAACA,CAAC,KAAF,EAAA,IAAA,UAAA,GAAD,MAAA,KAA7B,EAAA,IAAJA,CAAAA;AACAF,IAAAA,CAAC,IAADA,CAAAA;AACA,MAAA,CAAA;AAGF;;AAAA,UAAA,CAAA;AACE,SAAA,CAAA;AACEE,MAAAA,CAAC,IAAI,CAACD,GAAG,CAAHA,UAAAA,CAAeG,CAAC,GAAhBH,CAAAA,IAAD,IAAA,KAALC,EAAAA;;AAEF,SAAA,CAAA;AACEA,MAAAA,CAAC,IAAI,CAACD,GAAG,CAAHA,UAAAA,CAAeG,CAAC,GAAhBH,CAAAA,IAAD,IAAA,KAALC,CAAAA;;AAEF,SAAA,CAAA;AACEA,MAAAA,CAAC,IAAID,GAAG,CAAHA,UAAAA,CAAAA,CAAAA,IAALC,IAAAA;AACAA,MAAAA,CAAC,GAAG,CAACA,CAAC,GAAF,MAAA,IAAA,UAAA,IAA6B,CAAC,CAACA,CAAC,KAAF,EAAA,IAAA,UAAA,GAAD,MAAA,KATrC,EASQ,CAAJA;AATJ;;AAYAA,EAAAA,CAAC,IAAIA,CAAC,KAANA,EAAAA;AACAA,EAAAA,CAAC,GAAG,CAACA,CAAC,GAAF,MAAA,IAAA,UAAA,IAA6B,CAAC,CAACA,CAAC,KAAF,EAAA,IAAA,UAAA,GAAD,MAAA,KAAjCA,EAAI,CAAJA;AACAA,EAAAA,CAAC,IAAIA,CAAC,KAANA,EAAAA;AACA,SAAOA,CAAC,KAAR,CAAA;AAGF;;AAAA,IAAII,IAAI,GAAG,SAAA,IAAA,CAAA,GAAA,EAAmB;AAC5B,SAAOC,iBAAiB,CAAA,GAAA,EAAjBA,CAAiB,CAAjBA,CAAAA,QAAAA,CAAP,EAAOA,CAAP;AADF,CAAA;;AAIA,eAAA,IAAA","sourcesContent":["/* eslint-disable */\n\n/**\n * JS Implementation of MurmurHash2\n *\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/murmurhash-js\n * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n * @see http://sites.google.com/site/murmurhash/\n *\n * @param {string} str ASCII only\n * @param {number} seed Positive integer only\n * @return {number} 32-bit positive integer hash\n *\n * \n */\nfunction murmurhash2_32_gc(str, seed) {\n  var l = str.length,\n      h = seed ^ l,\n      i = 0,\n      k;\n\n  while (l >= 4) {\n    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;\n    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n    k ^= k >>> 24;\n    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n    h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16) ^ k;\n    l -= 4;\n    ++i;\n  }\n\n  switch (l) {\n    case 3:\n      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;\n\n    case 2:\n      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;\n\n    case 1:\n      h ^= str.charCodeAt(i) & 0xff;\n      h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n  }\n\n  h ^= h >>> 13;\n  h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n  h ^= h >>> 15;\n  return h >>> 0;\n}\n\nvar hash = function hash(str) {\n  return murmurhash2_32_gc(str, 1).toString(36);\n};\n\nexport default hash;"]},"metadata":{},"sourceType":"module"}