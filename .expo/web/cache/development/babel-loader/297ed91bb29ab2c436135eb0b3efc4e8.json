{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useBackHandler = useBackHandler;\nexports.useKeyboardDismissable = exports.keyboardDismissHandlerManager = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar keyboardDismissHandlers = [];\nvar keyboardDismissHandlerManager = {\n  push: function push(handler) {\n    keyboardDismissHandlers.push(handler);\n    return function () {\n      keyboardDismissHandlers = keyboardDismissHandlers.filter(function (h) {\n        return h !== handler;\n      });\n    };\n  },\n  length: function length() {\n    return keyboardDismissHandlers.length;\n  },\n  pop: function pop() {\n    return keyboardDismissHandlers.pop();\n  }\n};\nexports.keyboardDismissHandlerManager = keyboardDismissHandlerManager;\n\nvar useKeyboardDismissable = function useKeyboardDismissable(_ref) {\n  var enabled = _ref.enabled,\n      callback = _ref.callback;\n\n  _react.default.useEffect(function () {\n    var cleanupFn = function cleanupFn() {};\n\n    if (enabled) {\n      cleanupFn = keyboardDismissHandlerManager.push(callback);\n    } else {\n      cleanupFn();\n    }\n\n    return function () {\n      cleanupFn();\n    };\n  }, [enabled, callback]);\n\n  useBackHandler({\n    enabled: enabled,\n    callback: callback\n  });\n};\n\nexports.useKeyboardDismissable = useKeyboardDismissable;\n\nfunction useBackHandler(_ref2) {\n  var enabled = _ref2.enabled,\n      callback = _ref2.callback;\n  (0, _react.useEffect)(function () {\n    var backHandler = function backHandler() {\n      callback();\n      return true;\n    };\n\n    if (enabled) {\n      _reactNative.BackHandler.addEventListener('hardwareBackPress', backHandler);\n    } else {\n      _reactNative.BackHandler.removeEventListener('hardwareBackPress', backHandler);\n    }\n\n    return function () {\n      return _reactNative.BackHandler.removeEventListener('hardwareBackPress', backHandler);\n    };\n  }, [enabled, callback]);\n}","map":{"version":3,"sources":["/Users/garethcozens/Documents/repo/cloudratha/react-native-web-nx-demo/node_modules/native-base/lib/commonjs/hooks/useKeyboardDismissable.js"],"names":["_interopRequireWildcard","require","Object","value","exports","_react","keyboardDismissHandlers","keyboardDismissHandlerManager","push","h","length","pop","useKeyboardDismissable","enabled","_ref","callback","cleanupFn","useBackHandler","_ref2","backHandler","_reactNative"],"mappings":"AAAA,IAAIA,uBAAuB,GAACC,OAAO,CAAnC,+CAAmC,CAAnC;;AAAqFC,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,YAAAA,EAA2C;AAACC,EAAAA,KAAK,EAAjDD;AAA2C,CAA3CA;AAAyDE,OAAO,CAAPA,cAAAA,GAAAA,cAAAA;AAAsCA,OAAO,CAAPA,sBAAAA,GAA+BA,OAAO,CAAPA,6BAAAA,GAAsC,KAArEA,CAAAA;;AAA4E,IAAIC,MAAM,GAACL,uBAAuB,CAACC,OAAO,CAA1C,OAA0C,CAAR,CAAlC;;;;AAA8F,IAAIK,uBAAuB,GAA3B,EAAA;AAA+B,IAAIC,6BAA6B,GAAC;AAACC,EAAAA,IAAI,EAAC,SAAA,IAAA,CAAA,OAAA,EAAsB;AAACF,IAAAA,uBAAuB,CAAvBA,IAAAA,CAAAA,OAAAA;AAAsC,WAAO,YAAU;AAACA,MAAAA,uBAAuB,GAACA,uBAAuB,CAAvBA,MAAAA,CAA+B,UAAA,CAAA,EAAW;AAAC,eAAOG,CAAC,KAAR,OAAA;AAAnEH,OAAwBA,CAAxBA;AAAlB,KAAA;AAAnE,GAAA;AAAkLI,EAAAA,MAAM,EAAC,SAAA,MAAA,GAAiB;AAAC,WAAOJ,uBAAuB,CAA9B,MAAA;AAA3M,GAAA;AAAmPK,EAAAA,GAAG,EAAC,SAAA,GAAA,GAAc;AAAC,WAAOL,uBAAuB,CAA9B,GAAOA,EAAP;AAAxS;AAAkC,CAAlC;AAAgVF,OAAO,CAAPA,6BAAAA,GAAAA,6BAAAA;;AAAoE,IAAIQ,sBAAsB,GAAC,SAAA,sBAAA,CAAA,IAAA,EAAqC;AAAC,MAAIC,OAAO,GAACC,IAAI,CAAhB,OAAA;AAAA,MAAyBC,QAAQ,GAACD,IAAI,CAAtC,QAAA;;AAAgDT,EAAAA,MAAM,CAANA,OAAAA,CAAAA,SAAAA,CAAyB,YAAU;AAAC,QAAIW,SAAS,GAAC,SAAA,SAAA,GAAoB,CAAlC,CAAA;;AAAqC,QAAA,OAAA,EAAW;AAACA,MAAAA,SAAS,GAACT,6BAA6B,CAA7BA,IAAAA,CAAVS,QAAUT,CAAVS;AAAZ,KAAA,MAAwE;AAACA,MAAAA,SAAS;AAAI;;AAAA,WAAO,YAAU;AAACA,MAAAA,SAAS;AAA3B,KAAA;AAA/JX,GAAAA,EAAiM,CAAA,OAAA,EAAjMA,QAAiM,CAAjMA;;AAAqNY,EAAAA,cAAc,CAAC;AAACJ,IAAAA,OAAO,EAAR,OAAA;AAAiBE,IAAAA,QAAQ,EAAxCE;AAAe,GAAD,CAAdA;AAAtU,CAAA;;AAA4Xb,OAAO,CAAPA,sBAAAA,GAAAA,sBAAAA;;AAAsD,SAAA,cAAA,CAAA,KAAA,EAA8B;AAAC,MAAIS,OAAO,GAACK,KAAK,CAAjB,OAAA;AAAA,MAA0BH,QAAQ,GAACG,KAAK,CAAxC,QAAA;AAAkD,GAAC,GAAEb,MAAM,CAAT,SAAA,EAAqB,YAAU;AAAC,QAAIc,WAAW,GAAC,SAAA,WAAA,GAAsB;AAACJ,MAAAA,QAAQ;AAAG,aAAA,IAAA;AAAlD,KAAA;;AAAgE,QAAA,OAAA,EAAW;AAACK,MAAAA,YAAY,CAAZA,WAAAA,CAAAA,gBAAAA,CAAAA,mBAAAA,EAAAA,WAAAA;AAAZ,KAAA,MAA4F;AAACA,MAAAA,YAAY,CAAZA,WAAAA,CAAAA,mBAAAA,CAAAA,mBAAAA,EAAAA,WAAAA;AAA+E;;AAAA,WAAO,YAAU;AAAC,aAAOA,YAAY,CAAZA,WAAAA,CAAAA,mBAAAA,CAAAA,mBAAAA,EAAP,WAAOA,CAAP;AAAlB,KAAA;AAA5Q,GAAA,EAAuX,CAAA,OAAA,EAAvX,QAAuX,CAAvX;AAA4Y","sourcesContent":["var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.useBackHandler=useBackHandler;exports.useKeyboardDismissable=exports.keyboardDismissHandlerManager=void 0;var _react=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var keyboardDismissHandlers=[];var keyboardDismissHandlerManager={push:function push(handler){keyboardDismissHandlers.push(handler);return function(){keyboardDismissHandlers=keyboardDismissHandlers.filter(function(h){return h!==handler;});};},length:function length(){return keyboardDismissHandlers.length;},pop:function pop(){return keyboardDismissHandlers.pop();}};exports.keyboardDismissHandlerManager=keyboardDismissHandlerManager;var useKeyboardDismissable=function useKeyboardDismissable(_ref){var enabled=_ref.enabled,callback=_ref.callback;_react.default.useEffect(function(){var cleanupFn=function cleanupFn(){};if(enabled){cleanupFn=keyboardDismissHandlerManager.push(callback);}else{cleanupFn();}return function(){cleanupFn();};},[enabled,callback]);useBackHandler({enabled:enabled,callback:callback});};exports.useKeyboardDismissable=useKeyboardDismissable;function useBackHandler(_ref2){var enabled=_ref2.enabled,callback=_ref2.callback;(0,_react.useEffect)(function(){var backHandler=function backHandler(){callback();return true;};if(enabled){_reactNative.BackHandler.addEventListener('hardwareBackPress',backHandler);}else{_reactNative.BackHandler.removeEventListener('hardwareBackPress',backHandler);}return function(){return _reactNative.BackHandler.removeEventListener('hardwareBackPress',backHandler);};},[enabled,callback]);}\n//# sourceMappingURL=useKeyboardDismissable.js.map"]},"metadata":{},"sourceType":"script"}