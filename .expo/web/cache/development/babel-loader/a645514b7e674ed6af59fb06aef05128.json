{"ast":null,"code":"import invariant from 'fbjs/lib/invariant';\nimport EmitterSubscription from \"./_EmitterSubscription\";\nimport EventSubscriptionVendor from \"./_EventSubscriptionVendor\";\n\nvar sparseFilterPredicate = function sparseFilterPredicate() {\n  return true;\n};\n\nvar EventEmitter = function () {\n  function EventEmitter(subscriber) {\n    this._subscriber = subscriber || new EventSubscriptionVendor();\n  }\n\n  var _proto = EventEmitter.prototype;\n\n  _proto.addListener = function addListener(eventType, listener, context) {\n    return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));\n  };\n\n  _proto.removeAllListeners = function removeAllListeners(eventType) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  };\n\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n\n    this._subscriber.removeSubscription(subscription);\n  };\n\n  _proto.listenerCount = function listenerCount(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    return subscriptions ? subscriptions.filter(sparseFilterPredicate).length : 0;\n  };\n\n  _proto.emit = function emit(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i];\n\n        if (subscription && subscription.listener) {\n          subscription.listener.apply(subscription.context, args);\n        }\n      }\n    }\n  };\n\n  _proto.removeListener = function removeListener(eventType, listener) {\n    console.error(\"EventEmitter.removeListener('\" + eventType + \"', ...): Method has been \" + 'deprecated. Please instead use `remove()` on the subscription ' + 'returned by `EventEmitter.addListener`.');\n\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i];\n\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  };\n\n  return EventEmitter;\n}();\n\nexport default EventEmitter;\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/Users/garethcozens/Documents/repo/cloudratha/react-native-web-nx-demo/node_modules/react-native-web/dist/vendor/react-native/emitter/_EventEmitter.js"],"names":["sparseFilterPredicate","EventEmitter","subscriber","_proto","invariant","subscription","subscriptions","_len","arguments","args","_key","i","l","console"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @typecheck\n */\nimport invariant from 'fbjs/lib/invariant';\nimport EmitterSubscription from './_EmitterSubscription';\nimport EventSubscriptionVendor from './_EventSubscriptionVendor';\n\nvar sparseFilterPredicate = function sparseFilterPredicate() {\n  return true;\n};\n\n/**\n * @class EventEmitter\n * @description\n * An EventEmitter is responsible for managing a set of listeners and publishing\n * events to them when it is told that such events happened. In addition to the\n * data for the given event it also sends a event control object which allows\n * the listeners/handlers to prevent the default behavior of the given event.\n *\n * The emitter is designed to be generic enough to support all the different\n * contexts in which one might want to emit events. It is a simple multicast\n * mechanism on top of which extra functionality can be composed. For example, a\n * more advanced emitter may use an EventHolder and EventFactory.\n */\nvar EventEmitter = /*#__PURE__*/function () {\n  /**\n   * @constructor\n   *\n   * @param {EventSubscriptionVendor} subscriber - Optional subscriber instance\n   *   to use. If omitted, a new subscriber will be created for the emitter.\n   */\n  function EventEmitter(subscriber) {\n    this._subscriber = subscriber || new EventSubscriptionVendor();\n  }\n  /**\n   * Adds a listener to be invoked when events of the specified type are\n   * emitted. An optional calling context may be provided. The data arguments\n   * emitted will be passed to the listener function.\n   *\n   * TODO: Annotate the listener arg's type. This is tricky because listeners\n   *       can be invoked with varargs.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n\n\n  var _proto = EventEmitter.prototype;\n\n  _proto.addListener = function addListener(eventType, // FIXME: listeners should return void instead of mixed to prevent issues\n  listener, context) {\n    return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));\n  }\n  /**\n   * Removes all of the registered listeners, including those registered as\n   * listener maps.\n   *\n   * @param {?string} eventType - Optional name of the event whose registered\n   *   listeners to remove\n   */\n  ;\n\n  _proto.removeAllListeners = function removeAllListeners(eventType) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  }\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n  ;\n\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n\n    this._subscriber.removeSubscription(subscription);\n  }\n  /**\n   * Returns the number of listeners that are currently registered for the given\n   * event.\n   *\n   * @param {string} eventType - Name of the event to query\n   * @returns {number}\n   */\n  ;\n\n  _proto.listenerCount = function listenerCount(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    return subscriptions ? // We filter out missing entries because the array is sparse.\n    // \"callbackfn is called only for elements of the array which actually\n    // exist; it is not called for missing elements of the array.\"\n    // https://www.ecma-international.org/ecma-262/9.0/index.html#sec-array.prototype.filter\n    subscriptions.filter(sparseFilterPredicate).length : 0;\n  }\n  /**\n   * Emits an event of the given type with the given data. All handlers of that\n   * particular type will be notified.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {...*} Arbitrary arguments to be passed to each registered listener\n   *\n   * @example\n   *   emitter.addListener('someEvent', function(message) {\n   *     console.log(message);\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   */\n  ;\n\n  _proto.emit = function emit(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i]; // The subscription may have been removed during this event loop.\n\n        if (subscription && subscription.listener) {\n          subscription.listener.apply(subscription.context, args);\n        }\n      }\n    }\n  }\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n  ;\n\n  _proto.removeListener = function removeListener(eventType, // FIXME: listeners should return void instead of mixed to prevent issues\n  listener) {\n    console.error(\"EventEmitter.removeListener('\" + eventType + \"', ...): Method has been \" + 'deprecated. Please instead use `remove()` on the subscription ' + 'returned by `EventEmitter.addListener`.');\n\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i]; // The subscription may have been removed during this event loop.\n        // its listener matches the listener in method parameters\n\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  };\n\n  return EventEmitter;\n}();\n\nexport default EventEmitter;"]},"metadata":{},"sourceType":"module"}