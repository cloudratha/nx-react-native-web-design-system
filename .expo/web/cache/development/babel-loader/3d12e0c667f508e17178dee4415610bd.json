{"ast":null,"code":"'use strict';\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport AccessibilityUtil from \"../../modules/AccessibilityUtil\";\nimport BoundingDimensions from \"./BoundingDimensions\";\nimport findNodeHandle from \"../findNodeHandle\";\nimport normalizeColor from 'normalize-css-color';\nimport Position from \"./Position\";\nimport React from 'react';\nimport UIManager from \"../UIManager\";\nimport View from \"../View\";\n\nvar extractSingleTouch = function extractSingleTouch(nativeEvent) {\n  var touches = nativeEvent.touches;\n  var changedTouches = nativeEvent.changedTouches;\n  var hasTouches = touches && touches.length > 0;\n  var hasChangedTouches = changedTouches && changedTouches.length > 0;\n  return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;\n};\n\nvar States = {\n  NOT_RESPONDER: 'NOT_RESPONDER',\n  RESPONDER_INACTIVE_PRESS_IN: 'RESPONDER_INACTIVE_PRESS_IN',\n  RESPONDER_INACTIVE_PRESS_OUT: 'RESPONDER_INACTIVE_PRESS_OUT',\n  RESPONDER_ACTIVE_PRESS_IN: 'RESPONDER_ACTIVE_PRESS_IN',\n  RESPONDER_ACTIVE_PRESS_OUT: 'RESPONDER_ACTIVE_PRESS_OUT',\n  RESPONDER_ACTIVE_LONG_PRESS_IN: 'RESPONDER_ACTIVE_LONG_PRESS_IN',\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',\n  ERROR: 'ERROR'\n};\nvar baseStatesConditions = {\n  NOT_RESPONDER: false,\n  RESPONDER_INACTIVE_PRESS_IN: false,\n  RESPONDER_INACTIVE_PRESS_OUT: false,\n  RESPONDER_ACTIVE_PRESS_IN: false,\n  RESPONDER_ACTIVE_PRESS_OUT: false,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: false,\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: false,\n  ERROR: false\n};\n\nvar IsActive = _objectSpread(_objectSpread({}, baseStatesConditions), {}, {\n  RESPONDER_ACTIVE_PRESS_OUT: true,\n  RESPONDER_ACTIVE_PRESS_IN: true\n});\n\nvar IsPressingIn = _objectSpread(_objectSpread({}, baseStatesConditions), {}, {\n  RESPONDER_INACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true\n});\n\nvar IsLongPressingIn = _objectSpread(_objectSpread({}, baseStatesConditions), {}, {\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true\n});\n\nvar Signals = {\n  DELAY: 'DELAY',\n  RESPONDER_GRANT: 'RESPONDER_GRANT',\n  RESPONDER_RELEASE: 'RESPONDER_RELEASE',\n  RESPONDER_TERMINATED: 'RESPONDER_TERMINATED',\n  ENTER_PRESS_RECT: 'ENTER_PRESS_RECT',\n  LEAVE_PRESS_RECT: 'LEAVE_PRESS_RECT',\n  LONG_PRESS_DETECTED: 'LONG_PRESS_DETECTED'\n};\nvar Transitions = {\n  NOT_RESPONDER: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.ERROR,\n    RESPONDER_TERMINATED: States.ERROR,\n    ENTER_PRESS_RECT: States.ERROR,\n    LEAVE_PRESS_RECT: States.ERROR,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_IN: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_IN,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_OUT: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_ACTIVE_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  },\n  RESPONDER_ACTIVE_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  error: {\n    DELAY: States.NOT_RESPONDER,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.NOT_RESPONDER,\n    LEAVE_PRESS_RECT: States.NOT_RESPONDER,\n    LONG_PRESS_DETECTED: States.NOT_RESPONDER\n  }\n};\nvar HIGHLIGHT_DELAY_MS = 130;\nvar PRESS_EXPAND_PX = 20;\nvar LONG_PRESS_THRESHOLD = 500;\nvar LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;\nvar LONG_PRESS_ALLOWED_MOVEMENT = 10;\nvar TouchableMixin = {\n  componentDidMount: function componentDidMount() {\n    var _this = this;\n\n    this._touchableNode = findNodeHandle(this);\n\n    if (this._touchableNode && this._touchableNode.addEventListener) {\n      this._touchableBlurListener = function (e) {\n        if (_this._isTouchableKeyboardActive) {\n          if (_this.state.touchable.touchState && _this.state.touchable.touchState !== States.NOT_RESPONDER) {\n            _this.touchableHandleResponderTerminate({\n              nativeEvent: e\n            });\n          }\n\n          _this._isTouchableKeyboardActive = false;\n        }\n      };\n\n      this._touchableNode.addEventListener('blur', this._touchableBlurListener);\n    }\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    if (this._touchableNode && this._touchableNode.addEventListener) {\n      this._touchableNode.removeEventListener('blur', this._touchableBlurListener);\n    }\n\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n    this.pressInLocation = null;\n    this.state.touchable.responderID = null;\n    this._touchableNode = null;\n  },\n  touchableGetInitialState: function touchableGetInitialState() {\n    return {\n      touchable: {\n        touchState: undefined,\n        responderID: null\n      }\n    };\n  },\n  touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {\n    return !this.props.rejectResponderTermination;\n  },\n  touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {\n    return !this.props.disabled;\n  },\n  touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {\n    return true;\n  },\n  touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {\n    var dispatchID = e.currentTarget;\n    e.persist();\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n    this.pressOutDelayTimeout = null;\n    this.state.touchable.touchState = States.NOT_RESPONDER;\n    this.state.touchable.responderID = dispatchID;\n\n    this._receiveSignal(Signals.RESPONDER_GRANT, e);\n\n    var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;\n    delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;\n\n    if (delayMS !== 0) {\n      this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);\n    } else {\n      this._handleDelay(e);\n    }\n\n    var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;\n    longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;\n    this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);\n  },\n  touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {\n    this.pressInLocation = null;\n\n    this._receiveSignal(Signals.RESPONDER_RELEASE, e);\n  },\n  touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {\n    this.pressInLocation = null;\n\n    this._receiveSignal(Signals.RESPONDER_TERMINATED, e);\n  },\n  touchableHandleResponderMove: function touchableHandleResponderMove(e) {\n    if (!this.state.touchable.positionOnActivate) {\n      return;\n    }\n\n    var positionOnActivate = this.state.touchable.positionOnActivate;\n    var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;\n    var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {\n      left: PRESS_EXPAND_PX,\n      right: PRESS_EXPAND_PX,\n      top: PRESS_EXPAND_PX,\n      bottom: PRESS_EXPAND_PX\n    };\n    var pressExpandLeft = pressRectOffset.left;\n    var pressExpandTop = pressRectOffset.top;\n    var pressExpandRight = pressRectOffset.right;\n    var pressExpandBottom = pressRectOffset.bottom;\n    var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;\n\n    if (hitSlop) {\n      pressExpandLeft += hitSlop.left || 0;\n      pressExpandTop += hitSlop.top || 0;\n      pressExpandRight += hitSlop.right || 0;\n      pressExpandBottom += hitSlop.bottom || 0;\n    }\n\n    var touch = extractSingleTouch(e.nativeEvent);\n    var pageX = touch && touch.pageX;\n    var pageY = touch && touch.pageY;\n\n    if (this.pressInLocation) {\n      var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);\n\n      if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {\n        this._cancelLongPressDelayTimeout();\n      }\n    }\n\n    var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;\n\n    if (isTouchWithinActive) {\n      var prevState = this.state.touchable.touchState;\n\n      this._receiveSignal(Signals.ENTER_PRESS_RECT, e);\n\n      var curState = this.state.touchable.touchState;\n\n      if (curState === States.RESPONDER_INACTIVE_PRESS_IN && prevState !== States.RESPONDER_INACTIVE_PRESS_IN) {\n        this._cancelLongPressDelayTimeout();\n      }\n    } else {\n      this._cancelLongPressDelayTimeout();\n\n      this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);\n    }\n  },\n  touchableHandleFocus: function touchableHandleFocus(e) {\n    this.props.onFocus && this.props.onFocus(e);\n  },\n  touchableHandleBlur: function touchableHandleBlur(e) {\n    this.props.onBlur && this.props.onBlur(e);\n  },\n  _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {\n    var tag = this.state.touchable.responderID;\n\n    if (tag == null) {\n      return;\n    }\n\n    UIManager.measure(tag, this._handleQueryLayout);\n  },\n  _handleQueryLayout: function _handleQueryLayout(l, t, w, h, globalX, globalY) {\n    if (!l && !t && !w && !h && !globalX && !globalY) {\n      return;\n    }\n\n    this.state.touchable.positionOnActivate && Position.release(this.state.touchable.positionOnActivate);\n    this.state.touchable.dimensionsOnActivate && BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);\n    this.state.touchable.positionOnActivate = Position.getPooled(globalX, globalY);\n    this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(w, h);\n  },\n  _handleDelay: function _handleDelay(e) {\n    this.touchableDelayTimeout = null;\n\n    this._receiveSignal(Signals.DELAY, e);\n  },\n  _handleLongDelay: function _handleLongDelay(e) {\n    this.longPressDelayTimeout = null;\n    var curState = this.state.touchable.touchState;\n\n    if (curState !== States.RESPONDER_ACTIVE_PRESS_IN && curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN) {\n      console.error('Attempted to transition from state `' + curState + '` to `' + States.RESPONDER_ACTIVE_LONG_PRESS_IN + '`, which is not supported. This is ' + 'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.');\n    } else {\n      this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);\n    }\n  },\n  _receiveSignal: function _receiveSignal(signal, e) {\n    var responderID = this.state.touchable.responderID;\n    var curState = this.state.touchable.touchState;\n    var nextState = Transitions[curState] && Transitions[curState][signal];\n\n    if (!responderID && signal === Signals.RESPONDER_RELEASE) {\n      return;\n    }\n\n    if (!nextState) {\n      throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + responderID + '`');\n    }\n\n    if (nextState === States.ERROR) {\n      throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + responderID + '`');\n    }\n\n    if (curState !== nextState) {\n      this._performSideEffectsForTransition(curState, nextState, signal, e);\n\n      this.state.touchable.touchState = nextState;\n    }\n  },\n  _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.longPressDelayTimeout = null;\n  },\n  _isHighlight: function _isHighlight(state) {\n    return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;\n  },\n  _savePressInLocation: function _savePressInLocation(e) {\n    var touch = extractSingleTouch(e.nativeEvent);\n    var pageX = touch && touch.pageX;\n    var pageY = touch && touch.pageY;\n    var locationX = touch && touch.locationX;\n    var locationY = touch && touch.locationY;\n    this.pressInLocation = {\n      pageX: pageX,\n      pageY: pageY,\n      locationX: locationX,\n      locationY: locationY\n    };\n  },\n  _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {\n    var deltaX = aX - bX;\n    var deltaY = aY - bY;\n    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n  },\n  _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {\n    var curIsHighlight = this._isHighlight(curState);\n\n    var newIsHighlight = this._isHighlight(nextState);\n\n    var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;\n\n    if (isFinalSignal) {\n      this._cancelLongPressDelayTimeout();\n    }\n\n    var isInitialTransition = curState === States.NOT_RESPONDER && nextState === States.RESPONDER_INACTIVE_PRESS_IN;\n    var isActiveTransition = !IsActive[curState] && IsActive[nextState];\n\n    if (isInitialTransition || isActiveTransition) {\n      this._remeasureMetricsOnActivation();\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {\n      this.touchableHandleLongPress && this.touchableHandleLongPress(e);\n    }\n\n    if (newIsHighlight && !curIsHighlight) {\n      this._startHighlight(e);\n    } else if (!newIsHighlight && curIsHighlight) {\n      this._endHighlight(e);\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {\n      var hasLongPressHandler = !!this.props.onLongPress;\n      var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && (!hasLongPressHandler || !this.touchableLongPressCancelsPress());\n      var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;\n\n      if (shouldInvokePress && this.touchableHandlePress) {\n        if (!newIsHighlight && !curIsHighlight) {\n          this._startHighlight(e);\n\n          this._endHighlight(e);\n        }\n\n        this.touchableHandlePress(e);\n      }\n    }\n\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.touchableDelayTimeout = null;\n  },\n  _playTouchSound: function _playTouchSound() {\n    UIManager.playTouchSound();\n  },\n  _startHighlight: function _startHighlight(e) {\n    this._savePressInLocation(e);\n\n    this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);\n  },\n  _endHighlight: function _endHighlight(e) {\n    var _this2 = this;\n\n    if (this.touchableHandleActivePressOut) {\n      if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {\n        this.pressOutDelayTimeout = setTimeout(function () {\n          _this2.touchableHandleActivePressOut(e);\n        }, this.touchableGetPressOutDelayMS());\n      } else {\n        this.touchableHandleActivePressOut(e);\n      }\n    }\n  },\n  touchableHandleKeyEvent: function touchableHandleKeyEvent(e) {\n    var type = e.type,\n        key = e.key;\n\n    if (key === 'Enter' || key === ' ') {\n      if (type === 'keydown') {\n        if (!this._isTouchableKeyboardActive) {\n          if (!this.state.touchable.touchState || this.state.touchable.touchState === States.NOT_RESPONDER) {\n            this.touchableHandleResponderGrant(e);\n            this._isTouchableKeyboardActive = true;\n          }\n        }\n      } else if (type === 'keyup') {\n        if (this._isTouchableKeyboardActive) {\n          if (this.state.touchable.touchState && this.state.touchable.touchState !== States.NOT_RESPONDER) {\n            this.touchableHandleResponderRelease(e);\n            this._isTouchableKeyboardActive = false;\n          }\n        }\n      }\n\n      e.stopPropagation();\n\n      if (!(key === 'Enter' && AccessibilityUtil.propsToAriaRole(this.props) === 'link')) {\n        e.preventDefault();\n      }\n    }\n  },\n  withoutDefaultFocusAndBlur: {}\n};\n\nvar touchableHandleFocus = TouchableMixin.touchableHandleFocus,\n    touchableHandleBlur = TouchableMixin.touchableHandleBlur,\n    TouchableMixinWithoutDefaultFocusAndBlur = _objectWithoutPropertiesLoose(TouchableMixin, [\"touchableHandleFocus\", \"touchableHandleBlur\"]);\n\nTouchableMixin.withoutDefaultFocusAndBlur = TouchableMixinWithoutDefaultFocusAndBlur;\nvar Touchable = {\n  Mixin: TouchableMixin,\n  TOUCH_TARGET_DEBUG: false,\n  renderDebugView: function renderDebugView(_ref) {\n    var color = _ref.color,\n        hitSlop = _ref.hitSlop;\n\n    if (!Touchable.TOUCH_TARGET_DEBUG) {\n      return null;\n    }\n\n    if (true) {\n      throw Error('Touchable.TOUCH_TARGET_DEBUG should not be enabled in prod!');\n    }\n\n    var debugHitSlopStyle = {};\n    hitSlop = hitSlop || {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0\n    };\n\n    for (var key in hitSlop) {\n      debugHitSlopStyle[key] = -hitSlop[key];\n    }\n\n    var normalizedColor = normalizeColor(color);\n\n    if (typeof normalizedColor !== 'number') {\n      return null;\n    }\n\n    var hexColor = '#' + ('00000000' + normalizedColor.toString(16)).substr(-8);\n    return React.createElement(View, {\n      pointerEvents: \"none\",\n      style: _objectSpread({\n        position: 'absolute',\n        borderColor: hexColor.slice(0, -2) + '55',\n        borderWidth: 1,\n        borderStyle: 'dashed',\n        backgroundColor: hexColor.slice(0, -2) + '0F'\n      }, debugHitSlopStyle)\n    });\n  }\n};\nexport default Touchable;","map":{"version":3,"sources":["/Users/garethcozens/Documents/repo/cloudratha/react-native-web-nx-demo/node_modules/react-native-web/dist/exports/Touchable/index.js"],"names":["source","target","sourceKeys","Object","i","key","excluded","keys","symbols","arguments","ownKeys","_defineProperty","value","enumerable","configurable","writable","obj","extractSingleTouch","touches","nativeEvent","changedTouches","hasTouches","hasChangedTouches","States","NOT_RESPONDER","RESPONDER_INACTIVE_PRESS_IN","RESPONDER_INACTIVE_PRESS_OUT","RESPONDER_ACTIVE_PRESS_IN","RESPONDER_ACTIVE_PRESS_OUT","RESPONDER_ACTIVE_LONG_PRESS_IN","RESPONDER_ACTIVE_LONG_PRESS_OUT","ERROR","baseStatesConditions","IsActive","_objectSpread","IsPressingIn","IsLongPressingIn","Signals","DELAY","RESPONDER_GRANT","RESPONDER_RELEASE","RESPONDER_TERMINATED","ENTER_PRESS_RECT","LEAVE_PRESS_RECT","LONG_PRESS_DETECTED","Transitions","error","HIGHLIGHT_DELAY_MS","PRESS_EXPAND_PX","LONG_PRESS_THRESHOLD","LONG_PRESS_DELAY_MS","LONG_PRESS_ALLOWED_MOVEMENT","TouchableMixin","componentDidMount","_this","findNodeHandle","componentWillUnmount","clearTimeout","touchableGetInitialState","touchable","touchState","responderID","touchableHandleResponderTerminationRequest","touchableHandleStartShouldSetResponder","touchableLongPressCancelsPress","touchableHandleResponderGrant","dispatchID","e","delayMS","Math","isNaN","setTimeout","longDelayMS","touchableHandleResponderRelease","touchableHandleResponderTerminate","touchableHandleResponderMove","positionOnActivate","dimensionsOnActivate","pressRectOffset","left","right","top","bottom","pressExpandLeft","pressExpandTop","pressExpandRight","pressExpandBottom","hitSlop","touch","pageX","pageY","movedDistance","isTouchWithinActive","prevState","curState","touchableHandleFocus","touchableHandleBlur","_remeasureMetricsOnActivation","tag","UIManager","_handleQueryLayout","Position","BoundingDimensions","_handleDelay","_handleLongDelay","console","_receiveSignal","nextState","signal","_cancelLongPressDelayTimeout","_isHighlight","state","_savePressInLocation","locationX","locationY","_getDistanceBetweenPoints","deltaX","aX","deltaY","aY","_performSideEffectsForTransition","curIsHighlight","newIsHighlight","isFinalSignal","isInitialTransition","isActiveTransition","hasLongPressHandler","pressIsLongButStillCallOnPress","shouldInvokePress","_playTouchSound","_startHighlight","_endHighlight","_this2","touchableHandleKeyEvent","type","AccessibilityUtil","withoutDefaultFocusAndBlur","TouchableMixinWithoutDefaultFocusAndBlur","_objectWithoutPropertiesLoose","Touchable","Mixin","TOUCH_TARGET_DEBUG","renderDebugView","color","_ref","Error","debugHitSlopStyle","normalizedColor","normalizeColor","hexColor","React","pointerEvents","style","position","borderColor","borderWidth","borderStyle","backgroundColor"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport AccessibilityUtil from '../../modules/AccessibilityUtil';\nimport BoundingDimensions from './BoundingDimensions';\nimport findNodeHandle from '../findNodeHandle';\nimport normalizeColor from 'normalize-css-color';\nimport Position from './Position';\nimport React from 'react';\nimport UIManager from '../UIManager';\nimport View from '../View';\n\nvar extractSingleTouch = function extractSingleTouch(nativeEvent) {\n  var touches = nativeEvent.touches;\n  var changedTouches = nativeEvent.changedTouches;\n  var hasTouches = touches && touches.length > 0;\n  var hasChangedTouches = changedTouches && changedTouches.length > 0;\n  return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;\n};\n/**\n * `Touchable`: Taps done right.\n *\n * You hook your `ResponderEventPlugin` events into `Touchable`. `Touchable`\n * will measure time/geometry and tells you when to give feedback to the user.\n *\n * ====================== Touchable Tutorial ===============================\n * The `Touchable` mixin helps you handle the \"press\" interaction. It analyzes\n * the geometry of elements, and observes when another responder (scroll view\n * etc) has stolen the touch lock. It notifies your component when it should\n * give feedback to the user. (bouncing/highlighting/unhighlighting).\n *\n * - When a touch was activated (typically you highlight)\n * - When a touch was deactivated (typically you unhighlight)\n * - When a touch was \"pressed\" - a touch ended while still within the geometry\n *   of the element, and no other element (like scroller) has \"stolen\" touch\n *   lock (\"responder\") (Typically you bounce the element).\n *\n * A good tap interaction isn't as simple as you might think. There should be a\n * slight delay before showing a highlight when starting a touch. If a\n * subsequent touch move exceeds the boundary of the element, it should\n * unhighlight, but if that same touch is brought back within the boundary, it\n * should rehighlight again. A touch can move in and out of that boundary\n * several times, each time toggling highlighting, but a \"press\" is only\n * triggered if that touch ends while within the element's boundary and no\n * scroller (or anything else) has stolen the lock on touches.\n *\n * To create a new type of component that handles interaction using the\n * `Touchable` mixin, do the following:\n *\n * - Initialize the `Touchable` state.\n *\n *   getInitialState: function() {\n *     return merge(this.touchableGetInitialState(), yourComponentState);\n *   }\n *\n * - Choose the rendered component who's touches should start the interactive\n *   sequence. On that rendered node, forward all `Touchable` responder\n *   handlers. You can choose any rendered node you like. Choose a node whose\n *   hit target you'd like to instigate the interaction sequence:\n *\n *   // In render function:\n *   return (\n *     <View\n *       onStartShouldSetResponder={this.touchableHandleStartShouldSetResponder}\n *       onResponderTerminationRequest={this.touchableHandleResponderTerminationRequest}\n *       onResponderGrant={this.touchableHandleResponderGrant}\n *       onResponderMove={this.touchableHandleResponderMove}\n *       onResponderRelease={this.touchableHandleResponderRelease}\n *       onResponderTerminate={this.touchableHandleResponderTerminate}>\n *       <View>\n *         Even though the hit detection/interactions are triggered by the\n *         wrapping (typically larger) node, we usually end up implementing\n *         custom logic that highlights this inner one.\n *       </View>\n *     </View>\n *   );\n *\n * - You may set up your own handlers for each of these events, so long as you\n *   also invoke the `touchable*` handlers inside of your custom handler.\n *\n * - Implement the handlers on your component class in order to provide\n *   feedback to the user. See documentation for each of these class methods\n *   that you should implement.\n *\n *   touchableHandlePress: function() {\n *      this.performBounceAnimation();  // or whatever you want to do.\n *   },\n *   touchableHandleActivePressIn: function() {\n *     this.beginHighlighting(...);  // Whatever you like to convey activation\n *   },\n *   touchableHandleActivePressOut: function() {\n *     this.endHighlighting(...);  // Whatever you like to convey deactivation\n *   },\n *\n * - There are more advanced methods you can implement (see documentation below):\n *   touchableGetHighlightDelayMS: function() {\n *     return 20;\n *   }\n *   // In practice, *always* use a predeclared constant (conserve memory).\n *   touchableGetPressRectOffset: function() {\n *     return {top: 20, left: 20, right: 20, bottom: 100};\n *   }\n */\n\n/**\n * Touchable states.\n */\n\n\nvar States = {\n  NOT_RESPONDER: 'NOT_RESPONDER',\n  // Not the responder\n  RESPONDER_INACTIVE_PRESS_IN: 'RESPONDER_INACTIVE_PRESS_IN',\n  // Responder, inactive, in the `PressRect`\n  RESPONDER_INACTIVE_PRESS_OUT: 'RESPONDER_INACTIVE_PRESS_OUT',\n  // Responder, inactive, out of `PressRect`\n  RESPONDER_ACTIVE_PRESS_IN: 'RESPONDER_ACTIVE_PRESS_IN',\n  // Responder, active, in the `PressRect`\n  RESPONDER_ACTIVE_PRESS_OUT: 'RESPONDER_ACTIVE_PRESS_OUT',\n  // Responder, active, out of `PressRect`\n  RESPONDER_ACTIVE_LONG_PRESS_IN: 'RESPONDER_ACTIVE_LONG_PRESS_IN',\n  // Responder, active, in the `PressRect`, after long press threshold\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',\n  // Responder, active, out of `PressRect`, after long press threshold\n  ERROR: 'ERROR'\n};\n\n/*\n * Quick lookup map for states that are considered to be \"active\"\n */\nvar baseStatesConditions = {\n  NOT_RESPONDER: false,\n  RESPONDER_INACTIVE_PRESS_IN: false,\n  RESPONDER_INACTIVE_PRESS_OUT: false,\n  RESPONDER_ACTIVE_PRESS_IN: false,\n  RESPONDER_ACTIVE_PRESS_OUT: false,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: false,\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: false,\n  ERROR: false\n};\n\nvar IsActive = _objectSpread(_objectSpread({}, baseStatesConditions), {}, {\n  RESPONDER_ACTIVE_PRESS_OUT: true,\n  RESPONDER_ACTIVE_PRESS_IN: true\n});\n/**\n * Quick lookup for states that are considered to be \"pressing\" and are\n * therefore eligible to result in a \"selection\" if the press stops.\n */\n\n\nvar IsPressingIn = _objectSpread(_objectSpread({}, baseStatesConditions), {}, {\n  RESPONDER_INACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true\n});\n\nvar IsLongPressingIn = _objectSpread(_objectSpread({}, baseStatesConditions), {}, {\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true\n});\n/**\n * Inputs to the state machine.\n */\n\n\nvar Signals = {\n  DELAY: 'DELAY',\n  RESPONDER_GRANT: 'RESPONDER_GRANT',\n  RESPONDER_RELEASE: 'RESPONDER_RELEASE',\n  RESPONDER_TERMINATED: 'RESPONDER_TERMINATED',\n  ENTER_PRESS_RECT: 'ENTER_PRESS_RECT',\n  LEAVE_PRESS_RECT: 'LEAVE_PRESS_RECT',\n  LONG_PRESS_DETECTED: 'LONG_PRESS_DETECTED'\n};\n\n/**\n * Mapping from States x Signals => States\n */\nvar Transitions = {\n  NOT_RESPONDER: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.ERROR,\n    RESPONDER_TERMINATED: States.ERROR,\n    ENTER_PRESS_RECT: States.ERROR,\n    LEAVE_PRESS_RECT: States.ERROR,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_IN: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_IN,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_OUT: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_ACTIVE_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  },\n  RESPONDER_ACTIVE_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  error: {\n    DELAY: States.NOT_RESPONDER,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.NOT_RESPONDER,\n    LEAVE_PRESS_RECT: States.NOT_RESPONDER,\n    LONG_PRESS_DETECTED: States.NOT_RESPONDER\n  }\n}; // ==== Typical Constants for integrating into UI components ====\n// var HIT_EXPAND_PX = 20;\n// var HIT_VERT_OFFSET_PX = 10;\n\nvar HIGHLIGHT_DELAY_MS = 130;\nvar PRESS_EXPAND_PX = 20;\nvar LONG_PRESS_THRESHOLD = 500;\nvar LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;\nvar LONG_PRESS_ALLOWED_MOVEMENT = 10; // Default amount \"active\" region protrudes beyond box\n\n/**\n * By convention, methods prefixed with underscores are meant to be @private,\n * and not @protected. Mixers shouldn't access them - not even to provide them\n * as callback handlers.\n *\n *\n * ========== Geometry =========\n * `Touchable` only assumes that there exists a `HitRect` node. The `PressRect`\n * is an abstract box that is extended beyond the `HitRect`.\n *\n *  +--------------------------+\n *  |                          | - \"Start\" events in `HitRect` cause `HitRect`\n *  |  +--------------------+  |   to become the responder.\n *  |  |  +--------------+  |  | - `HitRect` is typically expanded around\n *  |  |  |              |  |  |   the `VisualRect`, but shifted downward.\n *  |  |  |  VisualRect  |  |  | - After pressing down, after some delay,\n *  |  |  |              |  |  |   and before letting up, the Visual React\n *  |  |  +--------------+  |  |   will become \"active\". This makes it eligible\n *  |  |     HitRect        |  |   for being highlighted (so long as the\n *  |  +--------------------+  |   press remains in the `PressRect`).\n *  |        PressRect     o   |\n *  +----------------------|---+\n *           Out Region    |\n *                         +-----+ This gap between the `HitRect` and\n *                                 `PressRect` allows a touch to move far away\n *                                 from the original hit rect, and remain\n *                                 highlighted, and eligible for a \"Press\".\n *                                 Customize this via\n *                                 `touchableGetPressRectOffset()`.\n *\n *\n *\n * ======= State Machine =======\n *\n * +-------------+ <---+ RESPONDER_RELEASE\n * |NOT_RESPONDER|\n * +-------------+ <---+ RESPONDER_TERMINATED\n *     +\n *     | RESPONDER_GRANT (HitRect)\n *     v\n * +---------------------------+  DELAY   +-------------------------+  T + DELAY     +------------------------------+\n * |RESPONDER_INACTIVE_PRESS_IN|+-------->|RESPONDER_ACTIVE_PRESS_IN| +------------> |RESPONDER_ACTIVE_LONG_PRESS_IN|\n * +---------------------------+          +-------------------------+                +------------------------------+\n *     +            ^                         +           ^                                 +           ^\n *     |LEAVE_      |ENTER_                   |LEAVE_     |ENTER_                           |LEAVE_     |ENTER_\n *     |PRESS_RECT  |PRESS_RECT               |PRESS_RECT |PRESS_RECT                       |PRESS_RECT |PRESS_RECT\n *     |            |                         |           |                                 |           |\n *     v            +                         v           +                                 v           +\n * +----------------------------+  DELAY  +--------------------------+               +-------------------------------+\n * |RESPONDER_INACTIVE_PRESS_OUT|+------->|RESPONDER_ACTIVE_PRESS_OUT|               |RESPONDER_ACTIVE_LONG_PRESS_OUT|\n * +----------------------------+         +--------------------------+               +-------------------------------+\n *\n * T + DELAY => LONG_PRESS_DELAY_MS + DELAY\n *\n * Not drawn are the side effects of each transition. The most important side\n * effect is the `touchableHandlePress` abstract method invocation that occurs\n * when a responder is released while in either of the \"Press\" states.\n *\n * The other important side effects are the highlight abstract method\n * invocations (internal callbacks) to be implemented by the mixer.\n *\n *\n * @lends Touchable.prototype\n */\n\nvar TouchableMixin = {\n  // HACK (part 1): basic support for touchable interactions using a keyboard\n  componentDidMount: function componentDidMount() {\n    var _this = this;\n\n    this._touchableNode = findNodeHandle(this);\n\n    if (this._touchableNode && this._touchableNode.addEventListener) {\n      this._touchableBlurListener = function (e) {\n        if (_this._isTouchableKeyboardActive) {\n          if (_this.state.touchable.touchState && _this.state.touchable.touchState !== States.NOT_RESPONDER) {\n            _this.touchableHandleResponderTerminate({\n              nativeEvent: e\n            });\n          }\n\n          _this._isTouchableKeyboardActive = false;\n        }\n      };\n\n      this._touchableNode.addEventListener('blur', this._touchableBlurListener);\n    }\n  },\n\n  /**\n   * Clear all timeouts on unmount\n   */\n  componentWillUnmount: function componentWillUnmount() {\n    if (this._touchableNode && this._touchableNode.addEventListener) {\n      this._touchableNode.removeEventListener('blur', this._touchableBlurListener);\n    }\n\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout); // Clear DOM nodes\n\n    this.pressInLocation = null;\n    this.state.touchable.responderID = null;\n    this._touchableNode = null;\n  },\n\n  /**\n   * It's prefer that mixins determine state in this way, having the class\n   * explicitly mix the state in the one and only `getInitialState` method.\n   *\n   * @return {object} State object to be placed inside of\n   * `this.state.touchable`.\n   */\n  touchableGetInitialState: function touchableGetInitialState() {\n    return {\n      touchable: {\n        touchState: undefined,\n        responderID: null\n      }\n    };\n  },\n  // ==== Hooks to Gesture Responder system ====\n\n  /**\n   * Must return true if embedded in a native platform scroll view.\n   */\n  touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {\n    return !this.props.rejectResponderTermination;\n  },\n\n  /**\n   * Must return true to start the process of `Touchable`.\n   */\n  touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {\n    return !this.props.disabled;\n  },\n\n  /**\n   * Return true to cancel press on long press.\n   */\n  touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {\n    return true;\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderGrant` event.\n   * @param {SyntheticEvent} e Synthetic event from event system.\n   *\n   */\n  touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {\n    var dispatchID = e.currentTarget; // Since e is used in a callback invoked on another event loop\n    // (as in setTimeout etc), we need to call e.persist() on the\n    // event to make sure it doesn't get reused in the event object pool.\n\n    e.persist();\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n    this.pressOutDelayTimeout = null;\n    this.state.touchable.touchState = States.NOT_RESPONDER;\n    this.state.touchable.responderID = dispatchID;\n\n    this._receiveSignal(Signals.RESPONDER_GRANT, e);\n\n    var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;\n    delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;\n\n    if (delayMS !== 0) {\n      this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);\n    } else {\n      this._handleDelay(e);\n    }\n\n    var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;\n    longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;\n    this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderRelease` event.\n   */\n  touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {\n    this.pressInLocation = null;\n\n    this._receiveSignal(Signals.RESPONDER_RELEASE, e);\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderTerminate` event.\n   */\n  touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {\n    this.pressInLocation = null;\n\n    this._receiveSignal(Signals.RESPONDER_TERMINATED, e);\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderMove` event.\n   */\n  touchableHandleResponderMove: function touchableHandleResponderMove(e) {\n    // Measurement may not have returned yet.\n    if (!this.state.touchable.positionOnActivate) {\n      return;\n    }\n\n    var positionOnActivate = this.state.touchable.positionOnActivate;\n    var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;\n    var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {\n      left: PRESS_EXPAND_PX,\n      right: PRESS_EXPAND_PX,\n      top: PRESS_EXPAND_PX,\n      bottom: PRESS_EXPAND_PX\n    };\n    var pressExpandLeft = pressRectOffset.left;\n    var pressExpandTop = pressRectOffset.top;\n    var pressExpandRight = pressRectOffset.right;\n    var pressExpandBottom = pressRectOffset.bottom;\n    var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;\n\n    if (hitSlop) {\n      pressExpandLeft += hitSlop.left || 0;\n      pressExpandTop += hitSlop.top || 0;\n      pressExpandRight += hitSlop.right || 0;\n      pressExpandBottom += hitSlop.bottom || 0;\n    }\n\n    var touch = extractSingleTouch(e.nativeEvent);\n    var pageX = touch && touch.pageX;\n    var pageY = touch && touch.pageY;\n\n    if (this.pressInLocation) {\n      var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);\n\n      if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {\n        this._cancelLongPressDelayTimeout();\n      }\n    }\n\n    var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;\n\n    if (isTouchWithinActive) {\n      var prevState = this.state.touchable.touchState;\n\n      this._receiveSignal(Signals.ENTER_PRESS_RECT, e);\n\n      var curState = this.state.touchable.touchState;\n\n      if (curState === States.RESPONDER_INACTIVE_PRESS_IN && prevState !== States.RESPONDER_INACTIVE_PRESS_IN) {\n        // fix for t7967420\n        this._cancelLongPressDelayTimeout();\n      }\n    } else {\n      this._cancelLongPressDelayTimeout();\n\n      this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);\n    }\n  },\n\n  /**\n   * Invoked when the item receives focus. Mixers might override this to\n   * visually distinguish the `VisualRect` so that the user knows that it\n   * currently has the focus. Most platforms only support a single element being\n   * focused at a time, in which case there may have been a previously focused\n   * element that was blurred just prior to this. This can be overridden when\n   * using `Touchable.Mixin.withoutDefaultFocusAndBlur`.\n   */\n  touchableHandleFocus: function touchableHandleFocus(e) {\n    this.props.onFocus && this.props.onFocus(e);\n  },\n\n  /**\n   * Invoked when the item loses focus. Mixers might override this to\n   * visually distinguish the `VisualRect` so that the user knows that it\n   * no longer has focus. Most platforms only support a single element being\n   * focused at a time, in which case the focus may have moved to another.\n   * This can be overridden when using\n   * `Touchable.Mixin.withoutDefaultFocusAndBlur`.\n   */\n  touchableHandleBlur: function touchableHandleBlur(e) {\n    this.props.onBlur && this.props.onBlur(e);\n  },\n  // ==== Abstract Application Callbacks ====\n\n  /**\n   * Invoked when the item should be highlighted. Mixers should implement this\n   * to visually distinguish the `VisualRect` so that the user knows that\n   * releasing a touch will result in a \"selection\" (analog to click).\n   *\n   * @abstract\n   * touchableHandleActivePressIn: function,\n   */\n\n  /**\n   * Invoked when the item is \"active\" (in that it is still eligible to become\n   * a \"select\") but the touch has left the `PressRect`. Usually the mixer will\n   * want to unhighlight the `VisualRect`. If the user (while pressing) moves\n   * back into the `PressRect` `touchableHandleActivePressIn` will be invoked\n   * again and the mixer should probably highlight the `VisualRect` again. This\n   * event will not fire on an `touchEnd/mouseUp` event, only move events while\n   * the user is depressing the mouse/touch.\n   *\n   * @abstract\n   * touchableHandleActivePressOut: function\n   */\n\n  /**\n   * Invoked when the item is \"selected\" - meaning the interaction ended by\n   * letting up while the item was either in the state\n   * `RESPONDER_ACTIVE_PRESS_IN` or `RESPONDER_INACTIVE_PRESS_IN`.\n   *\n   * @abstract\n   * touchableHandlePress: function\n   */\n\n  /**\n   * Invoked when the item is long pressed - meaning the interaction ended by\n   * letting up while the item was in `RESPONDER_ACTIVE_LONG_PRESS_IN`. If\n   * `touchableHandleLongPress` is *not* provided, `touchableHandlePress` will\n   * be called as it normally is. If `touchableHandleLongPress` is provided, by\n   * default any `touchableHandlePress` callback will not be invoked. To\n   * override this default behavior, override `touchableLongPressCancelsPress`\n   * to return false. As a result, `touchableHandlePress` will be called when\n   * lifting up, even if `touchableHandleLongPress` has also been called.\n   *\n   * @abstract\n   * touchableHandleLongPress: function\n   */\n\n  /**\n   * Returns the number of millis to wait before triggering a highlight.\n   *\n   * @abstract\n   * touchableGetHighlightDelayMS: function\n   */\n\n  /**\n   * Returns the amount to extend the `HitRect` into the `PressRect`. Positive\n   * numbers mean the size expands outwards.\n   *\n   * @abstract\n   * touchableGetPressRectOffset: function\n   */\n  // ==== Internal Logic ====\n\n  /**\n   * Measures the `HitRect` node on activation. The Bounding rectangle is with\n   * respect to viewport - not page, so adding the `pageXOffset/pageYOffset`\n   * should result in points that are in the same coordinate system as an\n   * event's `globalX/globalY` data values.\n   *\n   * - Consider caching this for the lifetime of the component, or possibly\n   *   being able to share this cache between any `ScrollMap` view.\n   *\n   * @sideeffects\n   * @private\n   */\n  _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {\n    var tag = this.state.touchable.responderID;\n\n    if (tag == null) {\n      return;\n    }\n\n    UIManager.measure(tag, this._handleQueryLayout);\n  },\n  _handleQueryLayout: function _handleQueryLayout(l, t, w, h, globalX, globalY) {\n    //don't do anything UIManager failed to measure node\n    if (!l && !t && !w && !h && !globalX && !globalY) {\n      return;\n    }\n\n    this.state.touchable.positionOnActivate && Position.release(this.state.touchable.positionOnActivate);\n    this.state.touchable.dimensionsOnActivate && // $FlowFixMe\n    BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);\n    this.state.touchable.positionOnActivate = Position.getPooled(globalX, globalY); // $FlowFixMe\n\n    this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(w, h);\n  },\n  _handleDelay: function _handleDelay(e) {\n    this.touchableDelayTimeout = null;\n\n    this._receiveSignal(Signals.DELAY, e);\n  },\n  _handleLongDelay: function _handleLongDelay(e) {\n    this.longPressDelayTimeout = null;\n    var curState = this.state.touchable.touchState;\n\n    if (curState !== States.RESPONDER_ACTIVE_PRESS_IN && curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN) {\n      console.error('Attempted to transition from state `' + curState + '` to `' + States.RESPONDER_ACTIVE_LONG_PRESS_IN + '`, which is not supported. This is ' + 'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.');\n    } else {\n      this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);\n    }\n  },\n\n  /**\n   * Receives a state machine signal, performs side effects of the transition\n   * and stores the new state. Validates the transition as well.\n   *\n   * @param {Signals} signal State machine signal.\n   * @throws Error if invalid state transition or unrecognized signal.\n   * @sideeffects\n   */\n  _receiveSignal: function _receiveSignal(signal, e) {\n    var responderID = this.state.touchable.responderID;\n    var curState = this.state.touchable.touchState;\n    var nextState = Transitions[curState] && Transitions[curState][signal];\n\n    if (!responderID && signal === Signals.RESPONDER_RELEASE) {\n      return;\n    }\n\n    if (!nextState) {\n      throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + responderID + '`');\n    }\n\n    if (nextState === States.ERROR) {\n      throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + responderID + '`');\n    }\n\n    if (curState !== nextState) {\n      this._performSideEffectsForTransition(curState, nextState, signal, e);\n\n      this.state.touchable.touchState = nextState;\n    }\n  },\n  _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.longPressDelayTimeout = null;\n  },\n  _isHighlight: function _isHighlight(state) {\n    return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;\n  },\n  _savePressInLocation: function _savePressInLocation(e) {\n    var touch = extractSingleTouch(e.nativeEvent);\n    var pageX = touch && touch.pageX;\n    var pageY = touch && touch.pageY;\n    var locationX = touch && touch.locationX;\n    var locationY = touch && touch.locationY;\n    this.pressInLocation = {\n      pageX: pageX,\n      pageY: pageY,\n      locationX: locationX,\n      locationY: locationY\n    };\n  },\n  _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {\n    var deltaX = aX - bX;\n    var deltaY = aY - bY;\n    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n  },\n\n  /**\n   * Will perform a transition between touchable states, and identify any\n   * highlighting or unhighlighting that must be performed for this particular\n   * transition.\n   *\n   * @param {States} curState Current Touchable state.\n   * @param {States} nextState Next Touchable state.\n   * @param {Signal} signal Signal that triggered the transition.\n   * @param {Event} e Native event.\n   * @sideeffects\n   */\n  _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {\n    var curIsHighlight = this._isHighlight(curState);\n\n    var newIsHighlight = this._isHighlight(nextState);\n\n    var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;\n\n    if (isFinalSignal) {\n      this._cancelLongPressDelayTimeout();\n    }\n\n    var isInitialTransition = curState === States.NOT_RESPONDER && nextState === States.RESPONDER_INACTIVE_PRESS_IN;\n    var isActiveTransition = !IsActive[curState] && IsActive[nextState];\n\n    if (isInitialTransition || isActiveTransition) {\n      this._remeasureMetricsOnActivation();\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {\n      this.touchableHandleLongPress && this.touchableHandleLongPress(e);\n    }\n\n    if (newIsHighlight && !curIsHighlight) {\n      this._startHighlight(e);\n    } else if (!newIsHighlight && curIsHighlight) {\n      this._endHighlight(e);\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {\n      var hasLongPressHandler = !!this.props.onLongPress;\n      var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && ( // We *are* long pressing.. // But either has no long handler\n      !hasLongPressHandler || !this.touchableLongPressCancelsPress()); // or we're told to ignore it.\n\n      var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;\n\n      if (shouldInvokePress && this.touchableHandlePress) {\n        if (!newIsHighlight && !curIsHighlight) {\n          // we never highlighted because of delay, but we should highlight now\n          this._startHighlight(e);\n\n          this._endHighlight(e);\n        }\n\n        this.touchableHandlePress(e);\n      }\n    }\n\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.touchableDelayTimeout = null;\n  },\n  _playTouchSound: function _playTouchSound() {\n    UIManager.playTouchSound();\n  },\n  _startHighlight: function _startHighlight(e) {\n    this._savePressInLocation(e);\n\n    this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);\n  },\n  _endHighlight: function _endHighlight(e) {\n    var _this2 = this;\n\n    if (this.touchableHandleActivePressOut) {\n      if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {\n        this.pressOutDelayTimeout = setTimeout(function () {\n          _this2.touchableHandleActivePressOut(e);\n        }, this.touchableGetPressOutDelayMS());\n      } else {\n        this.touchableHandleActivePressOut(e);\n      }\n    }\n  },\n  // HACK (part 2): basic support for touchable interactions using a keyboard (including\n  // delays and longPress)\n  touchableHandleKeyEvent: function touchableHandleKeyEvent(e) {\n    var type = e.type,\n        key = e.key;\n\n    if (key === 'Enter' || key === ' ') {\n      if (type === 'keydown') {\n        if (!this._isTouchableKeyboardActive) {\n          if (!this.state.touchable.touchState || this.state.touchable.touchState === States.NOT_RESPONDER) {\n            this.touchableHandleResponderGrant(e);\n            this._isTouchableKeyboardActive = true;\n          }\n        }\n      } else if (type === 'keyup') {\n        if (this._isTouchableKeyboardActive) {\n          if (this.state.touchable.touchState && this.state.touchable.touchState !== States.NOT_RESPONDER) {\n            this.touchableHandleResponderRelease(e);\n            this._isTouchableKeyboardActive = false;\n          }\n        }\n      }\n\n      e.stopPropagation(); // prevent the default behaviour unless the Touchable functions as a link\n      // and Enter is pressed\n\n      if (!(key === 'Enter' && AccessibilityUtil.propsToAriaRole(this.props) === 'link')) {\n        e.preventDefault();\n      }\n    }\n  },\n  withoutDefaultFocusAndBlur: {}\n};\n/**\n * Provide an optional version of the mixin where `touchableHandleFocus` and\n * `touchableHandleBlur` can be overridden. This allows appropriate defaults to\n * be set on TV platforms, without breaking existing implementations of\n * `Touchable`.\n */\n\nvar touchableHandleFocus = TouchableMixin.touchableHandleFocus,\n    touchableHandleBlur = TouchableMixin.touchableHandleBlur,\n    TouchableMixinWithoutDefaultFocusAndBlur = _objectWithoutPropertiesLoose(TouchableMixin, [\"touchableHandleFocus\", \"touchableHandleBlur\"]);\n\nTouchableMixin.withoutDefaultFocusAndBlur = TouchableMixinWithoutDefaultFocusAndBlur;\nvar Touchable = {\n  Mixin: TouchableMixin,\n  TOUCH_TARGET_DEBUG: false,\n  // Highlights all touchable targets. Toggle with Inspector.\n\n  /**\n   * Renders a debugging overlay to visualize touch target with hitSlop (might not work on Android).\n   */\n  renderDebugView: function renderDebugView(_ref) {\n    var color = _ref.color,\n        hitSlop = _ref.hitSlop;\n\n    if (!Touchable.TOUCH_TARGET_DEBUG) {\n      return null;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      throw Error('Touchable.TOUCH_TARGET_DEBUG should not be enabled in prod!');\n    }\n\n    var debugHitSlopStyle = {};\n    hitSlop = hitSlop || {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0\n    };\n\n    for (var key in hitSlop) {\n      debugHitSlopStyle[key] = -hitSlop[key];\n    }\n\n    var normalizedColor = normalizeColor(color);\n\n    if (typeof normalizedColor !== 'number') {\n      return null;\n    }\n\n    var hexColor = '#' + ('00000000' + normalizedColor.toString(16)).substr(-8);\n    return /*#__PURE__*/React.createElement(View, {\n      pointerEvents: \"none\",\n      style: _objectSpread({\n        position: 'absolute',\n        borderColor: hexColor.slice(0, -2) + '55',\n        // More opaque\n        borderWidth: 1,\n        borderStyle: 'dashed',\n        backgroundColor: hexColor.slice(0, -2) + '0F'\n      }, debugHitSlopStyle)\n    });\n  }\n};\nexport default Touchable;"]},"metadata":{},"sourceType":"module"}