{"ast":null,"code":"import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport createEventHandle from \"../createEventHandle\";\n\nvar supportsPointerEvent = function supportsPointerEvent() {\n  return !!(true && window.PointerEvent != null);\n};\n\nvar activeModality = 'keyboard';\nvar modality = 'keyboard';\nvar previousModality;\nvar previousActiveModality;\nvar isEmulatingMouseEvents = false;\nvar listeners = new Set();\nvar KEYBOARD = 'keyboard';\nvar MOUSE = 'mouse';\nvar TOUCH = 'touch';\nvar BLUR = 'blur';\nvar CONTEXTMENU = 'contextmenu';\nvar FOCUS = 'focus';\nvar KEYDOWN = 'keydown';\nvar MOUSEDOWN = 'mousedown';\nvar MOUSEMOVE = 'mousemove';\nvar MOUSEUP = 'mouseup';\nvar POINTERDOWN = 'pointerdown';\nvar POINTERMOVE = 'pointermove';\nvar SCROLL = 'scroll';\nvar SELECTIONCHANGE = 'selectionchange';\nvar TOUCHCANCEL = 'touchcancel';\nvar TOUCHMOVE = 'touchmove';\nvar TOUCHSTART = 'touchstart';\nvar VISIBILITYCHANGE = 'visibilitychange';\nvar bubbleOptions = {\n  passive: true\n};\nvar captureOptions = {\n  capture: true,\n  passive: true\n};\nvar addBlurListener = createEventHandle(BLUR, bubbleOptions);\nvar addFocusListener = createEventHandle(FOCUS, bubbleOptions);\nvar addVisibilityChangeListener = createEventHandle(VISIBILITYCHANGE, captureOptions);\nvar addKeyDownListener = createEventHandle(KEYDOWN, captureOptions);\nvar addPointerDownListener = createEventHandle(POINTERDOWN, captureOptions);\nvar addPointerMoveListener = createEventHandle(POINTERMOVE, captureOptions);\nvar addContextMenuListener = createEventHandle(CONTEXTMENU, captureOptions);\nvar addMouseDownListener = createEventHandle(MOUSEDOWN, captureOptions);\nvar addMouseMoveListener = createEventHandle(MOUSEMOVE, captureOptions);\nvar addMouseUpListener = createEventHandle(MOUSEUP, captureOptions);\nvar addScrollListener = createEventHandle(SCROLL, captureOptions);\nvar addSelectiomChangeListener = createEventHandle(SELECTIONCHANGE, captureOptions);\nvar addTouchCancelListener = createEventHandle(TOUCHCANCEL, captureOptions);\nvar addTouchMoveListener = createEventHandle(TOUCHMOVE, captureOptions);\nvar addTouchStartListener = createEventHandle(TOUCHSTART, captureOptions);\n\nfunction restoreModality() {\n  if (previousModality != null || previousActiveModality != null) {\n    if (previousModality != null) {\n      modality = previousModality;\n      previousModality = null;\n    }\n\n    if (previousActiveModality != null) {\n      activeModality = previousActiveModality;\n      previousActiveModality = null;\n    }\n\n    callListeners();\n  }\n}\n\nfunction onBlurWindow() {\n  previousModality = modality;\n  previousActiveModality = activeModality;\n  activeModality = KEYBOARD;\n  modality = KEYBOARD;\n  callListeners();\n  isEmulatingMouseEvents = false;\n}\n\nfunction onFocusWindow() {\n  restoreModality();\n}\n\nfunction onKeyDown(event) {\n  if (event.metaKey || event.altKey || event.ctrlKey) {\n    return;\n  }\n\n  if (modality !== KEYBOARD) {\n    modality = KEYBOARD;\n    activeModality = KEYBOARD;\n    callListeners();\n  }\n}\n\nfunction onVisibilityChange() {\n  if (document.visibilityState !== 'hidden') {\n    restoreModality();\n  }\n}\n\nfunction onPointerish(event) {\n  var eventType = event.type;\n\n  if (supportsPointerEvent()) {\n    if (eventType === POINTERDOWN) {\n      if (activeModality !== event.pointerType) {\n        modality = event.pointerType;\n        activeModality = event.pointerType;\n        callListeners();\n      }\n\n      return;\n    }\n\n    if (eventType === POINTERMOVE) {\n      if (modality !== event.pointerType) {\n        modality = event.pointerType;\n        callListeners();\n      }\n\n      return;\n    }\n  } else {\n    if (!isEmulatingMouseEvents) {\n      if (eventType === MOUSEDOWN) {\n        if (activeModality !== MOUSE) {\n          modality = MOUSE;\n          activeModality = MOUSE;\n          callListeners();\n        }\n      }\n\n      if (eventType === MOUSEMOVE) {\n        if (modality !== MOUSE) {\n          modality = MOUSE;\n          callListeners();\n        }\n      }\n    }\n\n    if (eventType === TOUCHSTART) {\n      isEmulatingMouseEvents = true;\n\n      if (event.touches && event.touches.length > 1) {\n        isEmulatingMouseEvents = false;\n      }\n\n      if (activeModality !== TOUCH) {\n        modality = TOUCH;\n        activeModality = TOUCH;\n        callListeners();\n      }\n\n      return;\n    }\n\n    if (eventType === CONTEXTMENU || eventType === MOUSEUP || eventType === SELECTIONCHANGE || eventType === SCROLL || eventType === TOUCHCANCEL || eventType === TOUCHMOVE) {\n      isEmulatingMouseEvents = false;\n    }\n  }\n}\n\nif (canUseDOM) {\n  addBlurListener(window, onBlurWindow);\n  addFocusListener(window, onFocusWindow);\n  addKeyDownListener(document, onKeyDown);\n  addPointerDownListener(document, onPointerish);\n  addPointerMoveListener(document, onPointerish);\n  addVisibilityChangeListener(document, onVisibilityChange);\n  addContextMenuListener(document, onPointerish);\n  addMouseDownListener(document, onPointerish);\n  addMouseMoveListener(document, onPointerish);\n  addMouseUpListener(document, onPointerish);\n  addTouchCancelListener(document, onPointerish);\n  addTouchMoveListener(document, onPointerish);\n  addTouchStartListener(document, onPointerish);\n  addSelectiomChangeListener(document, onPointerish);\n  addScrollListener(document, onPointerish);\n}\n\nfunction callListeners() {\n  var value = {\n    activeModality: activeModality,\n    modality: modality\n  };\n  listeners.forEach(function (listener) {\n    listener(value);\n  });\n}\n\nexport function getActiveModality() {\n  return activeModality;\n}\nexport function getModality() {\n  return modality;\n}\nexport function addModalityListener(listener) {\n  listeners.add(listener);\n  return function () {\n    listeners[\"delete\"](listener);\n  };\n}\nexport function testOnly_resetActiveModality() {\n  isEmulatingMouseEvents = false;\n  activeModality = KEYBOARD;\n  modality = KEYBOARD;\n}\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/Users/garethcozens/Documents/repo/cloudratha/react-native-web-nx-demo/node_modules/react-native-web/dist/modules/modality/index.js"],"names":["supportsPointerEvent","window","activeModality","modality","isEmulatingMouseEvents","listeners","KEYBOARD","MOUSE","TOUCH","BLUR","CONTEXTMENU","FOCUS","KEYDOWN","MOUSEDOWN","MOUSEMOVE","MOUSEUP","POINTERDOWN","POINTERMOVE","SCROLL","SELECTIONCHANGE","TOUCHCANCEL","TOUCHMOVE","TOUCHSTART","VISIBILITYCHANGE","bubbleOptions","passive","captureOptions","capture","addBlurListener","createEventHandle","addFocusListener","addVisibilityChangeListener","addKeyDownListener","addPointerDownListener","addPointerMoveListener","addContextMenuListener","addMouseDownListener","addMouseMoveListener","addMouseUpListener","addScrollListener","addSelectiomChangeListener","addTouchCancelListener","addTouchMoveListener","addTouchStartListener","previousModality","previousActiveModality","callListeners","restoreModality","event","document","eventType","value","listener"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport createEventHandle from '../createEventHandle';\n\nvar supportsPointerEvent = function supportsPointerEvent() {\n  return !!(typeof window !== 'undefined' && window.PointerEvent != null);\n};\n\nvar activeModality = 'keyboard';\nvar modality = 'keyboard';\nvar previousModality;\nvar previousActiveModality;\nvar isEmulatingMouseEvents = false;\nvar listeners = new Set();\nvar KEYBOARD = 'keyboard';\nvar MOUSE = 'mouse';\nvar TOUCH = 'touch';\nvar BLUR = 'blur';\nvar CONTEXTMENU = 'contextmenu';\nvar FOCUS = 'focus';\nvar KEYDOWN = 'keydown';\nvar MOUSEDOWN = 'mousedown';\nvar MOUSEMOVE = 'mousemove';\nvar MOUSEUP = 'mouseup';\nvar POINTERDOWN = 'pointerdown';\nvar POINTERMOVE = 'pointermove';\nvar SCROLL = 'scroll';\nvar SELECTIONCHANGE = 'selectionchange';\nvar TOUCHCANCEL = 'touchcancel';\nvar TOUCHMOVE = 'touchmove';\nvar TOUCHSTART = 'touchstart';\nvar VISIBILITYCHANGE = 'visibilitychange';\nvar bubbleOptions = {\n  passive: true\n};\nvar captureOptions = {\n  capture: true,\n  passive: true\n}; // Window events\n\nvar addBlurListener = createEventHandle(BLUR, bubbleOptions);\nvar addFocusListener = createEventHandle(FOCUS, bubbleOptions); // Must be capture phase because 'stopPropagation' might prevent these\n// events bubbling to the document.\n\nvar addVisibilityChangeListener = createEventHandle(VISIBILITYCHANGE, captureOptions);\nvar addKeyDownListener = createEventHandle(KEYDOWN, captureOptions);\nvar addPointerDownListener = createEventHandle(POINTERDOWN, captureOptions);\nvar addPointerMoveListener = createEventHandle(POINTERMOVE, captureOptions); // Fallback events\n\nvar addContextMenuListener = createEventHandle(CONTEXTMENU, captureOptions);\nvar addMouseDownListener = createEventHandle(MOUSEDOWN, captureOptions);\nvar addMouseMoveListener = createEventHandle(MOUSEMOVE, captureOptions);\nvar addMouseUpListener = createEventHandle(MOUSEUP, captureOptions);\nvar addScrollListener = createEventHandle(SCROLL, captureOptions);\nvar addSelectiomChangeListener = createEventHandle(SELECTIONCHANGE, captureOptions);\nvar addTouchCancelListener = createEventHandle(TOUCHCANCEL, captureOptions);\nvar addTouchMoveListener = createEventHandle(TOUCHMOVE, captureOptions);\nvar addTouchStartListener = createEventHandle(TOUCHSTART, captureOptions);\n\nfunction restoreModality() {\n  if (previousModality != null || previousActiveModality != null) {\n    if (previousModality != null) {\n      modality = previousModality;\n      previousModality = null;\n    }\n\n    if (previousActiveModality != null) {\n      activeModality = previousActiveModality;\n      previousActiveModality = null;\n    }\n\n    callListeners();\n  }\n}\n\nfunction onBlurWindow() {\n  previousModality = modality;\n  previousActiveModality = activeModality;\n  activeModality = KEYBOARD;\n  modality = KEYBOARD;\n  callListeners(); // for fallback events\n\n  isEmulatingMouseEvents = false;\n}\n\nfunction onFocusWindow() {\n  restoreModality();\n}\n\nfunction onKeyDown(event) {\n  if (event.metaKey || event.altKey || event.ctrlKey) {\n    return;\n  }\n\n  if (modality !== KEYBOARD) {\n    modality = KEYBOARD;\n    activeModality = KEYBOARD;\n    callListeners();\n  }\n}\n\nfunction onVisibilityChange() {\n  if (document.visibilityState !== 'hidden') {\n    restoreModality();\n  }\n}\n\nfunction onPointerish(event) {\n  var eventType = event.type;\n\n  if (supportsPointerEvent()) {\n    if (eventType === POINTERDOWN) {\n      if (activeModality !== event.pointerType) {\n        modality = event.pointerType;\n        activeModality = event.pointerType;\n        callListeners();\n      }\n\n      return;\n    }\n\n    if (eventType === POINTERMOVE) {\n      if (modality !== event.pointerType) {\n        modality = event.pointerType;\n        callListeners();\n      }\n\n      return;\n    }\n  } // Fallback for non-PointerEvent environment\n  else {\n      if (!isEmulatingMouseEvents) {\n        if (eventType === MOUSEDOWN) {\n          if (activeModality !== MOUSE) {\n            modality = MOUSE;\n            activeModality = MOUSE;\n            callListeners();\n          }\n        }\n\n        if (eventType === MOUSEMOVE) {\n          if (modality !== MOUSE) {\n            modality = MOUSE;\n            callListeners();\n          }\n        }\n      } // Flag when browser may produce emulated events\n\n\n      if (eventType === TOUCHSTART) {\n        isEmulatingMouseEvents = true;\n\n        if (event.touches && event.touches.length > 1) {\n          isEmulatingMouseEvents = false;\n        }\n\n        if (activeModality !== TOUCH) {\n          modality = TOUCH;\n          activeModality = TOUCH;\n          callListeners();\n        }\n\n        return;\n      } // Remove flag after emulated events are finished or cancelled, and if an\n      // event occurs that cuts short a touch event sequence.\n\n\n      if (eventType === CONTEXTMENU || eventType === MOUSEUP || eventType === SELECTIONCHANGE || eventType === SCROLL || eventType === TOUCHCANCEL || eventType === TOUCHMOVE) {\n        isEmulatingMouseEvents = false;\n      }\n    }\n}\n\nif (canUseDOM) {\n  addBlurListener(window, onBlurWindow);\n  addFocusListener(window, onFocusWindow);\n  addKeyDownListener(document, onKeyDown);\n  addPointerDownListener(document, onPointerish);\n  addPointerMoveListener(document, onPointerish);\n  addVisibilityChangeListener(document, onVisibilityChange); // fallbacks\n\n  addContextMenuListener(document, onPointerish);\n  addMouseDownListener(document, onPointerish);\n  addMouseMoveListener(document, onPointerish);\n  addMouseUpListener(document, onPointerish);\n  addTouchCancelListener(document, onPointerish);\n  addTouchMoveListener(document, onPointerish);\n  addTouchStartListener(document, onPointerish);\n  addSelectiomChangeListener(document, onPointerish);\n  addScrollListener(document, onPointerish);\n}\n\nfunction callListeners() {\n  var value = {\n    activeModality: activeModality,\n    modality: modality\n  };\n  listeners.forEach(function (listener) {\n    listener(value);\n  });\n}\n\nexport function getActiveModality() {\n  return activeModality;\n}\nexport function getModality() {\n  return modality;\n}\nexport function addModalityListener(listener) {\n  listeners.add(listener);\n  return function () {\n    listeners.delete(listener);\n  };\n}\nexport function testOnly_resetActiveModality() {\n  isEmulatingMouseEvents = false;\n  activeModality = KEYBOARD;\n  modality = KEYBOARD;\n}"]},"metadata":{},"sourceType":"module"}