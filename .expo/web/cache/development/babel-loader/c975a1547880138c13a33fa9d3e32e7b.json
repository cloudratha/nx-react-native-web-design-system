{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { getModality } from \"../modality\";\nimport useEvent from \"../useEvent\";\nimport useLayoutEffect from \"../useLayoutEffect\";\nvar emptyObject = {};\nvar opts = {\n  passive: true\n};\nvar lockEventType = 'react-gui:hover:lock';\nvar unlockEventType = 'react-gui:hover:unlock';\n\nvar supportsPointerEvent = function supportsPointerEvent() {\n  return !!(true && window.PointerEvent != null);\n};\n\nfunction dispatchCustomEvent(target, type, payload) {\n  var event = document.createEvent('CustomEvent');\n\n  var _ref = payload || emptyObject,\n      _ref$bubbles = _ref.bubbles,\n      bubbles = _ref$bubbles === void 0 ? true : _ref$bubbles,\n      _ref$cancelable = _ref.cancelable,\n      cancelable = _ref$cancelable === void 0 ? true : _ref$cancelable,\n      detail = _ref.detail;\n\n  event.initCustomEvent(type, bubbles, cancelable, detail);\n  target.dispatchEvent(event);\n}\n\nfunction getPointerType(event) {\n  var pointerType = event.pointerType;\n  return pointerType != null ? pointerType : getModality();\n}\n\nexport default function useHover(targetRef, config) {\n  _s();\n\n  var contain = config.contain,\n      disabled = config.disabled,\n      onHoverStart = config.onHoverStart,\n      onHoverChange = config.onHoverChange,\n      onHoverUpdate = config.onHoverUpdate,\n      onHoverEnd = config.onHoverEnd;\n  var canUsePE = supportsPointerEvent();\n  var addMoveListener = useEvent(canUsePE ? 'pointermove' : 'mousemove', opts);\n  var addEnterListener = useEvent(canUsePE ? 'pointerenter' : 'mouseenter', opts);\n  var addLeaveListener = useEvent(canUsePE ? 'pointerleave' : 'mouseleave', opts);\n  var addLockListener = useEvent(lockEventType, opts);\n  var addUnlockListener = useEvent(unlockEventType, opts);\n  useLayoutEffect(function () {\n    var target = targetRef.current;\n\n    if (target !== null) {\n      var hoverEnd = function hoverEnd(e) {\n        if (onHoverEnd != null) {\n          onHoverEnd(e);\n        }\n\n        if (onHoverChange != null) {\n          onHoverChange(false);\n        }\n\n        addMoveListener(target, null);\n        addLeaveListener(target, null);\n      };\n\n      var leaveListener = function leaveListener(e) {\n        var target = targetRef.current;\n\n        if (target != null && getPointerType(e) !== 'touch') {\n          if (contain) {\n            dispatchCustomEvent(target, unlockEventType);\n          }\n\n          hoverEnd(e);\n        }\n      };\n\n      var moveListener = function moveListener(e) {\n        if (getPointerType(e) !== 'touch') {\n          if (onHoverUpdate != null) {\n            if (e.x == null) {\n              e.x = e.clientX;\n            }\n\n            if (e.y == null) {\n              e.y = e.clientY;\n            }\n\n            onHoverUpdate(e);\n          }\n        }\n      };\n\n      var hoverStart = function hoverStart(e) {\n        if (onHoverStart != null) {\n          onHoverStart(e);\n        }\n\n        if (onHoverChange != null) {\n          onHoverChange(true);\n        }\n\n        if (onHoverUpdate != null) {\n          addMoveListener(target, !disabled ? moveListener : null);\n        }\n\n        addLeaveListener(target, !disabled ? leaveListener : null);\n      };\n\n      var enterListener = function enterListener(e) {\n        var target = targetRef.current;\n\n        if (target != null && getPointerType(e) !== 'touch') {\n          if (contain) {\n            dispatchCustomEvent(target, lockEventType);\n          }\n\n          hoverStart(e);\n\n          var lockListener = function lockListener(lockEvent) {\n            if (lockEvent.target !== target) {\n              hoverEnd(e);\n            }\n          };\n\n          var unlockListener = function unlockListener(lockEvent) {\n            if (lockEvent.target !== target) {\n              hoverStart(e);\n            }\n          };\n\n          addLockListener(target, !disabled ? lockListener : null);\n          addUnlockListener(target, !disabled ? unlockListener : null);\n        }\n      };\n\n      addEnterListener(target, !disabled ? enterListener : null);\n    }\n  }, [addEnterListener, addMoveListener, addLeaveListener, addLockListener, addUnlockListener, contain, disabled, onHoverStart, onHoverChange, onHoverUpdate, onHoverEnd, targetRef]);\n}\n\n_s(useHover, \"g4iJ6GD4DJLwcOSoAglFYqEaawk=\", false, function () {\n  return [useEvent, useEvent, useEvent, useEvent, useEvent];\n});\n\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/Users/garethcozens/Documents/repo/cloudratha/react-native-web-nx-demo/node_modules/react-native-web/dist/modules/useHover/index.js"],"names":["emptyObject","opts","passive","lockEventType","unlockEventType","supportsPointerEvent","window","event","document","_ref","payload","_ref$bubbles","bubbles","_ref$cancelable","cancelable","detail","target","pointerType","getModality","useHover","contain","config","disabled","onHoverStart","onHoverChange","onHoverUpdate","onHoverEnd","canUsePE","addMoveListener","useEvent","addEnterListener","addLeaveListener","addLockListener","addUnlockListener","useLayoutEffect","targetRef","hoverEnd","leaveListener","getPointerType","dispatchCustomEvent","moveListener","e","hoverStart","enterListener","lockListener","lockEvent","unlockListener"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { getModality } from '../modality';\nimport useEvent from '../useEvent';\nimport useLayoutEffect from '../useLayoutEffect';\n/**\n * Types\n */\n\n/**\n * Implementation\n */\nvar emptyObject = {};\nvar opts = {\n  passive: true\n};\nvar lockEventType = 'react-gui:hover:lock';\nvar unlockEventType = 'react-gui:hover:unlock';\n\nvar supportsPointerEvent = function supportsPointerEvent() {\n  return !!(typeof window !== 'undefined' && window.PointerEvent != null);\n};\n\nfunction dispatchCustomEvent(target, type, payload) {\n  var event = document.createEvent('CustomEvent');\n\n  var _ref = payload || emptyObject,\n      _ref$bubbles = _ref.bubbles,\n      bubbles = _ref$bubbles === void 0 ? true : _ref$bubbles,\n      _ref$cancelable = _ref.cancelable,\n      cancelable = _ref$cancelable === void 0 ? true : _ref$cancelable,\n      detail = _ref.detail;\n\n  event.initCustomEvent(type, bubbles, cancelable, detail);\n  target.dispatchEvent(event);\n} // This accounts for the non-PointerEvent fallback events.\n\n\nfunction getPointerType(event) {\n  var pointerType = event.pointerType;\n  return pointerType != null ? pointerType : getModality();\n}\n\nexport default function useHover(targetRef, config) {\n  var contain = config.contain,\n      disabled = config.disabled,\n      onHoverStart = config.onHoverStart,\n      onHoverChange = config.onHoverChange,\n      onHoverUpdate = config.onHoverUpdate,\n      onHoverEnd = config.onHoverEnd;\n  var canUsePE = supportsPointerEvent();\n  var addMoveListener = useEvent(canUsePE ? 'pointermove' : 'mousemove', opts);\n  var addEnterListener = useEvent(canUsePE ? 'pointerenter' : 'mouseenter', opts);\n  var addLeaveListener = useEvent(canUsePE ? 'pointerleave' : 'mouseleave', opts); // These custom events are used to implement the \"contain\" prop.\n\n  var addLockListener = useEvent(lockEventType, opts);\n  var addUnlockListener = useEvent(unlockEventType, opts);\n  useLayoutEffect(function () {\n    var target = targetRef.current;\n\n    if (target !== null) {\n      /**\n       * End the hover gesture\n       */\n      var hoverEnd = function hoverEnd(e) {\n        if (onHoverEnd != null) {\n          onHoverEnd(e);\n        }\n\n        if (onHoverChange != null) {\n          onHoverChange(false);\n        } // Remove the listeners once finished.\n\n\n        addMoveListener(target, null);\n        addLeaveListener(target, null);\n      };\n      /**\n       * Leave element\n       */\n\n\n      var leaveListener = function leaveListener(e) {\n        var target = targetRef.current;\n\n        if (target != null && getPointerType(e) !== 'touch') {\n          if (contain) {\n            dispatchCustomEvent(target, unlockEventType);\n          }\n\n          hoverEnd(e);\n        }\n      };\n      /**\n       * Move within element\n       */\n\n\n      var moveListener = function moveListener(e) {\n        if (getPointerType(e) !== 'touch') {\n          if (onHoverUpdate != null) {\n            // Not all browsers have these properties\n            if (e.x == null) {\n              e.x = e.clientX;\n            }\n\n            if (e.y == null) {\n              e.y = e.clientY;\n            }\n\n            onHoverUpdate(e);\n          }\n        }\n      };\n      /**\n       * Start the hover gesture\n       */\n\n\n      var hoverStart = function hoverStart(e) {\n        if (onHoverStart != null) {\n          onHoverStart(e);\n        }\n\n        if (onHoverChange != null) {\n          onHoverChange(true);\n        } // Set the listeners needed for the rest of the hover gesture.\n\n\n        if (onHoverUpdate != null) {\n          addMoveListener(target, !disabled ? moveListener : null);\n        }\n\n        addLeaveListener(target, !disabled ? leaveListener : null);\n      };\n      /**\n       * Enter element\n       */\n\n\n      var enterListener = function enterListener(e) {\n        var target = targetRef.current;\n\n        if (target != null && getPointerType(e) !== 'touch') {\n          if (contain) {\n            dispatchCustomEvent(target, lockEventType);\n          }\n\n          hoverStart(e);\n\n          var lockListener = function lockListener(lockEvent) {\n            if (lockEvent.target !== target) {\n              hoverEnd(e);\n            }\n          };\n\n          var unlockListener = function unlockListener(lockEvent) {\n            if (lockEvent.target !== target) {\n              hoverStart(e);\n            }\n          };\n\n          addLockListener(target, !disabled ? lockListener : null);\n          addUnlockListener(target, !disabled ? unlockListener : null);\n        }\n      };\n\n      addEnterListener(target, !disabled ? enterListener : null);\n    }\n  }, [addEnterListener, addMoveListener, addLeaveListener, addLockListener, addUnlockListener, contain, disabled, onHoverStart, onHoverChange, onHoverUpdate, onHoverEnd, targetRef]);\n}"]},"metadata":{},"sourceType":"module"}