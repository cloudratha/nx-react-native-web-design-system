{"ast":null,"code":"import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport createResponderEvent from \"./createResponderEvent\";\nimport { isCancelish, isEndish, isMoveish, isScroll, isSelectionChange, isStartish } from \"./ResponderEventTypes\";\nimport { getLowestCommonAncestor, getResponderPaths, hasTargetTouches, hasValidSelection, isPrimaryPointerDown, setResponderId } from \"./utils\";\nimport ResponderTouchHistoryStore from \"./ResponderTouchHistoryStore\";\nvar emptyObject = {};\nvar startRegistration = ['onStartShouldSetResponderCapture', 'onStartShouldSetResponder', {\n  bubbles: true\n}];\nvar moveRegistration = ['onMoveShouldSetResponderCapture', 'onMoveShouldSetResponder', {\n  bubbles: true\n}];\nvar scrollRegistration = ['onScrollShouldSetResponderCapture', 'onScrollShouldSetResponder', {\n  bubbles: false\n}];\nvar shouldSetResponderEvents = {\n  touchstart: startRegistration,\n  mousedown: startRegistration,\n  touchmove: moveRegistration,\n  mousemove: moveRegistration,\n  scroll: scrollRegistration\n};\nvar emptyResponder = {\n  id: null,\n  idPath: null,\n  node: null\n};\nvar responderListenersMap = new Map();\nvar isEmulatingMouseEvents = false;\nvar trackedTouchCount = 0;\nvar currentResponder = {\n  id: null,\n  node: null,\n  idPath: null\n};\n\nfunction changeCurrentResponder(responder) {\n  currentResponder = responder;\n}\n\nfunction getResponderConfig(id) {\n  var config = responderListenersMap.get(id);\n  return config != null ? config : emptyObject;\n}\n\nfunction eventListener(domEvent) {\n  var eventType = domEvent.type;\n  var eventTarget = domEvent.target;\n\n  if (eventType === 'touchstart') {\n    isEmulatingMouseEvents = true;\n  }\n\n  if (eventType === 'touchmove' || trackedTouchCount > 1) {\n    isEmulatingMouseEvents = false;\n  }\n\n  if (eventType === 'mousedown' && isEmulatingMouseEvents || eventType === 'mousemove' && isEmulatingMouseEvents || eventType === 'mousemove' && trackedTouchCount < 1) {\n    return;\n  }\n\n  if (isEmulatingMouseEvents && eventType === 'mouseup') {\n    if (trackedTouchCount === 0) {\n      isEmulatingMouseEvents = false;\n    }\n\n    return;\n  }\n\n  var isStartEvent = isStartish(eventType) && isPrimaryPointerDown(domEvent);\n  var isMoveEvent = isMoveish(eventType);\n  var isEndEvent = isEndish(eventType);\n  var isScrollEvent = isScroll(eventType);\n  var isSelectionChangeEvent = isSelectionChange(eventType);\n  var responderEvent = createResponderEvent(domEvent);\n\n  if (isStartEvent || isMoveEvent || isEndEvent) {\n    if (domEvent.touches) {\n      trackedTouchCount = domEvent.touches.length;\n    } else {\n      if (isStartEvent) {\n        trackedTouchCount = 1;\n      } else if (isEndEvent) {\n        trackedTouchCount = 0;\n      }\n    }\n\n    ResponderTouchHistoryStore.recordTouchTrack(eventType, responderEvent.nativeEvent);\n  }\n\n  var eventPaths = getResponderPaths(domEvent);\n  var wasNegotiated = false;\n  var wantsResponder;\n\n  if (isStartEvent || isMoveEvent || isScrollEvent && trackedTouchCount > 0) {\n    var currentResponderIdPath = currentResponder.idPath;\n    var eventIdPath = eventPaths.idPath;\n\n    if (currentResponderIdPath != null && eventIdPath != null) {\n      var lowestCommonAncestor = getLowestCommonAncestor(currentResponderIdPath, eventIdPath);\n\n      if (lowestCommonAncestor != null) {\n        var indexOfLowestCommonAncestor = eventIdPath.indexOf(lowestCommonAncestor);\n        var index = indexOfLowestCommonAncestor + (lowestCommonAncestor === currentResponder.id ? 1 : 0);\n        eventPaths = {\n          idPath: eventIdPath.slice(index),\n          nodePath: eventPaths.nodePath.slice(index)\n        };\n      } else {\n        eventPaths = null;\n      }\n    }\n\n    if (eventPaths != null) {\n      wantsResponder = findWantsResponder(eventPaths, domEvent, responderEvent);\n\n      if (wantsResponder != null) {\n        attemptTransfer(responderEvent, wantsResponder);\n        wasNegotiated = true;\n      }\n    }\n  }\n\n  if (currentResponder.id != null && currentResponder.node != null) {\n    var _currentResponder = currentResponder,\n        id = _currentResponder.id,\n        node = _currentResponder.node;\n\n    var _getResponderConfig = getResponderConfig(id),\n        onResponderStart = _getResponderConfig.onResponderStart,\n        onResponderMove = _getResponderConfig.onResponderMove,\n        onResponderEnd = _getResponderConfig.onResponderEnd,\n        onResponderRelease = _getResponderConfig.onResponderRelease,\n        onResponderTerminate = _getResponderConfig.onResponderTerminate,\n        onResponderTerminationRequest = _getResponderConfig.onResponderTerminationRequest;\n\n    responderEvent.bubbles = false;\n    responderEvent.cancelable = false;\n    responderEvent.currentTarget = node;\n\n    if (isStartEvent) {\n      if (onResponderStart != null) {\n        responderEvent.dispatchConfig.registrationName = 'onResponderStart';\n        onResponderStart(responderEvent);\n      }\n    } else if (isMoveEvent) {\n      if (onResponderMove != null) {\n        responderEvent.dispatchConfig.registrationName = 'onResponderMove';\n        onResponderMove(responderEvent);\n      }\n    } else {\n      var isTerminateEvent = isCancelish(eventType) || eventType === 'contextmenu' || eventType === 'blur' && eventTarget === window || eventType === 'blur' && eventTarget.contains(node) && domEvent.relatedTarget !== node || isScrollEvent && trackedTouchCount === 0 || isScrollEvent && eventTarget.contains(node) && eventTarget !== node || isSelectionChangeEvent && hasValidSelection(domEvent);\n      var isReleaseEvent = isEndEvent && !isTerminateEvent && !hasTargetTouches(node, domEvent.touches);\n\n      if (isEndEvent) {\n        if (onResponderEnd != null) {\n          responderEvent.dispatchConfig.registrationName = 'onResponderEnd';\n          onResponderEnd(responderEvent);\n        }\n      }\n\n      if (isReleaseEvent) {\n        if (onResponderRelease != null) {\n          responderEvent.dispatchConfig.registrationName = 'onResponderRelease';\n          onResponderRelease(responderEvent);\n        }\n\n        changeCurrentResponder(emptyResponder);\n      }\n\n      if (isTerminateEvent) {\n        var shouldTerminate = true;\n\n        if (eventType === 'contextmenu' || eventType === 'scroll' || eventType === 'selectionchange') {\n          if (wasNegotiated) {\n            shouldTerminate = false;\n          } else if (onResponderTerminationRequest != null) {\n            responderEvent.dispatchConfig.registrationName = 'onResponderTerminationRequest';\n\n            if (onResponderTerminationRequest(responderEvent) === false) {\n              shouldTerminate = false;\n            }\n          }\n        }\n\n        if (shouldTerminate) {\n          if (onResponderTerminate != null) {\n            responderEvent.dispatchConfig.registrationName = 'onResponderTerminate';\n            onResponderTerminate(responderEvent);\n          }\n\n          changeCurrentResponder(emptyResponder);\n          isEmulatingMouseEvents = false;\n          trackedTouchCount = 0;\n        }\n      }\n    }\n  }\n}\n\nfunction findWantsResponder(eventPaths, domEvent, responderEvent) {\n  var shouldSetCallbacks = shouldSetResponderEvents[domEvent.type];\n\n  if (shouldSetCallbacks != null) {\n    var idPath = eventPaths.idPath,\n        nodePath = eventPaths.nodePath;\n    var shouldSetCallbackCaptureName = shouldSetCallbacks[0];\n    var shouldSetCallbackBubbleName = shouldSetCallbacks[1];\n    var bubbles = shouldSetCallbacks[2].bubbles;\n\n    var check = function check(id, node, callbackName) {\n      var config = getResponderConfig(id);\n      var shouldSetCallback = config[callbackName];\n\n      if (shouldSetCallback != null) {\n        responderEvent.currentTarget = node;\n\n        if (shouldSetCallback(responderEvent) === true) {\n          var prunedIdPath = idPath.slice(idPath.indexOf(id));\n          return {\n            id: id,\n            node: node,\n            idPath: prunedIdPath\n          };\n        }\n      }\n    };\n\n    for (var i = idPath.length - 1; i >= 0; i--) {\n      var id = idPath[i];\n      var node = nodePath[i];\n      var result = check(id, node, shouldSetCallbackCaptureName);\n\n      if (result != null) {\n        return result;\n      }\n\n      if (responderEvent.isPropagationStopped() === true) {\n        return;\n      }\n    }\n\n    if (bubbles) {\n      for (var _i = 0; _i < idPath.length; _i++) {\n        var _id = idPath[_i];\n        var _node = nodePath[_i];\n\n        var _result = check(_id, _node, shouldSetCallbackBubbleName);\n\n        if (_result != null) {\n          return _result;\n        }\n\n        if (responderEvent.isPropagationStopped() === true) {\n          return;\n        }\n      }\n    } else {\n      var _id2 = idPath[0];\n      var _node2 = nodePath[0];\n      var target = domEvent.target;\n\n      if (target === _node2) {\n        return check(_id2, _node2, shouldSetCallbackBubbleName);\n      }\n    }\n  }\n}\n\nfunction attemptTransfer(responderEvent, wantsResponder) {\n  var _currentResponder2 = currentResponder,\n      currentId = _currentResponder2.id,\n      currentNode = _currentResponder2.node;\n  var id = wantsResponder.id,\n      node = wantsResponder.node;\n\n  var _getResponderConfig2 = getResponderConfig(id),\n      onResponderGrant = _getResponderConfig2.onResponderGrant,\n      onResponderReject = _getResponderConfig2.onResponderReject;\n\n  responderEvent.bubbles = false;\n  responderEvent.cancelable = false;\n  responderEvent.currentTarget = node;\n\n  if (currentId == null) {\n    if (onResponderGrant != null) {\n      responderEvent.currentTarget = node;\n      responderEvent.dispatchConfig.registrationName = 'onResponderGrant';\n      onResponderGrant(responderEvent);\n    }\n\n    changeCurrentResponder(wantsResponder);\n  } else {\n    var _getResponderConfig3 = getResponderConfig(currentId),\n        onResponderTerminate = _getResponderConfig3.onResponderTerminate,\n        onResponderTerminationRequest = _getResponderConfig3.onResponderTerminationRequest;\n\n    var allowTransfer = true;\n\n    if (onResponderTerminationRequest != null) {\n      responderEvent.currentTarget = currentNode;\n      responderEvent.dispatchConfig.registrationName = 'onResponderTerminationRequest';\n\n      if (onResponderTerminationRequest(responderEvent) === false) {\n        allowTransfer = false;\n      }\n    }\n\n    if (allowTransfer) {\n      if (onResponderTerminate != null) {\n        responderEvent.currentTarget = currentNode;\n        responderEvent.dispatchConfig.registrationName = 'onResponderTerminate';\n        onResponderTerminate(responderEvent);\n      }\n\n      if (onResponderGrant != null) {\n        responderEvent.currentTarget = node;\n        responderEvent.dispatchConfig.registrationName = 'onResponderGrant';\n        onResponderGrant(responderEvent);\n      }\n\n      changeCurrentResponder(wantsResponder);\n    } else {\n      if (onResponderReject != null) {\n        responderEvent.currentTarget = node;\n        responderEvent.dispatchConfig.registrationName = 'onResponderReject';\n        onResponderReject(responderEvent);\n      }\n    }\n  }\n}\n\nvar documentEventsCapturePhase = ['blur', 'scroll'];\nvar documentEventsBubblePhase = ['mousedown', 'mousemove', 'mouseup', 'dragstart', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'contextmenu', 'select', 'selectionchange'];\nexport function attachListeners() {\n  if (canUseDOM && window.__reactResponderSystemActive == null) {\n    window.addEventListener('blur', eventListener);\n    documentEventsBubblePhase.forEach(function (eventType) {\n      document.addEventListener(eventType, eventListener);\n    });\n    documentEventsCapturePhase.forEach(function (eventType) {\n      document.addEventListener(eventType, eventListener, true);\n    });\n    window.__reactResponderSystemActive = true;\n  }\n}\nexport function addNode(id, node, config) {\n  setResponderId(node, id);\n  responderListenersMap.set(id, config);\n}\nexport function removeNode(id) {\n  if (currentResponder.id === id) {\n    terminateResponder();\n  }\n\n  if (responderListenersMap.has(id)) {\n    responderListenersMap[\"delete\"](id);\n  }\n}\nexport function terminateResponder() {\n  var _currentResponder3 = currentResponder,\n      id = _currentResponder3.id,\n      node = _currentResponder3.node;\n\n  if (id != null && node != null) {\n    var _getResponderConfig4 = getResponderConfig(id),\n        onResponderTerminate = _getResponderConfig4.onResponderTerminate;\n\n    if (onResponderTerminate != null) {\n      var event = createResponderEvent({});\n      event.currentTarget = node;\n      onResponderTerminate(event);\n    }\n\n    changeCurrentResponder(emptyResponder);\n  }\n\n  isEmulatingMouseEvents = false;\n  trackedTouchCount = 0;\n}\nexport function getResponderNode() {\n  return currentResponder.node;\n}\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/Users/garethcozens/Documents/repo/cloudratha/react-native-web-nx-demo/node_modules/react-native-web/dist/modules/useResponderEvents/ResponderSystem.js"],"names":["emptyObject","startRegistration","bubbles","moveRegistration","scrollRegistration","shouldSetResponderEvents","touchstart","mousedown","touchmove","mousemove","scroll","emptyResponder","id","idPath","node","responderListenersMap","isEmulatingMouseEvents","trackedTouchCount","currentResponder","config","eventType","domEvent","eventTarget","isStartEvent","isStartish","isPrimaryPointerDown","isMoveEvent","isMoveish","isEndEvent","isEndish","isScrollEvent","isScroll","isSelectionChangeEvent","isSelectionChange","responderEvent","createResponderEvent","ResponderTouchHistoryStore","eventPaths","getResponderPaths","wasNegotiated","currentResponderIdPath","eventIdPath","lowestCommonAncestor","getLowestCommonAncestor","indexOfLowestCommonAncestor","index","nodePath","wantsResponder","findWantsResponder","attemptTransfer","_currentResponder","_getResponderConfig","getResponderConfig","onResponderStart","onResponderMove","onResponderEnd","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","isTerminateEvent","isCancelish","hasValidSelection","isReleaseEvent","hasTargetTouches","changeCurrentResponder","shouldTerminate","shouldSetCallbacks","shouldSetCallbackCaptureName","shouldSetCallbackBubbleName","check","shouldSetCallback","prunedIdPath","i","result","_i","_id","_node","_result","_id2","_node2","target","_currentResponder2","currentId","currentNode","_getResponderConfig2","onResponderGrant","onResponderReject","_getResponderConfig3","allowTransfer","documentEventsCapturePhase","documentEventsBubblePhase","canUseDOM","window","document","setResponderId","terminateResponder","_currentResponder3","_getResponderConfig4","event"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * RESPONDER EVENT SYSTEM\n *\n * A single, global \"interaction lock\" on views. For a view to be the \"responder\" means\n * that pointer interactions are exclusive to that view and none other. The \"interaction\n * lock\" can be transferred (only) to ancestors of the current \"responder\" as long as\n * pointers continue to be active.\n *\n * Responder being granted:\n *\n * A view can become the \"responder\" after the following events:\n *  * \"pointerdown\" (implemented using \"touchstart\", \"mousedown\")\n *  * \"pointermove\" (implemented using \"touchmove\", \"mousemove\")\n *  * \"scroll\" (while a pointer is down)\n *  * \"selectionchange\" (while a pointer is down)\n *\n * If nothing is already the \"responder\", the event propagates to (capture) and from\n * (bubble) the event target until a view returns `true` for\n * `on*ShouldSetResponder(Capture)`.\n *\n * If something is already the responder, the event propagates to (capture) and from\n * (bubble) the lowest common ancestor of the event target and the current \"responder\".\n * Then negotiation happens between the current \"responder\" and a view that wants to\n * become the \"responder\": see the timing diagram below.\n *\n * (NOTE: Scrolled views either automatically become the \"responder\" or release the\n * \"interaction lock\". A native scroll view that isn't built on top of the responder\n * system must result in the current \"responder\" being notified that it no longer has\n * the \"interaction lock\" - the native system has taken over.\n *\n * Responder being released:\n *\n * As soon as there are no more active pointers that *started* inside descendants\n * of the *current* \"responder\", an `onResponderRelease` event is dispatched to the\n * current \"responder\", and the responder lock is released.\n *\n * Typical sequence of events:\n *  * startShouldSetResponder\n *  * responderGrant/Reject\n *  * responderStart\n *  * responderMove\n *  * responderEnd\n *  * responderRelease\n */\n\n/*                                             Negotiation Performed\n                                             +-----------------------+\n                                            /                         \\\nProcess low level events to    +     Current Responder      +   wantsResponderID\ndetermine who to perform negot-|   (if any exists at all)   |\niation/transition              | Otherwise just pass through|\n-------------------------------+----------------------------+------------------+\nBubble to find first ID        |                            |\nto return true:wantsResponderID|                            |\n                               |                            |\n     +--------------+          |                            |\n     | onTouchStart |          |                            |\n     +------+-------+    none  |                            |\n            |            return|                            |\n+-----------v-------------+true| +------------------------+ |\n|onStartShouldSetResponder|----->| onResponderStart (cur) |<-----------+\n+-----------+-------------+    | +------------------------+ |          |\n            |                  |                            | +--------+-------+\n            | returned true for|       false:REJECT +-------->|onResponderReject\n            | wantsResponderID |                    |       | +----------------+\n            | (now attempt     | +------------------+-----+ |\n            |  handoff)        | | onResponder            | |\n            +------------------->|    TerminationRequest  | |\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |         true:GRANT +-------->|onResponderGrant|\n                               |                            | +--------+-------+\n                               | +------------------------+ |          |\n                               | | onResponderTerminate   |<-----------+\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |                    +-------->|onResponderStart|\n                               |                            | +----------------+\nBubble to find first ID        |                            |\nto return true:wantsResponderID|                            |\n                               |                            |\n     +-------------+           |                            |\n     | onTouchMove |           |                            |\n     +------+------+     none  |                            |\n            |            return|                            |\n+-----------v-------------+true| +------------------------+ |\n|onMoveShouldSetResponder |----->| onResponderMove (cur)  |<-----------+\n+-----------+-------------+    | +------------------------+ |          |\n            |                  |                            | +--------+-------+\n            | returned true for|       false:REJECT +-------->|onResponderReject\n            | wantsResponderID |                    |       | +----------------+\n            | (now attempt     | +------------------+-----+ |\n            |  handoff)        | |   onResponder          | |\n            +------------------->|      TerminationRequest| |\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |         true:GRANT +-------->|onResponderGrant|\n                               |                            | +--------+-------+\n                               | +------------------------+ |          |\n                               | |   onResponderTerminate |<-----------+\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |                    +-------->|onResponderMove |\n                               |                            | +----------------+\n                               |                            |\n                               |                            |\n      Some active touch started|                            |\n      inside current responder | +------------------------+ |\n      +------------------------->|      onResponderEnd    | |\n      |                        | +------------------------+ |\n  +---+---------+              |                            |\n  | onTouchEnd  |              |                            |\n  +---+---------+              |                            |\n      |                        | +------------------------+ |\n      +------------------------->|     onResponderEnd     | |\n      No active touches started| +-----------+------------+ |\n      inside current responder |             |              |\n                               |             v              |\n                               | +------------------------+ |\n                               | |    onResponderRelease  | |\n                               | +------------------------+ |\n                               |                            |\n                               +                            + */\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport createResponderEvent from './createResponderEvent';\nimport { isCancelish, isEndish, isMoveish, isScroll, isSelectionChange, isStartish } from './ResponderEventTypes';\nimport { getLowestCommonAncestor, getResponderPaths, hasTargetTouches, hasValidSelection, isPrimaryPointerDown, setResponderId } from './utils';\nimport ResponderTouchHistoryStore from './ResponderTouchHistoryStore';\n/* ------------ TYPES ------------ */\n\nvar emptyObject = {};\n/* ------------ IMPLEMENTATION ------------ */\n\nvar startRegistration = ['onStartShouldSetResponderCapture', 'onStartShouldSetResponder', {\n  bubbles: true\n}];\nvar moveRegistration = ['onMoveShouldSetResponderCapture', 'onMoveShouldSetResponder', {\n  bubbles: true\n}];\nvar scrollRegistration = ['onScrollShouldSetResponderCapture', 'onScrollShouldSetResponder', {\n  bubbles: false\n}];\nvar shouldSetResponderEvents = {\n  touchstart: startRegistration,\n  mousedown: startRegistration,\n  touchmove: moveRegistration,\n  mousemove: moveRegistration,\n  scroll: scrollRegistration\n};\nvar emptyResponder = {\n  id: null,\n  idPath: null,\n  node: null\n};\nvar responderListenersMap = new Map();\nvar isEmulatingMouseEvents = false;\nvar trackedTouchCount = 0;\nvar currentResponder = {\n  id: null,\n  node: null,\n  idPath: null\n};\n\nfunction changeCurrentResponder(responder) {\n  currentResponder = responder;\n}\n\nfunction getResponderConfig(id) {\n  var config = responderListenersMap.get(id);\n  return config != null ? config : emptyObject;\n}\n/**\n * Process native events\n *\n * A single event listener is used to manage the responder system.\n * All pointers are tracked in the ResponderTouchHistoryStore. Native events\n * are interpreted in terms of the Responder System and checked to see if\n * the responder should be transferred. Each host node that is attached to\n * the Responder System has an ID, which is used to look up its associated\n * callbacks.\n */\n\n\nfunction eventListener(domEvent) {\n  var eventType = domEvent.type;\n  var eventTarget = domEvent.target;\n  /**\n   * Manage emulated events and early bailout.\n   * Since PointerEvent is not used yet (lack of support in older Safari), it's\n   * necessary to manually manage the mess of browser touch/mouse events.\n   * And bailout early for termination events when there is no active responder.\n   */\n  // Flag when browser may produce emulated events\n\n  if (eventType === 'touchstart') {\n    isEmulatingMouseEvents = true;\n  } // Remove flag when browser will not produce emulated events\n\n\n  if (eventType === 'touchmove' || trackedTouchCount > 1) {\n    isEmulatingMouseEvents = false;\n  } // Ignore various events in particular circumstances\n\n\n  if ( // Ignore browser emulated mouse events\n  eventType === 'mousedown' && isEmulatingMouseEvents || eventType === 'mousemove' && isEmulatingMouseEvents || // Ignore mousemove if a mousedown didn't occur first\n  eventType === 'mousemove' && trackedTouchCount < 1) {\n    return;\n  } // Remove flag after emulated events are finished\n\n\n  if (isEmulatingMouseEvents && eventType === 'mouseup') {\n    if (trackedTouchCount === 0) {\n      isEmulatingMouseEvents = false;\n    }\n\n    return;\n  }\n\n  var isStartEvent = isStartish(eventType) && isPrimaryPointerDown(domEvent);\n  var isMoveEvent = isMoveish(eventType);\n  var isEndEvent = isEndish(eventType);\n  var isScrollEvent = isScroll(eventType);\n  var isSelectionChangeEvent = isSelectionChange(eventType);\n  var responderEvent = createResponderEvent(domEvent);\n  /**\n   * Record the state of active pointers\n   */\n\n  if (isStartEvent || isMoveEvent || isEndEvent) {\n    if (domEvent.touches) {\n      trackedTouchCount = domEvent.touches.length;\n    } else {\n      if (isStartEvent) {\n        trackedTouchCount = 1;\n      } else if (isEndEvent) {\n        trackedTouchCount = 0;\n      }\n    }\n\n    ResponderTouchHistoryStore.recordTouchTrack(eventType, responderEvent.nativeEvent);\n  }\n  /**\n   * Responder System logic\n   */\n\n\n  var eventPaths = getResponderPaths(domEvent);\n  var wasNegotiated = false;\n  var wantsResponder; // If an event occured that might change the current responder...\n\n  if (isStartEvent || isMoveEvent || isScrollEvent && trackedTouchCount > 0) {\n    // If there is already a responder, prune the event paths to the lowest common ancestor\n    // of the existing responder and deepest target of the event.\n    var currentResponderIdPath = currentResponder.idPath;\n    var eventIdPath = eventPaths.idPath;\n\n    if (currentResponderIdPath != null && eventIdPath != null) {\n      var lowestCommonAncestor = getLowestCommonAncestor(currentResponderIdPath, eventIdPath);\n\n      if (lowestCommonAncestor != null) {\n        var indexOfLowestCommonAncestor = eventIdPath.indexOf(lowestCommonAncestor); // Skip the current responder so it doesn't receive unexpected \"shouldSet\" events.\n\n        var index = indexOfLowestCommonAncestor + (lowestCommonAncestor === currentResponder.id ? 1 : 0);\n        eventPaths = {\n          idPath: eventIdPath.slice(index),\n          nodePath: eventPaths.nodePath.slice(index)\n        };\n      } else {\n        eventPaths = null;\n      }\n    }\n\n    if (eventPaths != null) {\n      // If a node wants to become the responder, attempt to transfer.\n      wantsResponder = findWantsResponder(eventPaths, domEvent, responderEvent);\n\n      if (wantsResponder != null) {\n        // Sets responder if none exists, or negotates with existing responder.\n        attemptTransfer(responderEvent, wantsResponder);\n        wasNegotiated = true;\n      }\n    }\n  } // If there is now a responder, invoke its callbacks for the lifecycle of the gesture.\n\n\n  if (currentResponder.id != null && currentResponder.node != null) {\n    var _currentResponder = currentResponder,\n        id = _currentResponder.id,\n        node = _currentResponder.node;\n\n    var _getResponderConfig = getResponderConfig(id),\n        onResponderStart = _getResponderConfig.onResponderStart,\n        onResponderMove = _getResponderConfig.onResponderMove,\n        onResponderEnd = _getResponderConfig.onResponderEnd,\n        onResponderRelease = _getResponderConfig.onResponderRelease,\n        onResponderTerminate = _getResponderConfig.onResponderTerminate,\n        onResponderTerminationRequest = _getResponderConfig.onResponderTerminationRequest;\n\n    responderEvent.bubbles = false;\n    responderEvent.cancelable = false;\n    responderEvent.currentTarget = node; // Start\n\n    if (isStartEvent) {\n      if (onResponderStart != null) {\n        responderEvent.dispatchConfig.registrationName = 'onResponderStart';\n        onResponderStart(responderEvent);\n      }\n    } // Move\n    else if (isMoveEvent) {\n        if (onResponderMove != null) {\n          responderEvent.dispatchConfig.registrationName = 'onResponderMove';\n          onResponderMove(responderEvent);\n        }\n      } else {\n        var isTerminateEvent = isCancelish(eventType) || // native context menu\n        eventType === 'contextmenu' || // window blur\n        eventType === 'blur' && eventTarget === window || // responder (or ancestors) blur\n        eventType === 'blur' && eventTarget.contains(node) && domEvent.relatedTarget !== node || // native scroll without using a pointer\n        isScrollEvent && trackedTouchCount === 0 || // native scroll on node that is parent of the responder (allow siblings to scroll)\n        isScrollEvent && eventTarget.contains(node) && eventTarget !== node || // native select/selectionchange on node\n        isSelectionChangeEvent && hasValidSelection(domEvent);\n        var isReleaseEvent = isEndEvent && !isTerminateEvent && !hasTargetTouches(node, domEvent.touches); // End\n\n        if (isEndEvent) {\n          if (onResponderEnd != null) {\n            responderEvent.dispatchConfig.registrationName = 'onResponderEnd';\n            onResponderEnd(responderEvent);\n          }\n        } // Release\n\n\n        if (isReleaseEvent) {\n          if (onResponderRelease != null) {\n            responderEvent.dispatchConfig.registrationName = 'onResponderRelease';\n            onResponderRelease(responderEvent);\n          }\n\n          changeCurrentResponder(emptyResponder);\n        } // Terminate\n\n\n        if (isTerminateEvent) {\n          var shouldTerminate = true; // Responders can still avoid termination but only for these events.\n\n          if (eventType === 'contextmenu' || eventType === 'scroll' || eventType === 'selectionchange') {\n            // Only call this function is it wasn't already called during negotiation.\n            if (wasNegotiated) {\n              shouldTerminate = false;\n            } else if (onResponderTerminationRequest != null) {\n              responderEvent.dispatchConfig.registrationName = 'onResponderTerminationRequest';\n\n              if (onResponderTerminationRequest(responderEvent) === false) {\n                shouldTerminate = false;\n              }\n            }\n          }\n\n          if (shouldTerminate) {\n            if (onResponderTerminate != null) {\n              responderEvent.dispatchConfig.registrationName = 'onResponderTerminate';\n              onResponderTerminate(responderEvent);\n            }\n\n            changeCurrentResponder(emptyResponder);\n            isEmulatingMouseEvents = false;\n            trackedTouchCount = 0;\n          }\n        }\n      }\n  }\n}\n/**\n * Walk the event path to/from the target node. At each node, stop and call the\n * relevant \"shouldSet\" functions for the given event type. If any of those functions\n * call \"stopPropagation\" on the event, stop searching for a responder.\n */\n\n\nfunction findWantsResponder(eventPaths, domEvent, responderEvent) {\n  var shouldSetCallbacks = shouldSetResponderEvents[domEvent.type]; // for Flow\n\n  if (shouldSetCallbacks != null) {\n    var idPath = eventPaths.idPath,\n        nodePath = eventPaths.nodePath;\n    var shouldSetCallbackCaptureName = shouldSetCallbacks[0];\n    var shouldSetCallbackBubbleName = shouldSetCallbacks[1];\n    var bubbles = shouldSetCallbacks[2].bubbles;\n\n    var check = function check(id, node, callbackName) {\n      var config = getResponderConfig(id);\n      var shouldSetCallback = config[callbackName];\n\n      if (shouldSetCallback != null) {\n        responderEvent.currentTarget = node;\n\n        if (shouldSetCallback(responderEvent) === true) {\n          // Start the path from the potential responder\n          var prunedIdPath = idPath.slice(idPath.indexOf(id));\n          return {\n            id: id,\n            node: node,\n            idPath: prunedIdPath\n          };\n        }\n      }\n    }; // capture\n\n\n    for (var i = idPath.length - 1; i >= 0; i--) {\n      var id = idPath[i];\n      var node = nodePath[i];\n      var result = check(id, node, shouldSetCallbackCaptureName);\n\n      if (result != null) {\n        return result;\n      }\n\n      if (responderEvent.isPropagationStopped() === true) {\n        return;\n      }\n    } // bubble\n\n\n    if (bubbles) {\n      for (var _i = 0; _i < idPath.length; _i++) {\n        var _id = idPath[_i];\n        var _node = nodePath[_i];\n\n        var _result = check(_id, _node, shouldSetCallbackBubbleName);\n\n        if (_result != null) {\n          return _result;\n        }\n\n        if (responderEvent.isPropagationStopped() === true) {\n          return;\n        }\n      }\n    } else {\n      var _id2 = idPath[0];\n      var _node2 = nodePath[0];\n      var target = domEvent.target;\n\n      if (target === _node2) {\n        return check(_id2, _node2, shouldSetCallbackBubbleName);\n      }\n    }\n  }\n}\n/**\n * Attempt to transfer the responder.\n */\n\n\nfunction attemptTransfer(responderEvent, wantsResponder) {\n  var _currentResponder2 = currentResponder,\n      currentId = _currentResponder2.id,\n      currentNode = _currentResponder2.node;\n  var id = wantsResponder.id,\n      node = wantsResponder.node;\n\n  var _getResponderConfig2 = getResponderConfig(id),\n      onResponderGrant = _getResponderConfig2.onResponderGrant,\n      onResponderReject = _getResponderConfig2.onResponderReject;\n\n  responderEvent.bubbles = false;\n  responderEvent.cancelable = false;\n  responderEvent.currentTarget = node; // Set responder\n\n  if (currentId == null) {\n    if (onResponderGrant != null) {\n      responderEvent.currentTarget = node;\n      responderEvent.dispatchConfig.registrationName = 'onResponderGrant';\n      onResponderGrant(responderEvent);\n    }\n\n    changeCurrentResponder(wantsResponder);\n  } // Negotiate with current responder\n  else {\n      var _getResponderConfig3 = getResponderConfig(currentId),\n          onResponderTerminate = _getResponderConfig3.onResponderTerminate,\n          onResponderTerminationRequest = _getResponderConfig3.onResponderTerminationRequest;\n\n      var allowTransfer = true;\n\n      if (onResponderTerminationRequest != null) {\n        responderEvent.currentTarget = currentNode;\n        responderEvent.dispatchConfig.registrationName = 'onResponderTerminationRequest';\n\n        if (onResponderTerminationRequest(responderEvent) === false) {\n          allowTransfer = false;\n        }\n      }\n\n      if (allowTransfer) {\n        // Terminate existing responder\n        if (onResponderTerminate != null) {\n          responderEvent.currentTarget = currentNode;\n          responderEvent.dispatchConfig.registrationName = 'onResponderTerminate';\n          onResponderTerminate(responderEvent);\n        } // Grant next responder\n\n\n        if (onResponderGrant != null) {\n          responderEvent.currentTarget = node;\n          responderEvent.dispatchConfig.registrationName = 'onResponderGrant';\n          onResponderGrant(responderEvent);\n        }\n\n        changeCurrentResponder(wantsResponder);\n      } else {\n        // Reject responder request\n        if (onResponderReject != null) {\n          responderEvent.currentTarget = node;\n          responderEvent.dispatchConfig.registrationName = 'onResponderReject';\n          onResponderReject(responderEvent);\n        }\n      }\n    }\n}\n/* ------------ PUBLIC API ------------ */\n\n/**\n * Attach Listeners\n *\n * Use native events as ReactDOM doesn't have a non-plugin API to implement\n * this system.\n */\n\n\nvar documentEventsCapturePhase = ['blur', 'scroll'];\nvar documentEventsBubblePhase = [// mouse\n'mousedown', 'mousemove', 'mouseup', 'dragstart', // touch\n'touchstart', 'touchmove', 'touchend', 'touchcancel', // other\n'contextmenu', 'select', 'selectionchange'];\nexport function attachListeners() {\n  if (canUseDOM && window.__reactResponderSystemActive == null) {\n    window.addEventListener('blur', eventListener);\n    documentEventsBubblePhase.forEach(function (eventType) {\n      document.addEventListener(eventType, eventListener);\n    });\n    documentEventsCapturePhase.forEach(function (eventType) {\n      document.addEventListener(eventType, eventListener, true);\n    });\n    window.__reactResponderSystemActive = true;\n  }\n}\n/**\n * Register a node with the ResponderSystem.\n */\n\nexport function addNode(id, node, config) {\n  setResponderId(node, id);\n  responderListenersMap.set(id, config);\n}\n/**\n * Unregister a node with the ResponderSystem.\n */\n\nexport function removeNode(id) {\n  if (currentResponder.id === id) {\n    terminateResponder();\n  }\n\n  if (responderListenersMap.has(id)) {\n    responderListenersMap.delete(id);\n  }\n}\n/**\n * Allow the current responder to be terminated from within components to support\n * more complex requirements, such as use with other React libraries for working\n * with scroll views, input views, etc.\n */\n\nexport function terminateResponder() {\n  var _currentResponder3 = currentResponder,\n      id = _currentResponder3.id,\n      node = _currentResponder3.node;\n\n  if (id != null && node != null) {\n    var _getResponderConfig4 = getResponderConfig(id),\n        onResponderTerminate = _getResponderConfig4.onResponderTerminate;\n\n    if (onResponderTerminate != null) {\n      var event = createResponderEvent({});\n      event.currentTarget = node;\n      onResponderTerminate(event);\n    }\n\n    changeCurrentResponder(emptyResponder);\n  }\n\n  isEmulatingMouseEvents = false;\n  trackedTouchCount = 0;\n}\n/**\n * Allow unit tests to inspect the current responder in the system.\n * FOR TESTING ONLY.\n */\n\nexport function getResponderNode() {\n  return currentResponder.node;\n}"]},"metadata":{},"sourceType":"module"}