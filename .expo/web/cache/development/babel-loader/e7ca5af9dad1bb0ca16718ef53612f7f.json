{"ast":null,"code":"'use strict';\n\nvar _s = $RefreshSig$();\n\nimport PressResponder from \"./PressResponder\";\nimport { useDebugValue, useEffect, useRef } from 'react';\nexport default function usePressEvents(hostRef, config) {\n  _s();\n\n  var pressResponderRef = useRef(null);\n\n  if (pressResponderRef.current == null) {\n    pressResponderRef.current = new PressResponder(config);\n  }\n\n  var pressResponder = pressResponderRef.current;\n  useEffect(function () {\n    pressResponder.configure(config);\n  }, [config, pressResponder]);\n  useEffect(function () {\n    return function () {\n      pressResponder.reset();\n    };\n  }, [pressResponder]);\n  useDebugValue(config);\n  return pressResponder.getEventHandlers();\n}\n\n_s(usePressEvents, \"Bn7MRJJF05Zb4wEzqRzInRkFfmc=\");\n\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/Users/garethcozens/Documents/repo/cloudratha/react-native-web-nx-demo/node_modules/react-native-web/dist/modules/usePressEvents/index.js"],"names":["usePressEvents","pressResponderRef","useRef","pressResponder","useEffect","useDebugValue"],"mappings":"AASA;;;;AAEA,OAAA,cAAA;AACA,SAAA,aAAA,EAAA,SAAA,EAAA,MAAA,QAAA,OAAA;AACA,eAAe,SAAA,cAAA,CAAA,OAAA,EAAA,MAAA,EAAyC;AAAA,EAAA,EAAA;;AACtD,MAAIC,iBAAiB,GAAGC,MAAM,CAA9B,IAA8B,CAA9B;;AAEA,MAAID,iBAAiB,CAAjBA,OAAAA,IAAJ,IAAA,EAAuC;AACrCA,IAAAA,iBAAiB,CAAjBA,OAAAA,GAA4B,IAAA,cAAA,CAA5BA,MAA4B,CAA5BA;AAGF;;AAAA,MAAIE,cAAc,GAAGF,iBAAiB,CAAtC,OAAA;AAEAG,EAAAA,SAAS,CAAC,YAAY;AACpBD,IAAAA,cAAc,CAAdA,SAAAA,CAAAA,MAAAA;AADO,GAAA,EAEN,CAAA,MAAA,EAFHC,cAEG,CAFM,CAATA;AAKAA,EAAAA,SAAS,CAAC,YAAY;AACpB,WAAO,YAAY;AACjBD,MAAAA,cAAc,CAAdA,KAAAA;AADF,KAAA;AADO,GAAA,EAIN,CAJHC,cAIG,CAJM,CAATA;AAKAC,EAAAA,aAAa,CAAbA,MAAa,CAAbA;AACA,SAAOF,cAAc,CAArB,gBAAOA,EAAP;;;GApBsBH,c","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport PressResponder from './PressResponder';\nimport { useDebugValue, useEffect, useRef } from 'react';\nexport default function usePressEvents(hostRef, config) {\n  var pressResponderRef = useRef(null);\n\n  if (pressResponderRef.current == null) {\n    pressResponderRef.current = new PressResponder(config);\n  }\n\n  var pressResponder = pressResponderRef.current; // Re-configure to use the current node and configuration.\n\n  useEffect(function () {\n    pressResponder.configure(config);\n  }, [config, pressResponder]); // Reset the `pressResponder` when cleanup needs to occur. This is\n  // a separate effect because we do not want to rest the responder when `config` changes.\n\n  useEffect(function () {\n    return function () {\n      pressResponder.reset();\n    };\n  }, [pressResponder]);\n  useDebugValue(config);\n  return pressResponder.getEventHandlers();\n}"]},"metadata":{},"sourceType":"module"}