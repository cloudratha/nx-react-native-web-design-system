{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _Context = require(\"./Context\");\n\nvar _hooks = require(\"./../color-mode/hooks\");\n\nvar _hooks2 = require(\"../../hooks\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/core/hybrid-overlay/HybridProvider.tsx\";\n\nvar HybridProvider = function HybridProvider(_ref) {\n  var children = _ref.children,\n      _ref$options = _ref.options,\n      _ref$options$initialC = _ref$options.initialColorMode,\n      initialColorMode = _ref$options$initialC === void 0 ? 'light' : _ref$options$initialC,\n      _ref$options$accessib = _ref$options.accessibleColors,\n      isTextColorAccessible = _ref$options$accessib === void 0 ? false : _ref$options$accessib,\n      useSystemColorMode = _ref$options.useSystemColorMode,\n      colorModeManager = _ref.colorModeManager;\n\n  var _useModeManager = (0, _hooks.useModeManager)(initialColorMode, useSystemColorMode, colorModeManager),\n      colorMode = _useModeManager.colorMode,\n      setColorMode = _useModeManager.setColorMode;\n\n  var toggleColorMode = _react.default.useCallback(function () {\n    setColorMode(colorMode === 'light' ? 'dark' : 'light');\n  }, [colorMode, setColorMode]);\n\n  var _React$useState = _react.default.useState(isTextColorAccessible),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      accessibleColors = _React$useState2[0],\n      setAccessibleColors = _React$useState2[1];\n\n  _react.default.useEffect(function () {\n    var escapeKeyListener = null;\n\n    if (_reactNative.Platform.OS === 'web') {\n      escapeKeyListener = function escapeKeyListener(e) {\n        if (e.key === 'Escape') {\n          if (_hooks2.keyboardDismissHandlerManager.length() > 0) {\n            var lastHandler = _hooks2.keyboardDismissHandlerManager.pop();\n\n            lastHandler();\n          }\n        }\n      };\n\n      document.addEventListener('keydown', escapeKeyListener);\n    }\n\n    return function () {\n      if (_reactNative.Platform.OS === 'web') {\n        document.removeEventListener('keydown', escapeKeyListener);\n      }\n    };\n  }, []);\n\n  return _react.default.createElement(_Context.HybridContext.Provider, {\n    value: {\n      colorMode: {\n        colorMode: colorMode,\n        toggleColorMode: toggleColorMode,\n        setColorMode: setColorMode,\n        accessibleColors: accessibleColors,\n        setAccessibleColors: setAccessibleColors\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nvar _default = HybridProvider;\nexports.default = _default;","map":{"version":3,"sources":["/Users/garethcozens/Documents/repo/cloudratha/react-native-web-nx-demo/node_modules/native-base/lib/commonjs/core/hybrid-overlay/HybridProvider.js"],"names":["_interopRequireDefault","require","Object","value","exports","_slicedToArray2","_react","_Context","_hooks","_hooks2","_this","_jsxFileName","HybridProvider","children","_ref","_ref$options","_ref$options$initialC","initialColorMode","_ref$options$accessib","isTextColorAccessible","useSystemColorMode","colorModeManager","_useModeManager","colorMode","setColorMode","toggleColorMode","_React$useState","_React$useState2","accessibleColors","setAccessibleColors","escapeKeyListener","_reactNative","e","lastHandler","document","__self","__source","fileName","lineNumber","columnNumber","_default"],"mappings":"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","sourcesContent":["var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var _react=_interopRequireDefault(require(\"react\"));var _reactNative=require(\"react-native\");var _Context=require(\"./Context\");var _hooks=require(\"./../color-mode/hooks\");var _hooks2=require(\"../../hooks\");var _this=this,_jsxFileName=\"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/core/hybrid-overlay/HybridProvider.tsx\";var HybridProvider=function HybridProvider(_ref){var children=_ref.children,_ref$options=_ref.options,_ref$options$initialC=_ref$options.initialColorMode,initialColorMode=_ref$options$initialC===void 0?'light':_ref$options$initialC,_ref$options$accessib=_ref$options.accessibleColors,isTextColorAccessible=_ref$options$accessib===void 0?false:_ref$options$accessib,useSystemColorMode=_ref$options.useSystemColorMode,colorModeManager=_ref.colorModeManager;var _useModeManager=(0,_hooks.useModeManager)(initialColorMode,useSystemColorMode,colorModeManager),colorMode=_useModeManager.colorMode,setColorMode=_useModeManager.setColorMode;var toggleColorMode=_react.default.useCallback(function(){setColorMode(colorMode==='light'?'dark':'light');},[colorMode,setColorMode]);var _React$useState=_react.default.useState(isTextColorAccessible),_React$useState2=(0,_slicedToArray2.default)(_React$useState,2),accessibleColors=_React$useState2[0],setAccessibleColors=_React$useState2[1];_react.default.useEffect(function(){var escapeKeyListener=null;if(_reactNative.Platform.OS==='web'){escapeKeyListener=function escapeKeyListener(e){if(e.key==='Escape'){if(_hooks2.keyboardDismissHandlerManager.length()>0){var lastHandler=_hooks2.keyboardDismissHandlerManager.pop();lastHandler();}}};document.addEventListener('keydown',escapeKeyListener);}return function(){if(_reactNative.Platform.OS==='web'){document.removeEventListener('keydown',escapeKeyListener);}};},[]);return _react.default.createElement(_Context.HybridContext.Provider,{value:{colorMode:{colorMode:colorMode,toggleColorMode:toggleColorMode,setColorMode:setColorMode,accessibleColors:accessibleColors,setAccessibleColors:setAccessibleColors}},__self:_this,__source:{fileName:_jsxFileName,lineNumber:56,columnNumber:5}},children);};var _default=HybridProvider;exports.default=_default;\n//# sourceMappingURL=HybridProvider.js.map"]},"metadata":{},"sourceType":"script"}