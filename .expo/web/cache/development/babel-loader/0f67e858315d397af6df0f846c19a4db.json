{"ast":null,"code":"import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport useLayoutEffect from \"../useLayoutEffect\";\nimport UIManager from \"../../exports/UIManager\";\nvar DOM_LAYOUT_HANDLER_NAME = '__reactLayoutHandler';\nvar didWarn = !canUseDOM;\nvar resizeObserver = null;\n\nfunction getResizeObserver() {\n  if (canUseDOM && typeof window.ResizeObserver !== 'undefined') {\n    if (resizeObserver == null) {\n      resizeObserver = new window.ResizeObserver(function (entries) {\n        entries.forEach(function (entry) {\n          var node = entry.target;\n          var onLayout = node[DOM_LAYOUT_HANDLER_NAME];\n\n          if (typeof onLayout === 'function') {\n            UIManager.measure(node, function (x, y, width, height, left, top) {\n              var event = {\n                nativeEvent: {\n                  layout: {\n                    x: x,\n                    y: y,\n                    width: width,\n                    height: height,\n                    left: left,\n                    top: top\n                  }\n                },\n                timeStamp: Date.now()\n              };\n              Object.defineProperty(event.nativeEvent, 'target', {\n                enumerable: true,\n                get: function get() {\n                  return entry.target;\n                }\n              });\n              onLayout(event);\n            });\n          }\n        });\n      });\n    }\n  } else if (!didWarn) {\n    if (true && true) {\n      console.warn('onLayout relies on ResizeObserver which is not supported by your browser. ' + 'Please include a polyfill, e.g., https://github.com/que-etc/resize-observer-polyfill.');\n      didWarn = true;\n    }\n  }\n\n  return resizeObserver;\n}\n\nexport default function useElementLayout(ref, onLayout) {\n  var observer = getResizeObserver();\n  useLayoutEffect(function () {\n    var node = ref.current;\n\n    if (node != null) {\n      node[DOM_LAYOUT_HANDLER_NAME] = onLayout;\n    }\n  }, [ref, onLayout]);\n  useLayoutEffect(function () {\n    var node = ref.current;\n\n    if (node != null && observer != null) {\n      if (typeof node[DOM_LAYOUT_HANDLER_NAME] === 'function') {\n        observer.observe(node);\n      } else {\n        observer.unobserve(node);\n      }\n    }\n\n    return function () {\n      if (node != null && observer != null) {\n        observer.unobserve(node);\n      }\n    };\n  }, [ref, observer]);\n}","map":{"version":3,"sources":["/Users/garethcozens/Documents/repo/cloudratha/react-native-web-nx-demo/node_modules/react-native-web/dist/modules/useElementLayout/index.js"],"names":["DOM_LAYOUT_HANDLER_NAME","didWarn","resizeObserver","canUseDOM","window","entries","node","entry","onLayout","UIManager","event","nativeEvent","layout","x","y","width","height","left","top","timeStamp","Date","Object","enumerable","get","console","observer","getResizeObserver","useLayoutEffect","ref"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport useLayoutEffect from '../useLayoutEffect';\nimport UIManager from '../../exports/UIManager';\nvar DOM_LAYOUT_HANDLER_NAME = '__reactLayoutHandler';\nvar didWarn = !canUseDOM;\nvar resizeObserver = null;\n\nfunction getResizeObserver() {\n  if (canUseDOM && typeof window.ResizeObserver !== 'undefined') {\n    if (resizeObserver == null) {\n      resizeObserver = new window.ResizeObserver(function (entries) {\n        entries.forEach(function (entry) {\n          var node = entry.target;\n          var onLayout = node[DOM_LAYOUT_HANDLER_NAME];\n\n          if (typeof onLayout === 'function') {\n            // We still need to measure the view because browsers don't yet provide\n            // border-box dimensions in the entry\n            UIManager.measure(node, function (x, y, width, height, left, top) {\n              var event = {\n                // $FlowFixMe\n                nativeEvent: {\n                  layout: {\n                    x: x,\n                    y: y,\n                    width: width,\n                    height: height,\n                    left: left,\n                    top: top\n                  }\n                },\n                timeStamp: Date.now()\n              };\n              Object.defineProperty(event.nativeEvent, 'target', {\n                enumerable: true,\n                get: function get() {\n                  return entry.target;\n                }\n              });\n              onLayout(event);\n            });\n          }\n        });\n      });\n    }\n  } else if (!didWarn) {\n    if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {\n      console.warn('onLayout relies on ResizeObserver which is not supported by your browser. ' + 'Please include a polyfill, e.g., https://github.com/que-etc/resize-observer-polyfill.');\n      didWarn = true;\n    }\n  }\n\n  return resizeObserver;\n}\n\nexport default function useElementLayout(ref, onLayout) {\n  var observer = getResizeObserver();\n  useLayoutEffect(function () {\n    var node = ref.current;\n\n    if (node != null) {\n      node[DOM_LAYOUT_HANDLER_NAME] = onLayout;\n    }\n  }, [ref, onLayout]); // Observing is done in a separate effect to avoid this effect running\n  // when 'onLayout' changes.\n\n  useLayoutEffect(function () {\n    var node = ref.current;\n\n    if (node != null && observer != null) {\n      if (typeof node[DOM_LAYOUT_HANDLER_NAME] === 'function') {\n        observer.observe(node);\n      } else {\n        observer.unobserve(node);\n      }\n    }\n\n    return function () {\n      if (node != null && observer != null) {\n        observer.unobserve(node);\n      }\n    };\n  }, [ref, observer]);\n}"]},"metadata":{},"sourceType":"module"}