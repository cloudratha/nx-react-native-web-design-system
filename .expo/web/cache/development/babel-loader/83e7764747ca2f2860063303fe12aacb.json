{"ast":null,"code":"import isWebColor from \"../isWebColor\";\nimport processColor from \"../../exports/processColor\";\n\nvar normalizeColor = function normalizeColor(color, opacity) {\n  if (opacity === void 0) {\n    opacity = 1;\n  }\n\n  if (color == null) return;\n\n  if (typeof color === 'string' && isWebColor(color)) {\n    return color;\n  }\n\n  var colorInt = processColor(color);\n\n  if (colorInt != null) {\n    var r = colorInt >> 16 & 255;\n    var g = colorInt >> 8 & 255;\n    var b = colorInt & 255;\n    var a = (colorInt >> 24 & 255) / 255;\n    var alpha = (a * opacity).toFixed(2);\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + alpha + \")\";\n  }\n};\n\nexport default normalizeColor;\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/Users/garethcozens/Documents/repo/cloudratha/react-native-web-nx-demo/node_modules/react-native-web/dist/modules/normalizeColor/index.js"],"names":["normalizeColor","opacity","color","isWebColor","colorInt","processColor","r","g","b","a","alpha"],"mappings":"AAQA,OAAA,UAAA;AACA,OAAA,YAAA;;AAEA,IAAIA,cAAc,GAAG,SAAA,cAAA,CAAA,KAAA,EAAA,OAAA,EAAwC;AAC3D,MAAIC,OAAO,KAAK,KAAhB,CAAA,EAAwB;AACtBA,IAAAA,OAAO,GAAPA,CAAAA;AAGF;;AAAA,MAAIC,KAAK,IAAT,IAAA,EAAmB;;AAEnB,MAAI,OAAA,KAAA,KAAA,QAAA,IAA6BC,UAAU,CAA3C,KAA2C,CAA3C,EAAoD;AAClD,WAAA,KAAA;AAGF;;AAAA,MAAIC,QAAQ,GAAGC,YAAY,CAA3B,KAA2B,CAA3B;;AAEA,MAAID,QAAQ,IAAZ,IAAA,EAAsB;AACpB,QAAIE,CAAC,GAAGF,QAAQ,IAARA,EAAAA,GAAR,GAAA;AACA,QAAIG,CAAC,GAAGH,QAAQ,IAARA,CAAAA,GAAR,GAAA;AACA,QAAII,CAAC,GAAGJ,QAAQ,GAAhB,GAAA;AACA,QAAIK,CAAC,GAAG,CAACL,QAAQ,IAARA,EAAAA,GAAD,GAAA,IAAR,GAAA;AACA,QAAIM,KAAK,GAAG,CAACD,CAAC,GAAF,OAAA,EAAA,OAAA,CAAZ,CAAY,CAAZ;AACA,WAAO,UAAA,CAAA,GAAA,GAAA,GAAA,CAAA,GAAA,GAAA,GAAA,CAAA,GAAA,GAAA,GAAA,KAAA,GAAP,GAAA;AAEH;AArBD,CAAA;;AAuBA,eAAA,cAAA","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport isWebColor from '../isWebColor';\nimport processColor from '../../exports/processColor';\n\nvar normalizeColor = function normalizeColor(color, opacity) {\n  if (opacity === void 0) {\n    opacity = 1;\n  }\n\n  if (color == null) return;\n\n  if (typeof color === 'string' && isWebColor(color)) {\n    return color;\n  }\n\n  var colorInt = processColor(color);\n\n  if (colorInt != null) {\n    var r = colorInt >> 16 & 255;\n    var g = colorInt >> 8 & 255;\n    var b = colorInt & 255;\n    var a = (colorInt >> 24 & 255) / 255;\n    var alpha = (a * opacity).toFixed(2);\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + alpha + \")\";\n  }\n};\n\nexport default normalizeColor;"]},"metadata":{},"sourceType":"module"}