{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useColorModeValue = useColorModeValue;\nexports.useModeManager = useModeManager;\nexports.useAccessibleColors = useAccessibleColors;\nexports.useColorMode = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _Context = require(\"./../hybrid-overlay/Context\");\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar useColorMode = function useColorMode() {\n  _s();\n\n  var _React$useContext = _react[\"default\"].useContext(_Context.HybridContext),\n      colorModeContext = _React$useContext.colorMode;\n\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n\n  return colorModeContext;\n};\n\n_s(useColorMode, \"MqA94vfH67aVCXccDxUExLVX9k4=\");\n\nexports.useColorMode = useColorMode;\n\nfunction useColorModeValue(light, dark) {\n  _s2();\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  return colorMode === 'dark' ? dark : light;\n}\n\n_s2(useColorModeValue, \"2mGA9WI1EJwCOQQmHF5JmRZ6iG0=\", false, function () {\n  return [useColorMode];\n});\n\nfunction useModeManager(initialColorMode, useSystemColorMode, colorModeManager) {\n  var systemColorMode = (0, _reactNative.useColorScheme)();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  var _useState = (0, _react.useState)(initialColorMode),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      colorMode = _useState2[0],\n      setRawMode = _useState2[1];\n\n  function setColorMode(val) {\n    return _regenerator[\"default\"].async(function setColorMode$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!colorModeManager) {\n              _context.next = 3;\n              break;\n            }\n\n            _context.next = 3;\n            return _regenerator[\"default\"].awrap(colorModeManager.set(val));\n\n          case 3:\n            setRawMode(val);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  (0, _react.useEffect)(function () {\n    if (colorModeManager) {\n      (function getMode() {\n        var value;\n        return _regenerator[\"default\"].async(function getMode$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _regenerator[\"default\"].awrap(colorModeManager.get(initialColorMode));\n\n              case 2:\n                value = _context2.sent;\n\n                if (value && value !== colorMode) {\n                  setRawMode(value);\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n  (0, _react.useEffect)(function () {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n  return {\n    colorMode: colorMode,\n    setColorMode: setColorMode\n  };\n}\n\nfunction useAccessibleColors() {\n  _s3();\n\n  var _React$useContext2 = _react[\"default\"].useContext(_Context.HybridContext),\n      colorModeContext = _React$useContext2.colorMode;\n\n  var toggleAccessibleColors = function toggleAccessibleColors() {\n    return colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  };\n\n  return [colorModeContext.accessibleColors, colorModeContext.setAccessibleColors, toggleAccessibleColors];\n}\n\n_s3(useAccessibleColors, \"1ek7h5PRwEU8qbnNpnyIqK9TL6s=\");\n\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/Users/garethcozens/Documents/repo/cloudratha/react-native-web-nx-demo/node_modules/native-base/lib/commonjs/core/color-mode/hooks.js"],"names":["_interopRequireWildcard","require","_interopRequireDefault","Object","value","exports","_regenerator","_slicedToArray2","_react","_Context","useColorMode","_React$useContext","colorModeContext","useColorModeValue","_useColorMode","colorMode","systemColorMode","_reactNative","initialColorMode","_useState","_useState2","setRawMode","_context","colorModeManager","_context2","setColorMode","useAccessibleColors","_React$useContext2","toggleAccessibleColors"],"mappings":"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","sourcesContent":["var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.useColorModeValue=useColorModeValue;exports.useModeManager=useModeManager;exports.useAccessibleColors=useAccessibleColors;exports.useColorMode=void 0;var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var _react=_interopRequireWildcard(require(\"react\"));var _Context=require(\"./../hybrid-overlay/Context\");var _reactNative=require(\"react-native\");var useColorMode=function useColorMode(){var _React$useContext=_react.default.useContext(_Context.HybridContext),colorModeContext=_React$useContext.colorMode;if(colorModeContext===undefined){throw new Error('useColorMode must be used within a NativeBaseProvider');}return colorModeContext;};exports.useColorMode=useColorMode;function useColorModeValue(light,dark){var _useColorMode=useColorMode(),colorMode=_useColorMode.colorMode;return colorMode==='dark'?dark:light;}function useModeManager(initialColorMode,useSystemColorMode,colorModeManager){var systemColorMode=(0,_reactNative.useColorScheme)();if(useSystemColorMode){initialColorMode=systemColorMode;}var _useState=(0,_react.useState)(initialColorMode),_useState2=(0,_slicedToArray2.default)(_useState,2),colorMode=_useState2[0],setRawMode=_useState2[1];function setColorMode(val){return _regenerator.default.async(function setColorMode$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!colorModeManager){_context.next=3;break;}_context.next=3;return _regenerator.default.awrap(colorModeManager.set(val));case 3:setRawMode(val);case 4:case\"end\":return _context.stop();}}},null,null,null,Promise);}(0,_react.useEffect)(function(){if(colorModeManager){(function getMode(){var value;return _regenerator.default.async(function getMode$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return _regenerator.default.awrap(colorModeManager.get(initialColorMode));case 2:value=_context2.sent;if(value&&value!==colorMode){setRawMode(value);}case 4:case\"end\":return _context2.stop();}}},null,null,null,Promise);})();}},[colorMode,initialColorMode,colorModeManager]);(0,_react.useEffect)(function(){if(!colorModeManager&&useSystemColorMode){setRawMode(systemColorMode);}},[systemColorMode,colorModeManager,useSystemColorMode,setRawMode]);return{colorMode:colorMode,setColorMode:setColorMode};}function useAccessibleColors(){var _React$useContext2=_react.default.useContext(_Context.HybridContext),colorModeContext=_React$useContext2.colorMode;var toggleAccessibleColors=function toggleAccessibleColors(){return colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);};return[colorModeContext.accessibleColors,colorModeContext.setAccessibleColors,toggleAccessibleColors];}\n//# sourceMappingURL=hooks.js.map"]},"metadata":{},"sourceType":"script"}